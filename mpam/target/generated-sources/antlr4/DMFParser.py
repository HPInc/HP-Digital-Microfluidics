# Generated from DMF.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


from mpam.types import Dir, OnOff, Turn, ticks, unknown_reagent, waste_reagent
from langsup.type_supp import Type, Rel, PhysUnit, EnvRelativeUnit, NumberedItem
from quantities import SI


from mpam.types import Dir 


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u010f")
        buf.write("\u0578\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\3")
        buf.write("\2\7\2^\n\2\f\2\16\2a\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\5\3m\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("v\n\3\3\3\3\3\3\3\5\3{\n\3\3\4\5\4~\n\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\5\4\u0089\n\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00a9")
        buf.write("\n\4\3\4\3\4\3\4\3\4\5\4\u00af\n\4\3\4\3\4\3\4\5\4\u00b4")
        buf.write("\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7")
        buf.write("\5\u00c2\n\5\f\5\16\5\u00c5\13\5\3\5\3\5\5\5\u00c9\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00d6")
        buf.write("\n\5\3\6\3\6\7\6\u00da\n\6\f\6\16\6\u00dd\13\6\3\6\3\6")
        buf.write("\3\6\7\6\u00e2\n\6\f\6\16\6\u00e5\13\6\3\6\5\6\u00e8\n")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00fd\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0106\n\7\5\7\u0108\n\7\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\5\b\u0112\n\b\3\b\3\b\3\b\3\b\3\b\5")
        buf.write("\b\u0119\n\b\3\b\5\b\u011c\n\b\3\t\3\t\3\t\3\t\5\t\u0122")
        buf.write("\n\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u012a\n\n\3\n\3\n\3\13")
        buf.write("\3\13\5\13\u0130\n\13\3\f\3\f\3\f\3\f\5\f\u0136\n\f\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u014a\n\r\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u0151\n\r\3\r\3\r\5\r\u0155\n\r\3\r\5\r\u0158\n\r\3\r")
        buf.write("\3\r\5\r\u015c\n\r\3\r\3\r\3\r\3\r\5\r\u0162\n\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\5\r\u016b\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\7\r\u0172\n\r\f\r\16\r\u0175\13\r\3\r\5\r\u0178\n\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\7\r\u017f\n\r\f\r\16\r\u0182\13\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u018e\n\r")
        buf.write("\3\r\3\r\3\r\5\r\u0193\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u019a")
        buf.write("\n\r\3\r\3\r\3\r\7\r\u019f\n\r\f\r\16\r\u01a2\13\r\5\r")
        buf.write("\u01a4\n\r\3\r\3\r\3\r\3\r\7\r\u01aa\n\r\f\r\16\r\u01ad")
        buf.write("\13\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01b5\n\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u01ca\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u01e0\n\r\3\r\5\r\u01e3\n\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0203\n")
        buf.write("\r\f\r\16\r\u0206\13\r\5\r\u0208\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0215\n\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u021e\n\r\3\r\3\r\3\r\5\r\u0223\n\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\7\r\u0244\n\r\f\r\16\r\u0247\13\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u025b\n\16\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0266\n\17")
        buf.write("\3\20\3\20\3\20\3\20\5\20\u026c\n\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u027a")
        buf.write("\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0282\n\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0292\n\23\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u0298\n\24\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u02a0")
        buf.write("\n\26\3\27\3\27\5\27\u02a4\n\27\3\27\3\27\3\27\3\27\7")
        buf.write("\27\u02aa\n\27\f\27\16\27\u02ad\13\27\5\27\u02af\n\27")
        buf.write("\3\27\5\27\u02b2\n\27\3\27\3\27\5\27\u02b6\n\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\7\27\u02bd\n\27\f\27\16\27\u02c0\13")
        buf.write("\27\5\27\u02c2\n\27\3\27\5\27\u02c5\n\27\3\27\3\27\5\27")
        buf.write("\u02c9\n\27\3\27\3\27\5\27\u02cd\n\27\3\27\3\27\5\27\u02d1")
        buf.write("\n\27\3\27\3\27\3\27\3\27\7\27\u02d7\n\27\f\27\16\27\u02da")
        buf.write("\13\27\5\27\u02dc\n\27\3\27\5\27\u02df\n\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u02e5\n\27\3\27\3\27\3\27\3\27\7\27\u02eb")
        buf.write("\n\27\f\27\16\27\u02ee\13\27\5\27\u02f0\n\27\3\27\5\27")
        buf.write("\u02f3\n\27\5\27\u02f5\n\27\3\30\5\30\u02f8\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u030e\n")
        buf.write("\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0318")
        buf.write("\n\31\3\31\3\31\3\31\3\31\5\31\u031e\n\31\3\31\5\31\u0321")
        buf.write("\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u032e\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\5\31\u0337\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0346\n\32\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u0355\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5")
        buf.write("\34\u035d\n\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0385\n")
        buf.write("\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u038d\n\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\5\37\u0395\n\37\3 \3 \3 \3 ")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u03a4\n \3!\3!\3!\5!\u03a9")
        buf.write("\n!\3!\3!\3!\3!\3!\3!\3!\5!\u03b2\n!\3!\5!\u03b5\n!\3")
        buf.write("!\3!\3!\3!\3!\5!\u03bc\n!\3!\3!\3!\3!\3!\5!\u03c3\n!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u03d6")
        buf.write("\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03ee\n\"\3")
        buf.write("#\3#\3#\3#\3#\5#\u03f5\n#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03ff")
        buf.write("\n#\3#\5#\u0402\n#\3#\5#\u0405\n#\3$\3$\3%\3%\3&\3&\5")
        buf.write("&\u040d\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u042a\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\5\'\u0437\n\'\3\'\3\'\5\'\u043b\n\'\3\'")
        buf.write("\3\'\5\'\u043f\n\'\3\'\5\'\u0442\n\'\3\'\3\'\5\'\u0446")
        buf.write("\n\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u044e\n\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\5\'\u046e\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(")
        buf.write("\u047c\n(\3)\3)\3)\3)\5)\u0482\n)\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\5*\u048c\n*\3+\3+\5+\u0490\n+\3+\3+\3+\5+\u0495\n")
        buf.write("+\3+\3+\3+\3+\5+\u049b\n+\3+\3+\3+\3+\3+\3+\3+\5+\u04a4")
        buf.write("\n+\3+\5+\u04a7\n+\3+\3+\3+\3+\5+\u04ad\n+\3+\5+\u04b0")
        buf.write("\n+\3+\3+\3+\3+\3+\5+\u04b7\n+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u04ca\n+\3+\3+\5+\u04ce")
        buf.write("\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u04d9\n+\3+\5+\u04dc")
        buf.write("\n+\3+\3+\5+\u04e0\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0531\n")
        buf.write(",\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0576\n.\3")
        buf.write(".\2\3\30/\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&")
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\2\60\3\2\u0104\u0105")
        buf.write("\4\2\35\35$$\3\2-.\3\2\63\64\3\2 !\4\2\u00f7\u00f7\u00fd")
        buf.write("\u00fd\4\2\u00f4\u00f4\u0101\u0101\4\2\31\31\35\35\4\2")
        buf.write("\20\20??\4\2\17\17@@\3\2AB\3\2CD\4\2CCEE\4\2AAFF\3\2J")
        buf.write("K\3\2LM\3\2NP\3\2TU\3\2VW\3\2op\3\2qr\4\2ffz{\4\2ss\u0081")
        buf.write("\u0081\3\2\u008c\u0090\3\2\u0091\u0093\3\2\u0094\u0097")
        buf.write("\3\2\u0098\u009b\3\2\u009c\u00a1\3\2\u00a2\u00a7\4\2w")
        buf.write("w\u00a8\u00a8\4\2\62\62\u00a9\u00a9\3\2\u00aa\u00ac\3")
        buf.write("\2\u00ad\u00af\3\2\u00b0\u00b1\4\2\u0096\u0096\u00b2\u00b2")
        buf.write("\3\2\u00b3\u00b4\3\2\u00b6\u00b7\4\2qr~~\4\2))\u00c1\u00c1")
        buf.write("\3\2\u00cb\u00cc\3\2\u00cd\u00ce\4\2  \u00d0\u00d1\3\2")
        buf.write("\u00d4\u00d5\3\2\u00dc\u00e1\3\2\u00e2\u00e7\24\2 !%%")
        buf.write("\62\62HHJKYYmmqrttxy||~\177\u0083\u0084\u0086\u0087\u008a")
        buf.write("\u008b\u00ba\u00ba\u00c4\u00c6\u0109\u0109\2\u0700\2_")
        buf.write("\3\2\2\2\4z\3\2\2\2\6\u00b3\3\2\2\2\b\u00d5\3\2\2\2\n")
        buf.write("\u00e7\3\2\2\2\f\u0107\3\2\2\2\16\u011b\3\2\2\2\20\u0121")
        buf.write("\3\2\2\2\22\u0127\3\2\2\2\24\u012d\3\2\2\2\26\u0135\3")
        buf.write("\2\2\2\30\u01c9\3\2\2\2\32\u025a\3\2\2\2\34\u0265\3\2")
        buf.write("\2\2\36\u026b\3\2\2\2 \u0279\3\2\2\2\"\u0281\3\2\2\2$")
        buf.write("\u0291\3\2\2\2&\u0297\3\2\2\2(\u0299\3\2\2\2*\u029b\3")
        buf.write("\2\2\2,\u02f4\3\2\2\2.\u030d\3\2\2\2\60\u0336\3\2\2\2")
        buf.write("\62\u0345\3\2\2\2\64\u0354\3\2\2\2\66\u035c\3\2\2\28\u035e")
        buf.write("\3\2\2\2:\u0384\3\2\2\2<\u0394\3\2\2\2>\u03a3\3\2\2\2")
        buf.write("@\u03d5\3\2\2\2B\u03ed\3\2\2\2D\u0404\3\2\2\2F\u0406\3")
        buf.write("\2\2\2H\u0408\3\2\2\2J\u040c\3\2\2\2L\u046d\3\2\2\2N\u047b")
        buf.write("\3\2\2\2P\u0481\3\2\2\2R\u048b\3\2\2\2T\u04df\3\2\2\2")
        buf.write("V\u0530\3\2\2\2X\u0532\3\2\2\2Z\u0575\3\2\2\2\\^\5\b\5")
        buf.write("\2]\\\3\2\2\2^a\3\2\2\2_]\3\2\2\2_`\3\2\2\2`b\3\2\2\2")
        buf.write("a_\3\2\2\2bc\7\2\2\3c\3\3\2\2\2de\5\n\6\2ef\7\2\2\3f{")
        buf.write("\3\2\2\2gh\5\20\t\2hi\7\2\2\3i{\3\2\2\2jl\5\6\4\2km\7")
        buf.write("\u0102\2\2lk\3\2\2\2lm\3\2\2\2mn\3\2\2\2no\7\2\2\3o{\3")
        buf.write("\2\2\2pq\5(\25\2qr\7\2\2\3r{\3\2\2\2su\5\30\r\2tv\7\u0102")
        buf.write("\2\2ut\3\2\2\2uv\3\2\2\2vw\3\2\2\2wx\7\2\2\3x{\3\2\2\2")
        buf.write("y{\7\2\2\3zd\3\2\2\2zg\3\2\2\2zj\3\2\2\2zp\3\2\2\2zs\3")
        buf.write("\2\2\2zy\3\2\2\2{\5\3\2\2\2|~\7\u00fc\2\2}|\3\2\2\2}~")
        buf.write("\3\2\2\2~\177\3\2\2\2\177\u0080\7\u00f8\2\2\u0080\u0081")
        buf.write("\5\64\33\2\u0081\u0082\5R*\2\u0082\u0083\7\u00fa\2\2\u0083")
        buf.write("\u0084\5\30\r\2\u0084\u0085\b\4\1\2\u0085\u0086\b\4\1")
        buf.write("\2\u0086\u00b4\3\2\2\2\u0087\u0089\7\u00fc\2\2\u0088\u0087")
        buf.write("\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u008a\3\2\2\2\u008a")
        buf.write("\u008b\7\u00f8\2\2\u008b\u008c\5\64\33\2\u008c\u008d\7")
        buf.write("\u010a\2\2\u008d\u008e\7\u00fa\2\2\u008e\u008f\5\30\r")
        buf.write("\2\u008f\u0090\b\4\1\2\u0090\u0091\b\4\1\2\u0091\u00b4")
        buf.write("\3\2\2\2\u0092\u0093\7\u00fc\2\2\u0093\u0094\5R*\2\u0094")
        buf.write("\u0095\7\u00f5\2\2\u0095\u0096\5\30\r\2\u0096\u0097\b")
        buf.write("\4\1\2\u0097\u0098\b\4\1\2\u0098\u00b4\3\2\2\2\u0099\u009a")
        buf.write("\7\u00fc\2\2\u009a\u009b\5\62\32\2\u009b\u009c\7\u010a")
        buf.write("\2\2\u009c\u009d\7\u00f5\2\2\u009d\u009e\5\30\r\2\u009e")
        buf.write("\u009f\b\4\1\2\u009f\u00a0\b\4\1\2\u00a0\u00b4\3\2\2\2")
        buf.write("\u00a1\u00a2\7\u00fc\2\2\u00a2\u00a3\5\62\32\2\u00a3\u00a4")
        buf.write("\7\u010a\2\2\u00a4\u00a5\b\4\1\2\u00a5\u00a6\b\4\1\2\u00a6")
        buf.write("\u00b4\3\2\2\2\u00a7\u00a9\7\u00fc\2\2\u00a8\u00a7\3\2")
        buf.write("\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ab")
        buf.write("\5\62\32\2\u00ab\u00ae\5R*\2\u00ac\u00ad\7\u00f5\2\2\u00ad")
        buf.write("\u00af\5\30\r\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3\2\2")
        buf.write("\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\b\4\1\2\u00b1\u00b2")
        buf.write("\b\4\1\2\u00b2\u00b4\3\2\2\2\u00b3}\3\2\2\2\u00b3\u0088")
        buf.write("\3\2\2\2\u00b3\u0092\3\2\2\2\u00b3\u0099\3\2\2\2\u00b3")
        buf.write("\u00a1\3\2\2\2\u00b3\u00a8\3\2\2\2\u00b4\7\3\2\2\2\u00b5")
        buf.write("\u00b6\5\6\4\2\u00b6\u00b7\7\u0102\2\2\u00b7\u00d6\3\2")
        buf.write("\2\2\u00b8\u00d6\5(\25\2\u00b9\u00ba\7\3\2\2\u00ba\u00bb")
        buf.write("\5\30\r\2\u00bb\u00c3\5\n\6\2\u00bc\u00bd\7\4\2\2\u00bd")
        buf.write("\u00be\7\3\2\2\u00be\u00bf\5\30\r\2\u00bf\u00c0\5\n\6")
        buf.write("\2\u00c0\u00c2\3\2\2\2\u00c1\u00bc\3\2\2\2\u00c2\u00c5")
        buf.write("\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4")
        buf.write("\u00c8\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c6\u00c7\7\4\2\2")
        buf.write("\u00c7\u00c9\5\n\6\2\u00c8\u00c6\3\2\2\2\u00c8\u00c9\3")
        buf.write("\2\2\2\u00c9\u00d6\3\2\2\2\u00ca\u00cb\5\30\r\2\u00cb")
        buf.write("\u00cc\7\u0102\2\2\u00cc\u00d6\3\2\2\2\u00cd\u00d6\5\20")
        buf.write("\t\2\u00ce\u00cf\5\22\n\2\u00cf\u00d0\7\u0102\2\2\u00d0")
        buf.write("\u00d6\3\2\2\2\u00d1\u00d2\5\24\13\2\u00d2\u00d3\7\u0102")
        buf.write("\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d6\5\n\6\2\u00d5\u00b5")
        buf.write("\3\2\2\2\u00d5\u00b8\3\2\2\2\u00d5\u00b9\3\2\2\2\u00d5")
        buf.write("\u00ca\3\2\2\2\u00d5\u00cd\3\2\2\2\u00d5\u00ce\3\2\2\2")
        buf.write("\u00d5\u00d1\3\2\2\2\u00d5\u00d4\3\2\2\2\u00d6\t\3\2\2")
        buf.write("\2\u00d7\u00db\7\5\2\2\u00d8\u00da\5\b\5\2\u00d9\u00d8")
        buf.write("\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00de\3\2\2\2\u00dd\u00db\3\2\2\2")
        buf.write("\u00de\u00e8\7\6\2\2\u00df\u00e3\7\7\2\2\u00e0\u00e2\5")
        buf.write("\b\5\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5\3\2\2\2\u00e3\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e6\3\2\2\2\u00e5")
        buf.write("\u00e3\3\2\2\2\u00e6\u00e8\7\b\2\2\u00e7\u00d7\3\2\2\2")
        buf.write("\u00e7\u00df\3\2\2\2\u00e8\13\3\2\2\2\u00e9\u00ea\5\30")
        buf.write("\r\2\u00ea\u00eb\7\t\2\2\u00eb\u0108\3\2\2\2\u00ec\u00ed")
        buf.write("\7\n\2\2\u00ed\u0108\5\30\r\2\u00ee\u00ef\t\2\2\2\u00ef")
        buf.write("\u0108\5\30\r\2\u00f0\u00f1\7\13\2\2\u00f1\u00f2\5R*\2")
        buf.write("\u00f2\u00f3\7\f\2\2\u00f3\u00f4\5\30\r\2\u00f4\u0108")
        buf.write("\3\2\2\2\u00f5\u00f6\7\13\2\2\u00f6\u00f7\5R*\2\u00f7")
        buf.write("\u00f8\5\16\b\2\u00f8\u00f9\7\r\2\2\u00f9\u00fc\5\30\r")
        buf.write("\2\u00fa\u00fb\7\16\2\2\u00fb\u00fd\5\30\r\2\u00fc\u00fa")
        buf.write("\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u0108\3\2\2\2\u00fe")
        buf.write("\u00ff\7\13\2\2\u00ff\u0100\5.\30\2\u0100\u0101\5\16\b")
        buf.write("\2\u0101\u0102\7\r\2\2\u0102\u0105\5\30\r\2\u0103\u0104")
        buf.write("\7\16\2\2\u0104\u0106\5\30\r\2\u0105\u0103\3\2\2\2\u0105")
        buf.write("\u0106\3\2\2\2\u0106\u0108\3\2\2\2\u0107\u00e9\3\2\2\2")
        buf.write("\u0107\u00ec\3\2\2\2\u0107\u00ee\3\2\2\2\u0107\u00f0\3")
        buf.write("\2\2\2\u0107\u00f5\3\2\2\2\u0107\u00fe\3\2\2\2\u0108\r")
        buf.write("\3\2\2\2\u0109\u010a\7\u00f5\2\2\u010a\u010b\5\30\r\2")
        buf.write("\u010b\u010c\7\17\2\2\u010c\u010d\b\b\1\2\u010d\u011c")
        buf.write("\3\2\2\2\u010e\u010f\7\u00f5\2\2\u010f\u0111\5\30\r\2")
        buf.write("\u0110\u0112\7\20\2\2\u0111\u0110\3\2\2\2\u0111\u0112")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\b\b\1\2\u0114")
        buf.write("\u011c\3\2\2\2\u0115\u0116\7\17\2\2\u0116\u011c\b\b\1")
        buf.write("\2\u0117\u0119\7\20\2\2\u0118\u0117\3\2\2\2\u0118\u0119")
        buf.write("\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\b\b\1\2\u011b")
        buf.write("\u0109\3\2\2\2\u011b\u010e\3\2\2\2\u011b\u0115\3\2\2\2")
        buf.write("\u011b\u0118\3\2\2\2\u011c\17\3\2\2\2\u011d\u011e\7\21")
        buf.write("\2\2\u011e\u011f\5R*\2\u011f\u0120\7\u0106\2\2\u0120\u0122")
        buf.write("\3\2\2\2\u0121\u011d\3\2\2\2\u0121\u0122\3\2\2\2\u0122")
        buf.write("\u0123\3\2\2\2\u0123\u0124\7\22\2\2\u0124\u0125\5\f\7")
        buf.write("\2\u0125\u0126\5\n\6\2\u0126\21\3\2\2\2\u0127\u0129\7")
        buf.write("\23\2\2\u0128\u012a\5R*\2\u0129\u0128\3\2\2\2\u0129\u012a")
        buf.write("\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\7\24\2\2\u012c")
        buf.write("\23\3\2\2\2\u012d\u012f\7\25\2\2\u012e\u0130\5\30\r\2")
        buf.write("\u012f\u012e\3\2\2\2\u012f\u0130\3\2\2\2\u0130\25\3\2")
        buf.write("\2\2\u0131\u0132\7\u0106\2\2\u0132\u0136\b\f\1\2\u0133")
        buf.write("\u0134\7\u0107\2\2\u0134\u0136\b\f\1\2\u0135\u0131\3\2")
        buf.write("\2\2\u0135\u0133\3\2\2\2\u0136\27\3\2\2\2\u0137\u0138")
        buf.write("\b\r\1\2\u0138\u0139\7\26\2\2\u0139\u013a\5\30\r\2\u013a")
        buf.write("\u013b\7\u0107\2\2\u013b\u01ca\3\2\2\2\u013c\u013d\7\26")
        buf.write("\2\2\u013d\u013e\5\30\r\2\u013e\u013f\7\27\2\2\u013f\u0140")
        buf.write("\5\30\r\2\u0140\u0141\7\u0107\2\2\u0141\u01ca\3\2\2\2")
        buf.write("\u0142\u0143\7\u0101\2\2\u0143\u01ca\5\30\r9\u0144\u0145")
        buf.write("\5D#\2\u0145\u0146\7\30\2\2\u0146\u0147\5\30\r\67\u0147")
        buf.write("\u01ca\3\2\2\2\u0148\u014a\7\31\2\2\u0149\u0148\3\2\2")
        buf.write("\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c")
        buf.write("\7\32\2\2\u014c\u01ca\58\35\2\u014d\u014e\7\u010a\2\2")
        buf.write("\u014e\u01ca\5$\23\2\u014f\u0151\7$\2\2\u0150\u014f\3")
        buf.write("\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154")
        buf.write("\5\36\20\2\u0153\u0155\7%\2\2\u0154\u0153\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0155\u01ca\3\2\2\2\u0156\u0158\t\3\2\2")
        buf.write("\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\3")
        buf.write("\2\2\2\u0159\u015b\7%\2\2\u015a\u015c\7&\2\2\u015b\u015a")
        buf.write("\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015d\3\2\2\2\u015d")
        buf.write("\u01ca\5\30\r\'\u015e\u015f\7\u00fe\2\2\u015f\u01ca\5")
        buf.write("\30\r \u0160\u0162\7\35\2\2\u0161\u0160\3\2\2\2\u0161")
        buf.write("\u0162\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\7)\2\2")
        buf.write("\u0164\u0165\7*\2\2\u0165\u0166\5\30\r\2\u0166\u0167\7")
        buf.write("+\2\2\u0167\u0168\5\30\r\37\u0168\u01ca\3\2\2\2\u0169")
        buf.write("\u016b\7\35\2\2\u016a\u0169\3\2\2\2\u016a\u016b\3\2\2")
        buf.write("\2\u016b\u016c\3\2\2\2\u016c\u016d\7)\2\2\u016d\u016e")
        buf.write("\7*\2\2\u016e\u0173\5\30\r\2\u016f\u0170\7\27\2\2\u0170")
        buf.write("\u0172\5\30\r\2\u0171\u016f\3\2\2\2\u0172\u0175\3\2\2")
        buf.write("\2\u0173\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u01ca")
        buf.write("\3\2\2\2\u0175\u0173\3\2\2\2\u0176\u0178\7\35\2\2\u0177")
        buf.write("\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\3\2\2\2")
        buf.write("\u0179\u017a\7)\2\2\u017a\u017b\7*\2\2\u017b\u0180\5\30")
        buf.write("\r\2\u017c\u017d\7\27\2\2\u017d\u017f\5\30\r\2\u017e\u017c")
        buf.write("\3\2\2\2\u017f\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2")
        buf.write("\u0183\u0184\7\27\2\2\u0184\u0185\7+\2\2\u0185\u0186\5")
        buf.write("\30\r\35\u0186\u01ca\3\2\2\2\u0187\u0188\5 \21\2\u0188")
        buf.write("\u0189\5\30\r\32\u0189\u01ca\3\2\2\2\u018a\u01ca\5 \21")
        buf.write("\2\u018b\u018d\7\r\2\2\u018c\u018e\5&\24\2\u018d\u018c")
        buf.write("\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f\3\2\2\2\u018f")
        buf.write("\u01ca\5\30\r\30\u0190\u0192\t\4\2\2\u0191\u0193\7\n\2")
        buf.write("\2\u0192\u0191\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0194")
        buf.write("\3\2\2\2\u0194\u01ca\5\30\r\27\u0195\u0196\t\4\2\2\u0196")
        buf.write("\u0197\7\n\2\2\u0197\u019a\7/\2\2\u0198\u019a\7\60\2\2")
        buf.write("\u0199\u0195\3\2\2\2\u0199\u0198\3\2\2\2\u019a\u01a3\3")
        buf.write("\2\2\2\u019b\u01a0\5\30\r\2\u019c\u019d\7\27\2\2\u019d")
        buf.write("\u019f\5\30\r\2\u019e\u019c\3\2\2\2\u019f\u01a2\3\2\2")
        buf.write("\2\u01a0\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a4")
        buf.write("\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a3\u019b\3\2\2\2\u01a3")
        buf.write("\u01a4\3\2\2\2\u01a4\u01ca\3\2\2\2\u01a5\u01a6\7\61\2")
        buf.write("\2\u01a6\u01ab\5\30\r\2\u01a7\u01a8\7\27\2\2\u01a8\u01aa")
        buf.write("\5\30\r\2\u01a9\u01a7\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab")
        buf.write("\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ca\3\2\2\2")
        buf.write("\u01ad\u01ab\3\2\2\2\u01ae\u01af\7\62\2\2\u01af\u01b0")
        buf.write("\t\5\2\2\u01b0\u01ca\5\30\r\23\u01b1\u01ca\5*\26\2\u01b2")
        buf.write("\u01ca\5\60\31\2\u01b3\u01b5\7$\2\2\u01b4\u01b3\3\2\2")
        buf.write("\2\u01b4\u01b5\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01ca")
        buf.write("\5\62\32\2\u01b7\u01b8\5\62\32\2\u01b8\u01b9\7\u010a\2")
        buf.write("\2\u01b9\u01ca\3\2\2\2\u01ba\u01ca\5P)\2\u01bb\u01ca\5")
        buf.write("R*\2\u01bc\u01ca\5T+\2\u01bd\u01be\5R*\2\u01be\u01bf\7")
        buf.write("\u00f5\2\2\u01bf\u01c0\5\30\r\b\u01c0\u01ca\3\2\2\2\u01c1")
        buf.write("\u01c2\5\62\32\2\u01c2\u01c3\7\u010a\2\2\u01c3\u01c4\7")
        buf.write("\u00f5\2\2\u01c4\u01c5\5\30\r\6\u01c5\u01ca\3\2\2\2\u01c6")
        buf.write("\u01ca\5X-\2\u01c7\u01ca\7\u010a\2\2\u01c8\u01ca\7\u010b")
        buf.write("\2\2\u01c9\u0137\3\2\2\2\u01c9\u013c\3\2\2\2\u01c9\u0142")
        buf.write("\3\2\2\2\u01c9\u0144\3\2\2\2\u01c9\u0149\3\2\2\2\u01c9")
        buf.write("\u014d\3\2\2\2\u01c9\u0150\3\2\2\2\u01c9\u0157\3\2\2\2")
        buf.write("\u01c9\u015e\3\2\2\2\u01c9\u0161\3\2\2\2\u01c9\u016a\3")
        buf.write("\2\2\2\u01c9\u0177\3\2\2\2\u01c9\u0187\3\2\2\2\u01c9\u018a")
        buf.write("\3\2\2\2\u01c9\u018b\3\2\2\2\u01c9\u0190\3\2\2\2\u01c9")
        buf.write("\u0199\3\2\2\2\u01c9\u01a5\3\2\2\2\u01c9\u01ae\3\2\2\2")
        buf.write("\u01c9\u01b1\3\2\2\2\u01c9\u01b2\3\2\2\2\u01c9\u01b4\3")
        buf.write("\2\2\2\u01c9\u01b7\3\2\2\2\u01c9\u01ba\3\2\2\2\u01c9\u01bb")
        buf.write("\3\2\2\2\u01c9\u01bc\3\2\2\2\u01c9\u01bd\3\2\2\2\u01c9")
        buf.write("\u01c1\3\2\2\2\u01c9\u01c6\3\2\2\2\u01c9\u01c7\3\2\2\2")
        buf.write("\u01c9\u01c8\3\2\2\2\u01ca\u0245\3\2\2\2\u01cb\u01cc\f")
        buf.write(".\2\2\u01cc\u01cd\7\f\2\2\u01cd\u01ce\t\6\2\2\u01ce\u0244")
        buf.write("\5\30\r/\u01cf\u01d0\f&\2\2\u01d0\u01d1\7\'\2\2\u01d1")
        buf.write("\u0244\5\30\r\'\u01d2\u01d3\f%\2\2\u01d3\u01d4\t\7\2\2")
        buf.write("\u01d4\u0244\5\30\r&\u01d5\u01d6\f$\2\2\u01d6\u01d7\t")
        buf.write("\b\2\2\u01d7\u0244\5\30\r%\u01d8\u01d9\f#\2\2\u01d9\u01da")
        buf.write("\5N(\2\u01da\u01db\5\30\r$\u01db\u0244\3\2\2\2\u01dc\u01e2")
        buf.write("\f!\2\2\u01dd\u01df\7(\2\2\u01de\u01e0\7\u00fe\2\2\u01df")
        buf.write("\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e3\3\2\2\2")
        buf.write("\u01e1\u01e3\7\u00fb\2\2\u01e2\u01dd\3\2\2\2\u01e2\u01e1")
        buf.write("\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u0244\5\30\r\"\u01e5")
        buf.write("\u01e6\f\34\2\2\u01e6\u01e7\7+\2\2\u01e7\u0244\5\30\r")
        buf.write("\35\u01e8\u01e9\f\33\2\2\u01e9\u01ea\7,\2\2\u01ea\u0244")
        buf.write("\5\30\r\34\u01eb\u01ec\f\22\2\2\u01ec\u01ed\t\5\2\2\u01ed")
        buf.write("\u0244\5\30\r\23\u01ee\u01ef\f\21\2\2\u01ef\u01f0\7\u00fa")
        buf.write("\2\2\u01f0\u0244\5\30\r\22\u01f1\u01f2\f\20\2\2\u01f2")
        buf.write("\u01f3\7\3\2\2\u01f3\u01f4\5\30\r\2\u01f4\u01f5\7\4\2")
        buf.write("\2\u01f5\u01f6\5\30\r\21\u01f6\u0244\3\2\2\2\u01f7\u01f8")
        buf.write("\f\7\2\2\u01f8\u01f9\7\u00f6\2\2\u01f9\u01fa\5L\'\2\u01fa")
        buf.write("\u01fb\7\u00f5\2\2\u01fb\u01fc\5\30\r\b\u01fc\u0244\3")
        buf.write("\2\2\2\u01fd\u01fe\f;\2\2\u01fe\u0207\7\26\2\2\u01ff\u0204")
        buf.write("\5\30\r\2\u0200\u0201\7\27\2\2\u0201\u0203\5\30\r\2\u0202")
        buf.write("\u0200\3\2\2\2\u0203\u0206\3\2\2\2\u0204\u0202\3\2\2\2")
        buf.write("\u0204\u0205\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3")
        buf.write("\2\2\2\u0207\u01ff\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209")
        buf.write("\3\2\2\2\u0209\u0244\7\u0107\2\2\u020a\u020b\f8\2\2\u020b")
        buf.write("\u0244\5 \21\2\u020c\u020d\f\65\2\2\u020d\u020e\7\u00f6")
        buf.write("\2\2\u020e\u020f\7\33\2\2\u020f\u0210\7\f\2\2\u0210\u0244")
        buf.write("\5B\"\2\u0211\u0212\f\64\2\2\u0212\u0214\7\34\2\2\u0213")
        buf.write("\u0215\7\35\2\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2")
        buf.write("\2\u0215\u0216\3\2\2\2\u0216\u0217\7\36\2\2\u0217\u0218")
        buf.write("\7\f\2\2\u0218\u0244\5B\"\2\u0219\u021a\f\63\2\2\u021a")
        buf.write("\u021b\7\u00f6\2\2\u021b\u021d\5L\'\2\u021c\u021e\5\32")
        buf.write("\16\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0244")
        buf.write("\3\2\2\2\u021f\u0220\f\62\2\2\u0220\u0222\7\u00f6\2\2")
        buf.write("\u0221\u0223\7\u0108\2\2\u0222\u0221\3\2\2\2\u0222\u0223")
        buf.write("\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0244\5L\'\2\u0225")
        buf.write("\u0226\f\61\2\2\u0226\u0227\7\u00f6\2\2\u0227\u0228\7")
        buf.write("\26\2\2\u0228\u0229\7\u0108\2\2\u0229\u022a\7\u0107\2")
        buf.write("\2\u022a\u0244\5L\'\2\u022b\u022c\f\60\2\2\u022c\u0244")
        buf.write("\5\32\16\2\u022d\u022e\f/\2\2\u022e\u022f\7\37\2\2\u022f")
        buf.write("\u0244\5\"\22\2\u0230\u0231\f,\2\2\u0231\u0244\5$\23\2")
        buf.write("\u0232\u0233\f+\2\2\u0233\u0244\5B\"\2\u0234\u0235\f*")
        buf.write("\2\2\u0235\u0236\7\"\2\2\u0236\u0244\5B\"\2\u0237\u0238")
        buf.write("\f)\2\2\u0238\u0244\7#\2\2\u0239\u023a\f\"\2\2\u023a\u023b")
        buf.write("\5\34\17\2\u023b\u023c\t\t\2\2\u023c\u023d\5L\'\2\u023d")
        buf.write("\u0244\3\2\2\2\u023e\u023f\f\24\2\2\u023f\u0240\7\21\2")
        buf.write("\2\u0240\u0241\5\30\r\2\u0241\u0242\7\u0106\2\2\u0242")
        buf.write("\u0244\3\2\2\2\u0243\u01cb\3\2\2\2\u0243\u01cf\3\2\2\2")
        buf.write("\u0243\u01d2\3\2\2\2\u0243\u01d5\3\2\2\2\u0243\u01d8\3")
        buf.write("\2\2\2\u0243\u01dc\3\2\2\2\u0243\u01e5\3\2\2\2\u0243\u01e8")
        buf.write("\3\2\2\2\u0243\u01eb\3\2\2\2\u0243\u01ee\3\2\2\2\u0243")
        buf.write("\u01f1\3\2\2\2\u0243\u01f7\3\2\2\2\u0243\u01fd\3\2\2\2")
        buf.write("\u0243\u020a\3\2\2\2\u0243\u020c\3\2\2\2\u0243\u0211\3")
        buf.write("\2\2\2\u0243\u0219\3\2\2\2\u0243\u021f\3\2\2\2\u0243\u0225")
        buf.write("\3\2\2\2\u0243\u022b\3\2\2\2\u0243\u022d\3\2\2\2\u0243")
        buf.write("\u0230\3\2\2\2\u0243\u0232\3\2\2\2\u0243\u0234\3\2\2\2")
        buf.write("\u0243\u0237\3\2\2\2\u0243\u0239\3\2\2\2\u0243\u023e\3")
        buf.write("\2\2\2\u0244\u0247\3\2\2\2\u0245\u0243\3\2\2\2\u0245\u0246")
        buf.write("\3\2\2\2\u0246\31\3\2\2\2\u0247\u0245\3\2\2\2\u0248\u0249")
        buf.write("\7\65\2\2\u0249\u025b\b\16\1\2\u024a\u024b\7\66\2\2\u024b")
        buf.write("\u024c\7\u00fe\2\2\u024c\u024d\7\67\2\2\u024d\u025b\b")
        buf.write("\16\1\2\u024e\u024f\78\2\2\u024f\u0250\7\67\2\2\u0250")
        buf.write("\u025b\b\16\1\2\u0251\u0252\79\2\2\u0252\u025b\b\16\1")
        buf.write("\2\u0253\u0254\7(\2\2\u0254\u0255\7\u00fe\2\2\u0255\u0256")
        buf.write("\7:\2\2\u0256\u025b\b\16\1\2\u0257\u0258\7\u00fb\2\2\u0258")
        buf.write("\u0259\7:\2\2\u0259\u025b\b\16\1\2\u025a\u0248\3\2\2\2")
        buf.write("\u025a\u024a\3\2\2\2\u025a\u024e\3\2\2\2\u025a\u0251\3")
        buf.write("\2\2\2\u025a\u0253\3\2\2\2\u025a\u0257\3\2\2\2\u025b\33")
        buf.write("\3\2\2\2\u025c\u025d\7;\2\2\u025d\u0266\b\17\1\2\u025e")
        buf.write("\u025f\7\66\2\2\u025f\u0260\7\u00fe\2\2\u0260\u0261\7")
        buf.write("<\2\2\u0261\u0266\b\17\1\2\u0262\u0263\78\2\2\u0263\u0264")
        buf.write("\7<\2\2\u0264\u0266\b\17\1\2\u0265\u025c\3\2\2\2\u0265")
        buf.write("\u025e\3\2\2\2\u0265\u0262\3\2\2\2\u0266\35\3\2\2\2\u0267")
        buf.write("\u0268\7=\2\2\u0268\u026c\b\20\1\2\u0269\u026a\7>\2\2")
        buf.write("\u026a\u026c\b\20\1\2\u026b\u0267\3\2\2\2\u026b\u0269")
        buf.write("\3\2\2\2\u026c\37\3\2\2\2\u026d\u026e\t\n\2\2\u026e\u026f")
        buf.write("\b\21\1\2\u026f\u027a\b\21\1\2\u0270\u0271\t\13\2\2\u0271")
        buf.write("\u0272\b\21\1\2\u0272\u027a\b\21\1\2\u0273\u0274\t\f\2")
        buf.write("\2\u0274\u0275\b\21\1\2\u0275\u027a\b\21\1\2\u0276\u0277")
        buf.write("\t\r\2\2\u0277\u0278\b\21\1\2\u0278\u027a\b\21\1\2\u0279")
        buf.write("\u026d\3\2\2\2\u0279\u0270\3\2\2\2\u0279\u0273\3\2\2\2")
        buf.write("\u0279\u0276\3\2\2\2\u027a!\3\2\2\2\u027b\u027c\t\16\2")
        buf.write("\2\u027c\u0282\b\22\1\2\u027d\u027e\t\17\2\2\u027e\u0282")
        buf.write("\b\22\1\2\u027f\u0280\7G\2\2\u0280\u0282\b\22\1\2\u0281")
        buf.write("\u027b\3\2\2\2\u0281\u027d\3\2\2\2\u0281\u027f\3\2\2\2")
        buf.write("\u0282#\3\2\2\2\u0283\u0284\6\23\35\3\u0284\u0285\7H\2")
        buf.write("\2\u0285\u0286\b\23\1\2\u0286\u0292\b\23\1\2\u0287\u0288")
        buf.write("\7I\2\2\u0288\u0289\b\23\1\2\u0289\u0292\b\23\1\2\u028a")
        buf.write("\u028b\6\23\36\3\u028b\u028c\t\20\2\2\u028c\u028d\b\23")
        buf.write("\1\2\u028d\u0292\b\23\1\2\u028e\u028f\t\21\2\2\u028f\u0290")
        buf.write("\b\23\1\2\u0290\u0292\b\23\1\2\u0291\u0283\3\2\2\2\u0291")
        buf.write("\u0287\3\2\2\2\u0291\u028a\3\2\2\2\u0291\u028e\3\2\2\2")
        buf.write("\u0292%\3\2\2\2\u0293\u0294\7H\2\2\u0294\u0298\b\24\1")
        buf.write("\2\u0295\u0296\t\20\2\2\u0296\u0298\b\24\1\2\u0297\u0293")
        buf.write("\3\2\2\2\u0297\u0295\3\2\2\2\u0298\'\3\2\2\2\u0299\u029a")
        buf.write("\5*\26\2\u029a)\3\2\2\2\u029b\u029f\5,\27\2\u029c\u02a0")
        buf.write("\5\n\6\2\u029d\u029e\7\u00fa\2\2\u029e\u02a0\5\30\r\2")
        buf.write("\u029f\u029c\3\2\2\2\u029f\u029d\3\2\2\2\u02a0+\3\2\2")
        buf.write("\2\u02a1\u02a3\t\22\2\2\u02a2\u02a4\5R*\2\u02a3\u02a2")
        buf.write("\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02b1\3\2\2\2\u02a5")
        buf.write("\u02ae\7\26\2\2\u02a6\u02ab\5.\30\2\u02a7\u02a8\7\27\2")
        buf.write("\2\u02a8\u02aa\5.\30\2\u02a9\u02a7\3\2\2\2\u02aa\u02ad")
        buf.write("\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac")
        buf.write("\u02af\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae\u02a6\3\2\2\2")
        buf.write("\u02ae\u02af\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\7")
        buf.write("\u0107\2\2\u02b1\u02a5\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2")
        buf.write("\u02b5\3\2\2\2\u02b3\u02b4\7Q\2\2\u02b4\u02b6\5\62\32")
        buf.write("\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02f5")
        buf.write("\3\2\2\2\u02b7\u02c4\7R\2\2\u02b8\u02c1\7\26\2\2\u02b9")
        buf.write("\u02be\5.\30\2\u02ba\u02bb\7\27\2\2\u02bb\u02bd\5.\30")
        buf.write("\2\u02bc\u02ba\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c2\3\2\2\2\u02c0")
        buf.write("\u02be\3\2\2\2\u02c1\u02b9\3\2\2\2\u02c1\u02c2\3\2\2\2")
        buf.write("\u02c2\u02c3\3\2\2\2\u02c3\u02c5\7\u0107\2\2\u02c4\u02b8")
        buf.write("\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6")
        buf.write("\u02c7\7Q\2\2\u02c7\u02c9\5\62\32\2\u02c8\u02c6\3\2\2")
        buf.write("\2\u02c8\u02c9\3\2\2\2\u02c9\u02f5\3\2\2\2\u02ca\u02cc")
        buf.write("\7S\2\2\u02cb\u02cd\5R*\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd")
        buf.write("\3\2\2\2\u02cd\u02f5\3\2\2\2\u02ce\u02d0\t\23\2\2\u02cf")
        buf.write("\u02d1\5R*\2\u02d0\u02cf\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1")
        buf.write("\u02de\3\2\2\2\u02d2\u02db\7\26\2\2\u02d3\u02d8\5.\30")
        buf.write("\2\u02d4\u02d5\7\27\2\2\u02d5\u02d7\5.\30\2\u02d6\u02d4")
        buf.write("\3\2\2\2\u02d7\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d8")
        buf.write("\u02d9\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da\u02d8\3\2\2\2")
        buf.write("\u02db\u02d3\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\3")
        buf.write("\2\2\2\u02dd\u02df\7\u0107\2\2\u02de\u02d2\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e1\7Q\2\2")
        buf.write("\u02e1\u02f5\5\62\32\2\u02e2\u02e4\t\24\2\2\u02e3\u02e5")
        buf.write("\5R*\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02f2")
        buf.write("\3\2\2\2\u02e6\u02ef\7\26\2\2\u02e7\u02ec\5.\30\2\u02e8")
        buf.write("\u02e9\7\27\2\2\u02e9\u02eb\5.\30\2\u02ea\u02e8\3\2\2")
        buf.write("\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed")
        buf.write("\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef")
        buf.write("\u02e7\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2")
        buf.write("\u02f1\u02f3\7\u0107\2\2\u02f2\u02e6\3\2\2\2\u02f2\u02f3")
        buf.write("\3\2\2\2\u02f3\u02f5\3\2\2\2\u02f4\u02a1\3\2\2\2\u02f4")
        buf.write("\u02b7\3\2\2\2\u02f4\u02ca\3\2\2\2\u02f4\u02ce\3\2\2\2")
        buf.write("\u02f4\u02e2\3\2\2\2\u02f5-\3\2\2\2\u02f6\u02f8\t\t\2")
        buf.write("\2\u02f7\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9")
        buf.write("\3\2\2\2\u02f9\u02fa\5\62\32\2\u02fa\u02fb\b\30\1\2\u02fb")
        buf.write("\u030e\3\2\2\2\u02fc\u02fd\5\62\32\2\u02fd\u02fe\b\30")
        buf.write("\1\2\u02fe\u02ff\7\u010a\2\2\u02ff\u0300\b\30\1\2\u0300")
        buf.write("\u030e\3\2\2\2\u0301\u0302\5\62\32\2\u0302\u0303\5R*\2")
        buf.write("\u0303\u0304\b\30\1\2\u0304\u0305\b\30\1\2\u0305\u030e")
        buf.write("\3\2\2\2\u0306\u0307\5R*\2\u0307\u0308\7\u00fa\2\2\u0308")
        buf.write("\u0309\5\62\32\2\u0309\u030a\b\30\1\2\u030a\u030b\b\30")
        buf.write("\1\2\u030b\u030c\b\30\1\2\u030c\u030e\3\2\2\2\u030d\u02f7")
        buf.write("\3\2\2\2\u030d\u02fc\3\2\2\2\u030d\u0301\3\2\2\2\u030d")
        buf.write("\u0306\3\2\2\2\u030e/\3\2\2\2\u030f\u0310\7X\2\2\u0310")
        buf.write("\u0311\7\u0100\2\2\u0311\u0337\b\31\1\2\u0312\u0313\7")
        buf.write("X\2\2\u0313\u0314\7\u00ff\2\2\u0314\u0337\b\31\1\2\u0315")
        buf.write("\u0317\7\u0103\2\2\u0316\u0318\7Y\2\2\u0317\u0316\3\2")
        buf.write("\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u0337")
        buf.write("\b\31\1\2\u031a\u0320\7Z\2\2\u031b\u031d\7[\2\2\u031c")
        buf.write("\u031e\7$\2\2\u031d\u031c\3\2\2\2\u031d\u031e\3\2\2\2")
        buf.write("\u031e\u031f\3\2\2\2\u031f\u0321\7\\\2\2\u0320\u031b\3")
        buf.write("\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0337")
        buf.write("\b\31\1\2\u0323\u0324\7]\2\2\u0324\u0325\7^\2\2\u0325")
        buf.write("\u0337\b\31\1\2\u0326\u0327\7]\2\2\u0327\u0328\7_\2\2")
        buf.write("\u0328\u0337\b\31\1\2\u0329\u032d\7]\2\2\u032a\u032e\7")
        buf.write("`\2\2\u032b\u032c\7a\2\2\u032c\u032e\7b\2\2\u032d\u032a")
        buf.write("\3\2\2\2\u032d\u032b\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\u0337\b\31\1\2\u0330\u0331\7]\2\2\u0331\u0332\7c\2\2")
        buf.write("\u0332\u0337\b\31\1\2\u0333\u0334\7]\2\2\u0334\u0335\7")
        buf.write("d\2\2\u0335\u0337\b\31\1\2\u0336\u030f\3\2\2\2\u0336\u0312")
        buf.write("\3\2\2\2\u0336\u0315\3\2\2\2\u0336\u031a\3\2\2\2\u0336")
        buf.write("\u0323\3\2\2\2\u0336\u0326\3\2\2\2\u0336\u0329\3\2\2\2")
        buf.write("\u0336\u0330\3\2\2\2\u0336\u0333\3\2\2\2\u0337\61\3\2")
        buf.write("\2\2\u0338\u0339\7\u00f8\2\2\u0339\u033a\5\64\33\2\u033a")
        buf.write("\u033b\b\32\1\2\u033b\u0346\3\2\2\2\u033c\u033d\7\26\2")
        buf.write("\2\u033d\u033e\7\u00f8\2\2\u033e\u033f\7\u0107\2\2\u033f")
        buf.write("\u0340\5\64\33\2\u0340\u0341\b\32\1\2\u0341\u0346\3\2")
        buf.write("\2\2\u0342\u0343\5\64\33\2\u0343\u0344\b\32\1\2\u0344")
        buf.write("\u0346\3\2\2\2\u0345\u0338\3\2\2\2\u0345\u033c\3\2\2\2")
        buf.write("\u0345\u0342\3\2\2\2\u0346\63\3\2\2\2\u0347\u0348\7\u0108")
        buf.write("\2\2\u0348\u0349\5\66\34\2\u0349\u034a\b\33\1\2\u034a")
        buf.write("\u0355\3\2\2\2\u034b\u034c\7\26\2\2\u034c\u034d\7\u0108")
        buf.write("\2\2\u034d\u034e\7\u0107\2\2\u034e\u034f\5\66\34\2\u034f")
        buf.write("\u0350\b\33\1\2\u0350\u0355\3\2\2\2\u0351\u0352\5\66\34")
        buf.write("\2\u0352\u0353\b\33\1\2\u0353\u0355\3\2\2\2\u0354\u0347")
        buf.write("\3\2\2\2\u0354\u034b\3\2\2\2\u0354\u0351\3\2\2\2\u0355")
        buf.write("\65\3\2\2\2\u0356\u0357\58\35\2\u0357\u0358\b\34\1\2\u0358")
        buf.write("\u035d\3\2\2\2\u0359\u035a\5:\36\2\u035a\u035b\b\34\1")
        buf.write("\2\u035b\u035d\3\2\2\2\u035c\u0356\3\2\2\2\u035c\u0359")
        buf.write("\3\2\2\2\u035d\67\3\2\2\2\u035e\u035f\5<\37\2\u035f\u0360")
        buf.write("\7)\2\2\u0360\u0361\b\35\1\2\u03619\3\2\2\2\u0362\u0363")
        buf.write("\7\62\2\2\u0363\u0385\b\36\1\2\u0364\u0365\7\36\2\2\u0365")
        buf.write("\u0385\b\36\1\2\u0366\u0367\7Y\2\2\u0367\u0385\b\36\1")
        buf.write("\2\u0368\u0369\7e\2\2\u0369\u0385\b\36\1\2\u036a\u036b")
        buf.write("\7f\2\2\u036b\u0385\b\36\1\2\u036c\u036d\7g\2\2\u036d")
        buf.write("\u0385\b\36\1\2\u036e\u036f\7h\2\2\u036f\u0385\b\36\1")
        buf.write("\2\u0370\u0371\7i\2\2\u0371\u0385\b\36\1\2\u0372\u0373")
        buf.write("\t\6\2\2\u0373\u0385\b\36\1\2\u0374\u0375\7%\2\2\u0375")
        buf.write("\u0385\b\36\1\2\u0376\u0377\7j\2\2\u0377\u0385\b\36\1")
        buf.write("\2\u0378\u0379\7k\2\2\u0379\u037a\7l\2\2\u037a\u0385\b")
        buf.write("\36\1\2\u037b\u037c\7m\2\2\u037c\u037d\7l\2\2\u037d\u0385")
        buf.write("\b\36\1\2\u037e\u037f\5@!\2\u037f\u0380\b\36\1\2\u0380")
        buf.write("\u0385\3\2\2\2\u0381\u0382\5<\37\2\u0382\u0383\b\36\1")
        buf.write("\2\u0383\u0385\3\2\2\2\u0384\u0362\3\2\2\2\u0384\u0364")
        buf.write("\3\2\2\2\u0384\u0366\3\2\2\2\u0384\u0368\3\2\2\2\u0384")
        buf.write("\u036a\3\2\2\2\u0384\u036c\3\2\2\2\u0384\u036e\3\2\2\2")
        buf.write("\u0384\u0370\3\2\2\2\u0384\u0372\3\2\2\2\u0384\u0374\3")
        buf.write("\2\2\2\u0384\u0376\3\2\2\2\u0384\u0378\3\2\2\2\u0384\u037b")
        buf.write("\3\2\2\2\u0384\u037e\3\2\2\2\u0384\u0381\3\2\2\2\u0385")
        buf.write(";\3\2\2\2\u0386\u0387\7n\2\2\u0387\u0395\b\37\1\2\u0388")
        buf.write("\u0389\t\25\2\2\u0389\u0395\b\37\1\2\u038a\u038c\t\26")
        buf.write("\2\2\u038b\u038d\7s\2\2\u038c\u038b\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0395\b\37\1\2\u038f")
        buf.write("\u0390\7t\2\2\u0390\u0395\b\37\1\2\u0391\u0392\5> \2\u0392")
        buf.write("\u0393\b\37\1\2\u0393\u0395\3\2\2\2\u0394\u0386\3\2\2")
        buf.write("\2\u0394\u0388\3\2\2\2\u0394\u038a\3\2\2\2\u0394\u038f")
        buf.write("\3\2\2\2\u0394\u0391\3\2\2\2\u0395=\3\2\2\2\u0396\u0397")
        buf.write("\7u\2\2\u0397\u03a4\b \1\2\u0398\u0399\7v\2\2\u0399\u03a4")
        buf.write("\b \1\2\u039a\u039b\7w\2\2\u039b\u03a4\b \1\2\u039c\u039d")
        buf.write("\7x\2\2\u039d\u03a4\b \1\2\u039e\u039f\7y\2\2\u039f\u03a4")
        buf.write("\b \1\2\u03a0\u03a1\t\26\2\2\u03a1\u03a2\t\27\2\2\u03a2")
        buf.write("\u03a4\b \1\2\u03a3\u0396\3\2\2\2\u03a3\u0398\3\2\2\2")
        buf.write("\u03a3\u039a\3\2\2\2\u03a3\u039c\3\2\2\2\u03a3\u039e\3")
        buf.write("\2\2\2\u03a3\u03a0\3\2\2\2\u03a4?\3\2\2\2\u03a5\u03a6")
        buf.write("\7|\2\2\u03a6\u03d6\b!\1\2\u03a7\u03a9\7}\2\2\u03a8\u03a7")
        buf.write("\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write("\u03ab\7~\2\2\u03ab\u03d6\b!\1\2\u03ac\u03ad\7\177\2\2")
        buf.write("\u03ad\u03d6\b!\1\2\u03ae\u03af\7\u0080\2\2\u03af\u03b5")
        buf.write("\t\30\2\2\u03b0\u03b2\7\u0080\2\2\u03b1\u03b0\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b5\7")
        buf.write("\u0082\2\2\u03b4\u03ae\3\2\2\2\u03b4\u03b1\3\2\2\2\u03b5")
        buf.write("\u03b6\3\2\2\2\u03b6\u03d6\b!\1\2\u03b7\u03b8\7\177\2")
        buf.write("\2\u03b8\u03b9\7|\2\2\u03b9\u03d6\b!\1\2\u03ba\u03bc\7")
        buf.write("\177\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\7\u0083\2\2\u03be\u03d6\b!")
        buf.write("\1\2\u03bf\u03c3\7\u0084\2\2\u03c0\u03c1\7a\2\2\u03c1")
        buf.write("\u03c3\7\u0085\2\2\u03c2\u03bf\3\2\2\2\u03c2\u03c0\3\2")
        buf.write("\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03d6\b!\1\2\u03c5\u03c6")
        buf.write("\7\u0086\2\2\u03c6\u03d6\b!\1\2\u03c7\u03c8\7\u0087\2")
        buf.write("\2\u03c8\u03d6\b!\1\2\u03c9\u03ca\7\u0088\2\2\u03ca\u03cb")
        buf.write("\7\u0089\2\2\u03cb\u03d6\b!\1\2\u03cc\u03cd\7\u0088\2")
        buf.write("\2\u03cd\u03ce\7\u008a\2\2\u03ce\u03d6\b!\1\2\u03cf\u03d0")
        buf.write("\7\u008b\2\2\u03d0\u03d6\b!\1\2\u03d1\u03d2\7k\2\2\u03d2")
        buf.write("\u03d6\b!\1\2\u03d3\u03d4\7m\2\2\u03d4\u03d6\b!\1\2\u03d5")
        buf.write("\u03a5\3\2\2\2\u03d5\u03a8\3\2\2\2\u03d5\u03ac\3\2\2\2")
        buf.write("\u03d5\u03b4\3\2\2\2\u03d5\u03b7\3\2\2\2\u03d5\u03bb\3")
        buf.write("\2\2\2\u03d5\u03c2\3\2\2\2\u03d5\u03c5\3\2\2\2\u03d5\u03c7")
        buf.write("\3\2\2\2\u03d5\u03c9\3\2\2\2\u03d5\u03cc\3\2\2\2\u03d5")
        buf.write("\u03cf\3\2\2\2\u03d5\u03d1\3\2\2\2\u03d5\u03d3\3\2\2\2")
        buf.write("\u03d6A\3\2\2\2\u03d7\u03d8\t\31\2\2\u03d8\u03ee\b\"\1")
        buf.write("\2\u03d9\u03da\t\32\2\2\u03da\u03ee\b\"\1\2\u03db\u03dc")
        buf.write("\t\33\2\2\u03dc\u03ee\b\"\1\2\u03dd\u03de\t\34\2\2\u03de")
        buf.write("\u03ee\b\"\1\2\u03df\u03e0\t\35\2\2\u03e0\u03ee\b\"\1")
        buf.write("\2\u03e1\u03e2\t\36\2\2\u03e2\u03ee\b\"\1\2\u03e3\u03e4")
        buf.write("\t\37\2\2\u03e4\u03ee\b\"\1\2\u03e5\u03e6\t \2\2\u03e6")
        buf.write("\u03ee\b\"\1\2\u03e7\u03e8\t!\2\2\u03e8\u03ee\b\"\1\2")
        buf.write("\u03e9\u03ea\t\"\2\2\u03ea\u03ee\b\"\1\2\u03eb\u03ec\t")
        buf.write("#\2\2\u03ec\u03ee\b\"\1\2\u03ed\u03d7\3\2\2\2\u03ed\u03d9")
        buf.write("\3\2\2\2\u03ed\u03db\3\2\2\2\u03ed\u03dd\3\2\2\2\u03ed")
        buf.write("\u03df\3\2\2\2\u03ed\u03e1\3\2\2\2\u03ed\u03e3\3\2\2\2")
        buf.write("\u03ed\u03e5\3\2\2\2\u03ed\u03e7\3\2\2\2\u03ed\u03e9\3")
        buf.write("\2\2\2\u03ed\u03eb\3\2\2\2\u03eeC\3\2\2\2\u03ef\u03f0")
        buf.write("\7\177\2\2\u03f0\u0405\b#\1\2\u03f1\u03f5\7\u0084\2\2")
        buf.write("\u03f2\u03f3\7a\2\2\u03f3\u03f5\7\u0085\2\2\u03f4\u03f1")
        buf.write("\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6")
        buf.write("\u0405\b#\1\2\u03f7\u03f8\7\u0086\2\2\u03f8\u0405\b#\1")
        buf.write("\2\u03f9\u03fa\7\u0087\2\2\u03fa\u0405\b#\1\2\u03fb\u03fc")
        buf.write("\7\u0080\2\2\u03fc\u0402\t\30\2\2\u03fd\u03ff\7\u0080")
        buf.write("\2\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400")
        buf.write("\3\2\2\2\u0400\u0402\7\u0082\2\2\u0401\u03fb\3\2\2\2\u0401")
        buf.write("\u03fe\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0405\b#\1\2")
        buf.write("\u0404\u03ef\3\2\2\2\u0404\u03f4\3\2\2\2\u0404\u03f7\3")
        buf.write("\2\2\2\u0404\u03f9\3\2\2\2\u0404\u0401\3\2\2\2\u0405E")
        buf.write("\3\2\2\2\u0406\u0407\t$\2\2\u0407G\3\2\2\2\u0408\u0409")
        buf.write("\t%\2\2\u0409I\3\2\2\2\u040a\u040d\5F$\2\u040b\u040d\5")
        buf.write("H%\2\u040c\u040a\3\2\2\2\u040c\u040b\3\2\2\2\u040dK\3")
        buf.write("\2\2\2\u040e\u040f\7\23\2\2\u040f\u046e\7|\2\2\u0410\u0411")
        buf.write("\7\u00b5\2\2\u0411\u046e\t&\2\2\u0412\u0413\7\u00b8\2")
        buf.write("\2\u0413\u046e\t&\2\2\u0414\u0415\7\23\2\2\u0415\u046e")
        buf.write("\t\6\2\2\u0416\u0417\7\u00b9\2\2\u0417\u046e\7\u00ba\2")
        buf.write("\2\u0418\u0419\7\u00bb\2\2\u0419\u046e\7\u00bc\2\2\u041a")
        buf.write("\u041b\7\u00bd\2\2\u041b\u046e\7\u00bc\2\2\u041c\u041d")
        buf.write("\7~\2\2\u041d\u046e\t\26\2\2\u041e\u041f\7\u00be\2\2\u041f")
        buf.write("\u046e\t\26\2\2\u0420\u0421\7\u0088\2\2\u0421\u046e\7")
        buf.write("\u0089\2\2\u0422\u0423\5J&\2\u0423\u0424\7y\2\2\u0424")
        buf.write("\u046e\3\2\2\2\u0425\u0426\5J&\2\u0426\u0427\t\'\2\2\u0427")
        buf.write("\u046e\3\2\2\2\u0428\u042a\7\u0088\2\2\u0429\u0428\3\2")
        buf.write("\2\2\u0429\u042a\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u046e")
        buf.write("\7\u008a\2\2\u042c\u042d\7a\2\2\u042d\u046e\7\u0085\2")
        buf.write("\2\u042e\u042f\7\u00bf\2\2\u042f\u046e\7\u00c0\2\2\u0430")
        buf.write("\u0431\t(\2\2\u0431\u046e\7\u00c2\2\2\u0432\u0433\t(\2")
        buf.write("\2\u0433\u046e\7\u00c3\2\2\u0434\u0436\7\u00c4\2\2\u0435")
        buf.write("\u0437\7\u00c5\2\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2")
        buf.write("\2\2\u0437\u046e\3\2\2\2\u0438\u043a\7\u00c6\2\2\u0439")
        buf.write("\u043b\7\u00c5\2\2\u043a\u0439\3\2\2\2\u043a\u043b\3\2")
        buf.write("\2\2\u043b\u046e\3\2\2\2\u043c\u043e\5J&\2\u043d\u043f")
        buf.write("\7\u00c5\2\2\u043e\u043d\3\2\2\2\u043e\u043f\3\2\2\2\u043f")
        buf.write("\u046e\3\2\2\2\u0440\u0442\7\u00c7\2\2\u0441\u0440\3\2")
        buf.write("\2\2\u0441\u0442\3\2\2\2\u0442\u0446\3\2\2\2\u0443\u0446")
        buf.write("\7\u00c8\2\2\u0444\u0446\7\u00c9\2\2\u0445\u0441\3\2\2")
        buf.write("\2\u0445\u0443\3\2\2\2\u0445\u0444\3\2\2\2\u0446\u0447")
        buf.write("\3\2\2\2\u0447\u046e\7\u00ca\2\2\u0448\u0449\t)\2\2\u0449")
        buf.write("\u046e\t*\2\2\u044a\u044b\7\u00cf\2\2\u044b\u046e\t+\2")
        buf.write("\2\u044c\u044e\7\u00d2\2\2\u044d\u044c\3\2\2\2\u044d\u044e")
        buf.write("\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\7\u00d3\2\2\u0450")
        buf.write("\u046e\t,\2\2\u0451\u0452\7\u0080\2\2\u0452\u046e\t\30")
        buf.write("\2\2\u0453\u046e\5V,\2\u0454\u046e\7\62\2\2\u0455\u046e")
        buf.write("\7|\2\2\u0456\u046e\7\177\2\2\u0457\u046e\7x\2\2\u0458")
        buf.write("\u046e\7%\2\2\u0459\u046e\7\u0084\2\2\u045a\u046e\7\u0086")
        buf.write("\2\2\u045b\u046e\7\u0087\2\2\u045c\u046e\7Y\2\2\u045d")
        buf.write("\u046e\7\u008b\2\2\u045e\u046e\7\u00ba\2\2\u045f\u046e")
        buf.write("\7m\2\2\u0460\u046e\7t\2\2\u0461\u046e\7r\2\2\u0462\u046e")
        buf.write("\7q\2\2\u0463\u046e\7\u0083\2\2\u0464\u046e\7 \2\2\u0465")
        buf.write("\u046e\7!\2\2\u0466\u046e\7H\2\2\u0467\u046e\7J\2\2\u0468")
        buf.write("\u046e\7K\2\2\u0469\u046e\7y\2\2\u046a\u046e\7\u008a\2")
        buf.write("\2\u046b\u046e\7\u00c5\2\2\u046c\u046e\7\u0109\2\2\u046d")
        buf.write("\u040e\3\2\2\2\u046d\u0410\3\2\2\2\u046d\u0412\3\2\2\2")
        buf.write("\u046d\u0414\3\2\2\2\u046d\u0416\3\2\2\2\u046d\u0418\3")
        buf.write("\2\2\2\u046d\u041a\3\2\2\2\u046d\u041c\3\2\2\2\u046d\u041e")
        buf.write("\3\2\2\2\u046d\u0420\3\2\2\2\u046d\u0422\3\2\2\2\u046d")
        buf.write("\u0425\3\2\2\2\u046d\u0429\3\2\2\2\u046d\u042c\3\2\2\2")
        buf.write("\u046d\u042e\3\2\2\2\u046d\u0430\3\2\2\2\u046d\u0432\3")
        buf.write("\2\2\2\u046d\u0434\3\2\2\2\u046d\u0438\3\2\2\2\u046d\u043c")
        buf.write("\3\2\2\2\u046d\u0445\3\2\2\2\u046d\u0448\3\2\2\2\u046d")
        buf.write("\u044a\3\2\2\2\u046d\u044d\3\2\2\2\u046d\u0451\3\2\2\2")
        buf.write("\u046d\u0453\3\2\2\2\u046d\u0454\3\2\2\2\u046d\u0455\3")
        buf.write("\2\2\2\u046d\u0456\3\2\2\2\u046d\u0457\3\2\2\2\u046d\u0458")
        buf.write("\3\2\2\2\u046d\u0459\3\2\2\2\u046d\u045a\3\2\2\2\u046d")
        buf.write("\u045b\3\2\2\2\u046d\u045c\3\2\2\2\u046d\u045d\3\2\2\2")
        buf.write("\u046d\u045e\3\2\2\2\u046d\u045f\3\2\2\2\u046d\u0460\3")
        buf.write("\2\2\2\u046d\u0461\3\2\2\2\u046d\u0462\3\2\2\2\u046d\u0463")
        buf.write("\3\2\2\2\u046d\u0464\3\2\2\2\u046d\u0465\3\2\2\2\u046d")
        buf.write("\u0466\3\2\2\2\u046d\u0467\3\2\2\2\u046d\u0468\3\2\2\2")
        buf.write("\u046d\u0469\3\2\2\2\u046d\u046a\3\2\2\2\u046d\u046b\3")
        buf.write("\2\2\2\u046d\u046c\3\2\2\2\u046eM\3\2\2\2\u046f\u0470")
        buf.write("\7\u00d6\2\2\u0470\u047c\b(\1\2\u0471\u0472\7\u00d7\2")
        buf.write("\2\u0472\u047c\b(\1\2\u0473\u0474\7\u00d8\2\2\u0474\u047c")
        buf.write("\b(\1\2\u0475\u0476\7\u00d9\2\2\u0476\u047c\b(\1\2\u0477")
        buf.write("\u0478\7\u00da\2\2\u0478\u047c\b(\1\2\u0479\u047a\7\u00db")
        buf.write("\2\2\u047a\u047c\b(\1\2\u047b\u046f\3\2\2\2\u047b\u0471")
        buf.write("\3\2\2\2\u047b\u0473\3\2\2\2\u047b\u0475\3\2\2\2\u047b")
        buf.write("\u0477\3\2\2\2\u047b\u0479\3\2\2\2\u047cO\3\2\2\2\u047d")
        buf.write("\u047e\t-\2\2\u047e\u0482\b)\1\2\u047f\u0480\t.\2\2\u0480")
        buf.write("\u0482\b)\1\2\u0481\u047d\3\2\2\2\u0481\u047f\3\2\2\2")
        buf.write("\u0482Q\3\2\2\2\u0483\u0484\5T+\2\u0484\u0485\b*\1\2\u0485")
        buf.write("\u048c\3\2\2\2\u0486\u0487\7\u0109\2\2\u0487\u048c\b*")
        buf.write("\1\2\u0488\u0489\5V,\2\u0489\u048a\b*\1\2\u048a\u048c")
        buf.write("\3\2\2\2\u048b\u0483\3\2\2\2\u048b\u0486\3\2\2\2\u048b")
        buf.write("\u0488\3\2\2\2\u048cS\3\2\2\2\u048d\u048f\7\u0100\2\2")
        buf.write("\u048e\u0490\7$\2\2\u048f\u048e\3\2\2\2\u048f\u0490\3")
        buf.write("\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492\7\\\2\2\u0492\u04e0")
        buf.write("\b+\1\2\u0493\u0495\7$\2\2\u0494\u0493\3\2\2\2\u0494\u0495")
        buf.write("\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0497\7\u00f9\2\2\u0497")
        buf.write("\u0498\7%\2\2\u0498\u04e0\b+\1\2\u0499\u049b\7$\2\2\u049a")
        buf.write("\u0499\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2")
        buf.write("\u049c\u049d\7\u00f9\2\2\u049d\u049e\7x\2\2\u049e\u04e0")
        buf.write("\b+\1\2\u049f\u04a0\7$\2\2\u04a0\u04a1\7\\\2\2\u04a1\u04e0")
        buf.write("\b+\1\2\u04a2\u04a4\7$\2\2\u04a3\u04a2\3\2\2\2\u04a3\u04a4")
        buf.write("\3\2\2\2\u04a4\u04a6\3\2\2\2\u04a5\u04a7\7\u00c6\2\2\u04a6")
        buf.write("\u04a5\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\3\2\2\2")
        buf.write("\u04a8\u04a9\7\u00e8\2\2\u04a9\u04aa\7|\2\2\u04aa\u04e0")
        buf.write("\b+\1\2\u04ab\u04ad\7$\2\2\u04ac\u04ab\3\2\2\2\u04ac\u04ad")
        buf.write("\3\2\2\2\u04ad\u04af\3\2\2\2\u04ae\u04b0\7\u00c6\2\2\u04af")
        buf.write("\u04ae\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b1\3\2\2\2")
        buf.write("\u04b1\u04b2\7\u00e8\2\2\u04b2\u04b3\7\62\2\2\u04b3\u04e0")
        buf.write("\b+\1\2\u04b4\u04b6\7\u00e9\2\2\u04b5\u04b7\7\35\2\2\u04b6")
        buf.write("\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8\3\2\2\2")
        buf.write("\u04b8\u04b9\7\62\2\2\u04b9\u04e0\b+\1\2\u04ba\u04bb\7")
        buf.write("\u00ea\2\2\u04bb\u04bc\7\177\2\2\u04bc\u04e0\b+\1\2\u04bd")
        buf.write("\u04be\7\u00eb\2\2\u04be\u04bf\7\f\2\2\u04bf\u04e0\b+")
        buf.write("\1\2\u04c0\u04c1\7\u00eb\2\2\u04c1\u04c2\7\u00ec\2\2\u04c2")
        buf.write("\u04e0\b+\1\2\u04c3\u04c4\7\u00ed\2\2\u04c4\u04c5\7\r")
        buf.write("\2\2\u04c5\u04c6\7\u00e9\2\2\u04c6\u04e0\b+\1\2\u04c7")
        buf.write("\u04cd\7\u00ee\2\2\u04c8\u04ca\7\35\2\2\u04c9\u04c8\3")
        buf.write("\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04ce")
        buf.write("\7l\2\2\u04cc\u04ce\7\u00ef\2\2\u04cd\u04c9\3\2\2\2\u04cd")
        buf.write("\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04e0\b+\1\2")
        buf.write("\u04d0\u04d1\7\u00be\2\2\u04d1\u04d2\7u\2\2\u04d2\u04e0")
        buf.write("\b+\1\2\u04d3\u04d4\7u\2\2\u04d4\u04d5\7\u00f0\2\2\u04d5")
        buf.write("\u04e0\b+\1\2\u04d6\u04d8\7\u00f1\2\2\u04d7\u04d9\7\r")
        buf.write("\2\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04db")
        buf.write("\3\2\2\2\u04da\u04dc\7\u00d2\2\2\u04db\u04da\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04de\7\u00d3")
        buf.write("\2\2\u04de\u04e0\b+\1\2\u04df\u048d\3\2\2\2\u04df\u0494")
        buf.write("\3\2\2\2\u04df\u049a\3\2\2\2\u04df\u049f\3\2\2\2\u04df")
        buf.write("\u04a3\3\2\2\2\u04df\u04ac\3\2\2\2\u04df\u04b4\3\2\2\2")
        buf.write("\u04df\u04ba\3\2\2\2\u04df\u04bd\3\2\2\2\u04df\u04c0\3")
        buf.write("\2\2\2\u04df\u04c3\3\2\2\2\u04df\u04c7\3\2\2\2\u04df\u04d0")
        buf.write("\3\2\2\2\u04df\u04d3\3\2\2\2\u04df\u04d6\3\2\2\2\u04e0")
        buf.write("U\3\2\2\2\u04e1\u0531\7\u008c\2\2\u04e2\u0531\7\u0091")
        buf.write("\2\2\u04e3\u0531\7\u00b8\2\2\u04e4\u0531\7\u00b5\2\2\u04e5")
        buf.write("\u0531\7\35\2\2\u04e6\u0531\7\31\2\2\u04e7\u0531\7\u00bf")
        buf.write("\2\2\u04e8\u0531\7\u0100\2\2\u04e9\u0531\7\u00ff\2\2\u04ea")
        buf.write("\u0531\7\"\2\2\u04eb\u0531\7\u0096\2\2\u04ec\u0531\7\u00b3")
        buf.write("\2\2\u04ed\u0531\7\u00b2\2\2\u04ee\u0531\7\u00b4\2\2\u04ef")
        buf.write("\u0531\7z\2\2\u04f0\u0531\7{\2\2\u04f1\u0531\7f\2\2\u04f2")
        buf.write("\u0531\7s\2\2\u04f3\u0531\7\u00f2\2\2\u04f4\u0531\7\u00f3")
        buf.write("\2\2\u04f5\u0531\7\u00e9\2\2\u04f6\u0531\7\u00ea\2\2\u04f7")
        buf.write("\u0531\7]\2\2\u04f8\u0531\7_\2\2\u04f9\u0531\7^\2\2\u04fa")
        buf.write("\u0531\7`\2\2\u04fb\u0531\7c\2\2\u04fc\u0531\7d\2\2\u04fd")
        buf.write("\u0531\7:\2\2\u04fe\u0531\7\u00c6\2\2\u04ff\u0531\7\u00e8")
        buf.write("\2\2\u0500\u0531\7\u0081\2\2\u0501\u0531\7\u00eb\2\2\u0502")
        buf.write("\u0531\7\f\2\2\u0503\u0531\7\u00ec\2\2\u0504\u0531\7a")
        buf.write("\2\2\u0505\u0531\7\u0085\2\2\u0506\u0531\7b\2\2\u0507")
        buf.write("\u0531\7\u00bb\2\2\u0508\u0531\7\u00bd\2\2\u0509\u0531")
        buf.write("\7\u00bc\2\2\u050a\u0531\7\u00ed\2\2\u050b\u0531\7\r\2")
        buf.write("\2\u050c\u0531\7\u00e9\2\2\u050d\u0531\7\u00c0\2\2\u050e")
        buf.write("\u0531\7\u00c1\2\2\u050f\u0531\7\u00c2\2\2\u0510\u0531")
        buf.write("\7\u00c3\2\2\u0511\u0531\7l\2\2\u0512\u0531\7~\2\2\u0513")
        buf.write("\u0531\7\u00c4\2\2\u0514\u0531\7\u00c6\2\2\u0515\u0531")
        buf.write("\7\u00c5\2\2\u0516\u0531\7\u00be\2\2\u0517\u0531\7\u00f0")
        buf.write("\2\2\u0518\u0531\7\23\2\2\u0519\u0531\7\u00b6\2\2\u051a")
        buf.write("\u0531\7\u00b7\2\2\u051b\u0531\7\u008a\2\2\u051c\u0531")
        buf.write("\5J&\2\u051d\u0531\7\u00c7\2\2\u051e\u0531\7\u00c8\2\2")
        buf.write("\u051f\u0531\7\u00c9\2\2\u0520\u0531\7\u00ca\2\2\u0521")
        buf.write("\u0531\7\u00cb\2\2\u0522\u0531\7\u00cc\2\2\u0523\u0531")
        buf.write("\7\u00cd\2\2\u0524\u0531\7\u00ce\2\2\u0525\u0531\7\u00cf")
        buf.write("\2\2\u0526\u0531\7 \2\2\u0527\u0531\7\u00d0\2\2\u0528")
        buf.write("\u0531\7\u00d1\2\2\u0529\u0531\7\u00d2\2\2\u052a\u0531")
        buf.write("\7\u00d3\2\2\u052b\u0531\7\u00d4\2\2\u052c\u0531\7\u00d5")
        buf.write("\2\2\u052d\u0531\7*\2\2\u052e\u0531\7\32\2\2\u052f\u0531")
        buf.write("\7)\2\2\u0530\u04e1\3\2\2\2\u0530\u04e2\3\2\2\2\u0530")
        buf.write("\u04e3\3\2\2\2\u0530\u04e4\3\2\2\2\u0530\u04e5\3\2\2\2")
        buf.write("\u0530\u04e6\3\2\2\2\u0530\u04e7\3\2\2\2\u0530\u04e8\3")
        buf.write("\2\2\2\u0530\u04e9\3\2\2\2\u0530\u04ea\3\2\2\2\u0530\u04eb")
        buf.write("\3\2\2\2\u0530\u04ec\3\2\2\2\u0530\u04ed\3\2\2\2\u0530")
        buf.write("\u04ee\3\2\2\2\u0530\u04ef\3\2\2\2\u0530\u04f0\3\2\2\2")
        buf.write("\u0530\u04f1\3\2\2\2\u0530\u04f2\3\2\2\2\u0530\u04f3\3")
        buf.write("\2\2\2\u0530\u04f4\3\2\2\2\u0530\u04f5\3\2\2\2\u0530\u04f6")
        buf.write("\3\2\2\2\u0530\u04f7\3\2\2\2\u0530\u04f8\3\2\2\2\u0530")
        buf.write("\u04f9\3\2\2\2\u0530\u04fa\3\2\2\2\u0530\u04fb\3\2\2\2")
        buf.write("\u0530\u04fc\3\2\2\2\u0530\u04fd\3\2\2\2\u0530\u04fe\3")
        buf.write("\2\2\2\u0530\u04ff\3\2\2\2\u0530\u0500\3\2\2\2\u0530\u0501")
        buf.write("\3\2\2\2\u0530\u0502\3\2\2\2\u0530\u0503\3\2\2\2\u0530")
        buf.write("\u0504\3\2\2\2\u0530\u0505\3\2\2\2\u0530\u0506\3\2\2\2")
        buf.write("\u0530\u0507\3\2\2\2\u0530\u0508\3\2\2\2\u0530\u0509\3")
        buf.write("\2\2\2\u0530\u050a\3\2\2\2\u0530\u050b\3\2\2\2\u0530\u050c")
        buf.write("\3\2\2\2\u0530\u050d\3\2\2\2\u0530\u050e\3\2\2\2\u0530")
        buf.write("\u050f\3\2\2\2\u0530\u0510\3\2\2\2\u0530\u0511\3\2\2\2")
        buf.write("\u0530\u0512\3\2\2\2\u0530\u0513\3\2\2\2\u0530\u0514\3")
        buf.write("\2\2\2\u0530\u0515\3\2\2\2\u0530\u0516\3\2\2\2\u0530\u0517")
        buf.write("\3\2\2\2\u0530\u0518\3\2\2\2\u0530\u0519\3\2\2\2\u0530")
        buf.write("\u051a\3\2\2\2\u0530\u051b\3\2\2\2\u0530\u051c\3\2\2\2")
        buf.write("\u0530\u051d\3\2\2\2\u0530\u051e\3\2\2\2\u0530\u051f\3")
        buf.write("\2\2\2\u0530\u0520\3\2\2\2\u0530\u0521\3\2\2\2\u0530\u0522")
        buf.write("\3\2\2\2\u0530\u0523\3\2\2\2\u0530\u0524\3\2\2\2\u0530")
        buf.write("\u0525\3\2\2\2\u0530\u0526\3\2\2\2\u0530\u0527\3\2\2\2")
        buf.write("\u0530\u0528\3\2\2\2\u0530\u0529\3\2\2\2\u0530\u052a\3")
        buf.write("\2\2\2\u0530\u052b\3\2\2\2\u0530\u052c\3\2\2\2\u0530\u052d")
        buf.write("\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u052f\3\2\2\2\u0531")
        buf.write("W\3\2\2\2\u0532\u0533\7\u010c\2\2\u0533Y\3\2\2\2\u0534")
        buf.write("\u0535\7\23\2\2\u0535\u0536\7|\2\2\u0536\u0576\b.\1\2")
        buf.write("\u0537\u0538\7\u00b5\2\2\u0538\u0539\t&\2\2\u0539\u0576")
        buf.write("\b.\1\2\u053a\u053b\7\u00b8\2\2\u053b\u053c\t&\2\2\u053c")
        buf.write("\u0576\b.\1\2\u053d\u053e\7\23\2\2\u053e\u053f\t\6\2\2")
        buf.write("\u053f\u0576\b.\1\2\u0540\u0541\7\u00b9\2\2\u0541\u0542")
        buf.write("\7\u00ba\2\2\u0542\u0576\b.\1\2\u0543\u0544\7\u00bb\2")
        buf.write("\2\u0544\u0545\7\u00bc\2\2\u0545\u0576\b.\1\2\u0546\u0547")
        buf.write("\7\u00bd\2\2\u0547\u0548\7\u00bc\2\2\u0548\u0576\b.\1")
        buf.write("\2\u0549\u054a\7~\2\2\u054a\u054b\t\26\2\2\u054b\u0576")
        buf.write("\b.\1\2\u054c\u054d\7\u00be\2\2\u054d\u054e\t\26\2\2\u054e")
        buf.write("\u0576\b.\1\2\u054f\u0550\7\u0088\2\2\u0550\u0551\7\u0089")
        buf.write("\2\2\u0551\u0576\b.\1\2\u0552\u0553\t$\2\2\u0553\u0554")
        buf.write("\7y\2\2\u0554\u0576\b.\1\2\u0555\u0556\t%\2\2\u0556\u0557")
        buf.write("\7y\2\2\u0557\u0576\b.\1\2\u0558\u0559\t$\2\2\u0559\u055a")
        buf.write("\t\'\2\2\u055a\u0576\b.\1\2\u055b\u055c\t%\2\2\u055c\u055d")
        buf.write("\t\'\2\2\u055d\u0576\b.\1\2\u055e\u055f\7\u0088\2\2\u055f")
        buf.write("\u0560\7\u008a\2\2\u0560\u0576\b.\1\2\u0561\u0562\7a\2")
        buf.write("\2\u0562\u0563\7\u0085\2\2\u0563\u0576\b.\1\2\u0564\u0565")
        buf.write("\7\u00bf\2\2\u0565\u0566\7\u00c0\2\2\u0566\u0576\b.\1")
        buf.write("\2\u0567\u0568\t(\2\2\u0568\u0569\7\u00c2\2\2\u0569\u0576")
        buf.write("\b.\1\2\u056a\u056b\t(\2\2\u056b\u056c\7\u00c3\2\2\u056c")
        buf.write("\u0576\b.\1\2\u056d\u056e\7\u00c4\2\2\u056e\u056f\7\u00c5")
        buf.write("\2\2\u056f\u0576\b.\1\2\u0570\u0571\7\u00c6\2\2\u0571")
        buf.write("\u0572\7\u00c5\2\2\u0572\u0576\b.\1\2\u0573\u0574\t/\2")
        buf.write("\2\u0574\u0576\b.\1\2\u0575\u0534\3\2\2\2\u0575\u0537")
        buf.write("\3\2\2\2\u0575\u053a\3\2\2\2\u0575\u053d\3\2\2\2\u0575")
        buf.write("\u0540\3\2\2\2\u0575\u0543\3\2\2\2\u0575\u0546\3\2\2\2")
        buf.write("\u0575\u0549\3\2\2\2\u0575\u054c\3\2\2\2\u0575\u054f\3")
        buf.write("\2\2\2\u0575\u0552\3\2\2\2\u0575\u0555\3\2\2\2\u0575\u0558")
        buf.write("\3\2\2\2\u0575\u055b\3\2\2\2\u0575\u055e\3\2\2\2\u0575")
        buf.write("\u0561\3\2\2\2\u0575\u0564\3\2\2\2\u0575\u0567\3\2\2\2")
        buf.write("\u0575\u056a\3\2\2\2\u0575\u056d\3\2\2\2\u0575\u0570\3")
        buf.write("\2\2\2\u0575\u0573\3\2\2\2\u0576[\3\2\2\2\u0085_luz}\u0088")
        buf.write("\u00a8\u00ae\u00b3\u00c3\u00c8\u00d5\u00db\u00e3\u00e7")
        buf.write("\u00fc\u0105\u0107\u0111\u0118\u011b\u0121\u0129\u012f")
        buf.write("\u0135\u0149\u0150\u0154\u0157\u015b\u0161\u016a\u0173")
        buf.write("\u0177\u0180\u018d\u0192\u0199\u01a0\u01a3\u01ab\u01b4")
        buf.write("\u01c9\u01df\u01e2\u0204\u0207\u0214\u021d\u0222\u0243")
        buf.write("\u0245\u025a\u0265\u026b\u0279\u0281\u0291\u0297\u029f")
        buf.write("\u02a3\u02ab\u02ae\u02b1\u02b5\u02be\u02c1\u02c4\u02c8")
        buf.write("\u02cc\u02d0\u02d8\u02db\u02de\u02e4\u02ec\u02ef\u02f2")
        buf.write("\u02f4\u02f7\u030d\u0317\u031d\u0320\u032d\u0336\u0345")
        buf.write("\u0354\u035c\u0384\u038c\u0394\u03a3\u03a8\u03b1\u03b4")
        buf.write("\u03bb\u03c2\u03d5\u03ed\u03f4\u03fe\u0401\u0404\u040c")
        buf.write("\u0429\u0436\u043a\u043e\u0441\u0445\u044d\u046d\u047b")
        buf.write("\u0481\u048b\u048f\u0494\u049a\u04a3\u04a6\u04ac\u04af")
        buf.write("\u04b6\u04c9\u04cd\u04d8\u04db\u04df\u0530\u0575")
        return buf.getvalue()


class DMFParser ( Parser ):

    grammarFileName = "DMF.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'{'", "'}'", "'[['", 
                     "']]'", "'times'", "'for'", "'with'", "'in'", "'to'", 
                     "'by'", "'down'", "'up'", "'['", "'repeat'", "'exit'", 
                     "'loop'", "'return'", "'('", "','", "'#'", "'an'", 
                     "'empty'", "'magnitude'", "'as'", "'a'", "'string'", 
                     "'turned'", "'dir'", "'direction'", "'per'", "'C'", 
                     "'the'", "'reagent'", "'named'", "'of'", "'is'", "'sample'", 
                     "'containing'", "'and'", "'or'", "'pause'", "'wait'", 
                     "'user'", "'prompt'", "'print'", "'drop'", "'@'", "'at'", 
                     "'exists'", "'does'", "'exist'", "'doesn't'", "'is missing'", 
                     "'missing'", "'has'", "'have'", "'unknown'", "'waste'", 
                     "'north'", "'south'", "'left'", "'west'", "'right'", 
                     "'east'", "'clockwise'", "'counterclockwise'", "'around'", 
                     "'row'", "'rows'", "'col'", "'column'", "'cols'", "'columns'", 
                     "'macro'", "'define'", "'def'", "'->'", "'lambda'", 
                     "'action'", "'function'", "'func'", "'procedure'", 
                     "'proc'", "'turn'", "'state'", "'remove'", "'from'", 
                     "'board'", "'reset'", "'pads'", "'magnets'", "'heaters'", 
                     "'heating'", "'zones'", "'chillers'", "'all'", "'binary'", 
                     "'delta'", "'motion'", "'delay'", "'bool'", "'liquid'", 
                     "'sensor'", "'reading'", "'eselog'", "'int'", "'float'", 
                     "'real'", "'temp'", "'temperature'", "'point'", "'timestamp'", 
                     "'time'", "'frequency'", "'ticks'", "'volume'", "'voltage'", 
                     "'diff'", "'difference'", "'pad'", "'pipetting'", "'target'", 
                     "'well'", "'extraction'", "'port'", "'hole'", "'gate'", 
                     "'heater'", "'zone'", "'chiller'", "'magnet'", "'power'", 
                     "'supply'", "'mode'", "'fan'", "'s'", "'sec'", "'secs'", 
                     "'second'", "'seconds'", "'ms'", "'millisecond'", "'milliseconds'", 
                     "'minute'", "'minutes'", "'min'", "'mins'", "'hour'", 
                     "'hours'", "'hr'", "'hrs'", "'uL'", "'ul'", "'microliter'", 
                     "'microlitre'", "'microliters'", "'microlitres'", "'mL'", 
                     "'ml'", "'milliliter'", "'millilitre'", "'milliliters'", 
                     "'millilitres'", "'tick'", "'drops'", "'V'", "'volt'", 
                     "'volts'", "'mV'", "'millivolt'", "'millivolts'", "'Hz'", 
                     "'hz'", "'minimum'", "'max'", "'maximum'", "'y'", "'coord'", 
                     "'coordinate'", "'x'", "'remaining'", "'capacity'", 
                     "'fill'", "'level'", "'refill'", "'current'", "'n'", 
                     "'samples'", "'sampling'", "'rate'", "'interval'", 
                     "'first'", "'value'", "'last'", "'arithmetic'", "'harmonic'", 
                     "'geometric'", "'mean'", "'std'", "'standard'", "'dev'", 
                     "'deviation'", "'log'", "'directory'", "'folder'", 
                     "'csv'", "'file'", "'name'", "'template'", "'=='", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'True'", "'true'", 
                     "'TRUE'", "'Yes'", "'yes'", "'YES'", "'False'", "'false'", 
                     "'FALSE'", "'No'", "'no'", "'NO'", "'clicked'", "'dispense'", 
                     "'enter'", "'transfer'", "'out'", "'prepare'", "'take'", 
                     "'readings'", "'now'", "'write'", "'index'", "'base'", 
                     "'+'", "'='", "<INVALID>", "'/'", "'future'", "'interactive'", 
                     "':'", "'isn't'", "'local'", "'*'", "'not'", "'off'", 
                     "'on'", "'-'", "';'", "'toggle'", "'until'", "'while'", 
                     "']'", "')'", "'maybe'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ADD", "ASSIGN", "ATTR", 
                      "DIV", "FUTURE", "INTERACTIVE", "INJECT", "ISNT", 
                      "LOCAL", "MUL", "NOT", "OFF", "ON", "SUB", "TERMINATOR", 
                      "TOGGLE", "UNTIL", "WHILE", "CLOSE_BRACKET", "CLOSE_PAREN", 
                      "MAYBE", "ID", "INT", "FLOAT", "STRING", "EOL_COMMENT", 
                      "COMMENT", "WS" ]

    RULE_macro_file = 0
    RULE_interactive = 1
    RULE_declaration = 2
    RULE_stat = 3
    RULE_compound = 4
    RULE_loop_header = 5
    RULE_step_first_and_dir = 6
    RULE_loop = 7
    RULE_exit = 8
    RULE_ret = 9
    RULE_term_punct = 10
    RULE_expr = 11
    RULE_existence = 12
    RULE_possession = 13
    RULE_reagent = 14
    RULE_direction = 15
    RULE_turn = 16
    RULE_rc = 17
    RULE_axis = 18
    RULE_macro_declaration = 19
    RULE_macro_def = 20
    RULE_macro_header = 21
    RULE_param = 22
    RULE_no_arg_action = 23
    RULE_value_type = 24
    RULE_not_future_type = 25
    RULE_not_maybe_type = 26
    RULE_sample_type = 27
    RULE_atomic_type = 28
    RULE_sampleable_type = 29
    RULE_quantity_type = 30
    RULE_component_type = 31
    RULE_dim_unit = 32
    RULE_numbered_type = 33
    RULE_minimum = 34
    RULE_maximum = 35
    RULE_min_max = 36
    RULE_attr = 37
    RULE_rel = 38
    RULE_bool_val = 39
    RULE_name = 40
    RULE_multi_word_name = 41
    RULE_kwd_names = 42
    RULE_string = 43
    RULE_old_attr = 44

    ruleNames =  [ "macro_file", "interactive", "declaration", "stat", "compound", 
                   "loop_header", "step_first_and_dir", "loop", "exit", 
                   "ret", "term_punct", "expr", "existence", "possession", 
                   "reagent", "direction", "turn", "rc", "axis", "macro_declaration", 
                   "macro_def", "macro_header", "param", "no_arg_action", 
                   "value_type", "not_future_type", "not_maybe_type", "sample_type", 
                   "atomic_type", "sampleable_type", "quantity_type", "component_type", 
                   "dim_unit", "numbered_type", "minimum", "maximum", "min_max", 
                   "attr", "rel", "bool_val", "name", "multi_word_name", 
                   "kwd_names", "string", "old_attr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    T__216=217
    T__217=218
    T__218=219
    T__219=220
    T__220=221
    T__221=222
    T__222=223
    T__223=224
    T__224=225
    T__225=226
    T__226=227
    T__227=228
    T__228=229
    T__229=230
    T__230=231
    T__231=232
    T__232=233
    T__233=234
    T__234=235
    T__235=236
    T__236=237
    T__237=238
    T__238=239
    T__239=240
    T__240=241
    ADD=242
    ASSIGN=243
    ATTR=244
    DIV=245
    FUTURE=246
    INTERACTIVE=247
    INJECT=248
    ISNT=249
    LOCAL=250
    MUL=251
    NOT=252
    OFF=253
    ON=254
    SUB=255
    TERMINATOR=256
    TOGGLE=257
    UNTIL=258
    WHILE=259
    CLOSE_BRACKET=260
    CLOSE_PAREN=261
    MAYBE=262
    ID=263
    INT=264
    FLOAT=265
    STRING=266
    EOL_COMMENT=267
    COMMENT=268
    WS=269

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Macro_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_file" ):
                listener.enterMacro_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_file" ):
                listener.exitMacro_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_file" ):
                return visitor.visitMacro_file(self)
            else:
                return visitor.visitChildren(self)




    def macro_file(self):

        localctx = DMFParser.Macro_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_macro_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__76 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__80 - 64)) | (1 << (DMFParser.T__81 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__125 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__129 - 128)) | (1 << (DMFParser.T__130 - 128)) | (1 << (DMFParser.T__131 - 128)) | (1 << (DMFParser.T__132 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__135 - 128)) | (1 << (DMFParser.T__136 - 128)) | (1 << (DMFParser.T__137 - 128)) | (1 << (DMFParser.T__142 - 128)) | (1 << (DMFParser.T__147 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__195 - 192)) | (1 << (DMFParser.T__196 - 192)) | (1 << (DMFParser.T__197 - 192)) | (1 << (DMFParser.T__198 - 192)) | (1 << (DMFParser.T__199 - 192)) | (1 << (DMFParser.T__200 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__220 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.T__225 - 192)) | (1 << (DMFParser.T__226 - 192)) | (1 << (DMFParser.T__227 - 192)) | (1 << (DMFParser.T__228 - 192)) | (1 << (DMFParser.T__229 - 192)) | (1 << (DMFParser.T__230 - 192)) | (1 << (DMFParser.T__231 - 192)) | (1 << (DMFParser.T__232 - 192)) | (1 << (DMFParser.T__233 - 192)) | (1 << (DMFParser.T__234 - 192)) | (1 << (DMFParser.T__235 - 192)) | (1 << (DMFParser.T__237 - 192)) | (1 << (DMFParser.T__238 - 192)) | (1 << (DMFParser.T__239 - 192)) | (1 << (DMFParser.T__240 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.LOCAL - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (DMFParser.TOGGLE - 257)) | (1 << (DMFParser.MAYBE - 257)) | (1 << (DMFParser.ID - 257)) | (1 << (DMFParser.INT - 257)) | (1 << (DMFParser.FLOAT - 257)) | (1 << (DMFParser.STRING - 257)))) != 0):
                self.state = 90
                self.stat()
                self.state = 95
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 96
            self.match(DMFParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_interactive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Macro_def_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_declaration(self):
            return self.getTypedRuleContext(DMFParser.Macro_declarationContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def_interactive" ):
                listener.enterMacro_def_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def_interactive" ):
                listener.exitMacro_def_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def_interactive" ):
                return visitor.visitMacro_def_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Compound_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_interactive" ):
                listener.enterCompound_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_interactive" ):
                listener.exitCompound_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_interactive" ):
                return visitor.visitCompound_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Decl_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_interactive" ):
                listener.enterDecl_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_interactive" ):
                listener.exitDecl_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_interactive" ):
                return visitor.visitDecl_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Empty_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_interactive" ):
                listener.enterEmpty_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_interactive" ):
                listener.exitEmpty_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_interactive" ):
                return visitor.visitEmpty_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Loop_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_interactive" ):
                listener.enterLoop_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_interactive" ):
                listener.exitLoop_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_interactive" ):
                return visitor.visitLoop_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Expr_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_interactive" ):
                listener.enterExpr_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_interactive" ):
                listener.exitExpr_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_interactive" ):
                return visitor.visitExpr_interactive(self)
            else:
                return visitor.visitChildren(self)



    def interactive(self):

        localctx = DMFParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        self._la = 0 # Token type
        try:
            self.state = 120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Compound_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 98
                self.compound()
                self.state = 99
                self.match(DMFParser.EOF)
                pass

            elif la_ == 2:
                localctx = DMFParser.Loop_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 101
                self.loop()
                self.state = 102
                self.match(DMFParser.EOF)
                pass

            elif la_ == 3:
                localctx = DMFParser.Decl_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 104
                self.declaration()
                self.state = 106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 105
                    self.match(DMFParser.TERMINATOR)


                self.state = 108
                self.match(DMFParser.EOF)
                pass

            elif la_ == 4:
                localctx = DMFParser.Macro_def_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 110
                self.macro_declaration()
                self.state = 111
                self.match(DMFParser.EOF)
                pass

            elif la_ == 5:
                localctx = DMFParser.Expr_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 113
                self.expr(0)
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 114
                    self.match(DMFParser.TERMINATOR)


                self.state = 117
                self.match(DMFParser.EOF)
                pass

            elif la_ == 6:
                localctx = DMFParser.Empty_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 119
                self.match(DMFParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self._not_future_type = None # Not_future_typeContext
            self._name = None # NameContext
            self.target = None # ExprContext
            self._INT = None # Token
            self.init = None # ExprContext
            self._value_type = None # Value_typeContext

        def FUTURE(self):
            return self.getToken(DMFParser.FUTURE, 0)

        def not_future_type(self):
            return self.getTypedRuleContext(DMFParser.Not_future_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def LOCAL(self):
            return self.getToken(DMFParser.LOCAL, 0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = DMFParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 122
                    self.match(DMFParser.LOCAL)


                self.state = 125
                self.match(DMFParser.FUTURE)
                self.state = 126
                localctx._not_future_type = self.not_future_type()
                self.state = 127
                localctx._name = self.name()
                self.state = 128
                self.match(DMFParser.INJECT)
                self.state = 129
                localctx.target = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 133
                    self.match(DMFParser.LOCAL)


                self.state = 136
                self.match(DMFParser.FUTURE)
                self.state = 137
                localctx._not_future_type = self.not_future_type()
                self.state = 138
                localctx._INT = self.match(DMFParser.INT)
                self.state = 139
                self.match(DMFParser.INJECT)
                self.state = 140
                localctx.target = self.expr(0)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 144
                self.match(DMFParser.LOCAL)
                self.state = 145
                localctx._name = self.name()
                self.state = 146
                self.match(DMFParser.ASSIGN)
                self.state = 147
                localctx.init = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=None
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.match(DMFParser.LOCAL)
                self.state = 152
                localctx._value_type = self.value_type()
                self.state = 153
                localctx._INT = self.match(DMFParser.INT)
                self.state = 154
                self.match(DMFParser.ASSIGN)
                self.state = 155
                localctx.init = self.expr(0)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 159
                self.match(DMFParser.LOCAL)
                self.state = 160
                localctx._value_type = self.value_type()
                self.state = 161
                localctx._INT = self.match(DMFParser.INT)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 165
                    self.match(DMFParser.LOCAL)


                self.state = 168
                localctx._value_type = self.value_type()
                self.state = 169
                localctx._name = self.name()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.ASSIGN:
                    self.state = 170
                    self.match(DMFParser.ASSIGN)
                    self.state = 171
                    localctx.init = self.expr(0)


                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Expr_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stat" ):
                listener.enterExpr_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stat" ):
                listener.exitExpr_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stat" ):
                return visitor.visitExpr_stat(self)
            else:
                return visitor.visitChildren(self)


    class Compound_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stat" ):
                listener.enterCompound_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stat" ):
                listener.exitCompound_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stat" ):
                return visitor.visitCompound_stat(self)
            else:
                return visitor.visitChildren(self)


    class Macro_def_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_declaration(self):
            return self.getTypedRuleContext(DMFParser.Macro_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def_stat" ):
                listener.enterMacro_def_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def_stat" ):
                listener.exitMacro_def_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def_stat" ):
                return visitor.visitMacro_def_stat(self)
            else:
                return visitor.visitChildren(self)


    class Return_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ret(self):
            return self.getTypedRuleContext(DMFParser.RetContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stat" ):
                listener.enterReturn_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stat" ):
                listener.exitReturn_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stat" ):
                return visitor.visitReturn_stat(self)
            else:
                return visitor.visitChildren(self)


    class If_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.tests = list() # of ExprContexts
            self._compound = None # CompoundContext
            self.bodies = list() # of CompoundContexts
            self.else_body = None # CompoundContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def compound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.CompoundContext)
            else:
                return self.getTypedRuleContext(DMFParser.CompoundContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stat" ):
                listener.enterIf_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stat" ):
                listener.exitIf_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stat" ):
                return visitor.visitIf_stat(self)
            else:
                return visitor.visitChildren(self)


    class Loop_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_stat" ):
                listener.enterLoop_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_stat" ):
                listener.exitLoop_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_stat" ):
                return visitor.visitLoop_stat(self)
            else:
                return visitor.visitChildren(self)


    class Exit_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exit(self):
            return self.getTypedRuleContext(DMFParser.ExitContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_stat" ):
                listener.enterExit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_stat" ):
                listener.exitExit_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_stat" ):
                return visitor.visitExit_stat(self)
            else:
                return visitor.visitChildren(self)


    class Decl_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_stat" ):
                listener.enterDecl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_stat" ):
                listener.exitDecl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_stat" ):
                return visitor.visitDecl_stat(self)
            else:
                return visitor.visitChildren(self)



    def stat(self):

        localctx = DMFParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stat)
        self._la = 0 # Token type
        try:
            self.state = 211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Decl_statContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 179
                self.declaration()
                self.state = 180
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 2:
                localctx = DMFParser.Macro_def_statContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self.macro_declaration()
                pass

            elif la_ == 3:
                localctx = DMFParser.If_statContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.match(DMFParser.T__0)
                self.state = 184
                localctx._expr = self.expr(0)
                localctx.tests.append(localctx._expr)
                self.state = 185
                localctx._compound = self.compound()
                localctx.bodies.append(localctx._compound)
                self.state = 193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 186
                        self.match(DMFParser.T__1)
                        self.state = 187
                        self.match(DMFParser.T__0)
                        self.state = 188
                        localctx._expr = self.expr(0)
                        localctx.tests.append(localctx._expr)
                        self.state = 189
                        localctx._compound = self.compound()
                        localctx.bodies.append(localctx._compound) 
                    self.state = 195
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__1:
                    self.state = 196
                    self.match(DMFParser.T__1)
                    self.state = 197
                    localctx.else_body = self.compound()


                pass

            elif la_ == 4:
                localctx = DMFParser.Expr_statContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 200
                self.expr(0)
                self.state = 201
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 5:
                localctx = DMFParser.Loop_statContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 203
                self.loop()
                pass

            elif la_ == 6:
                localctx = DMFParser.Exit_statContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 204
                self.exit()
                self.state = 205
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 7:
                localctx = DMFParser.Return_statContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 207
                self.ret()
                self.state = 208
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 8:
                localctx = DMFParser.Compound_statContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 210
                self.compound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_compound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_blockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_block" ):
                listener.enterPar_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_block" ):
                listener.exitPar_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPar_block" ):
                return visitor.visitPar_block(self)
            else:
                return visitor.visitChildren(self)


    class BlockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)



    def compound(self):

        localctx = DMFParser.CompoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_compound)
        self._la = 0 # Token type
        try:
            self.state = 229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2]:
                localctx = DMFParser.BlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.match(DMFParser.T__2)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__76 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__80 - 64)) | (1 << (DMFParser.T__81 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__125 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__129 - 128)) | (1 << (DMFParser.T__130 - 128)) | (1 << (DMFParser.T__131 - 128)) | (1 << (DMFParser.T__132 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__135 - 128)) | (1 << (DMFParser.T__136 - 128)) | (1 << (DMFParser.T__137 - 128)) | (1 << (DMFParser.T__142 - 128)) | (1 << (DMFParser.T__147 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__195 - 192)) | (1 << (DMFParser.T__196 - 192)) | (1 << (DMFParser.T__197 - 192)) | (1 << (DMFParser.T__198 - 192)) | (1 << (DMFParser.T__199 - 192)) | (1 << (DMFParser.T__200 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__220 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.T__225 - 192)) | (1 << (DMFParser.T__226 - 192)) | (1 << (DMFParser.T__227 - 192)) | (1 << (DMFParser.T__228 - 192)) | (1 << (DMFParser.T__229 - 192)) | (1 << (DMFParser.T__230 - 192)) | (1 << (DMFParser.T__231 - 192)) | (1 << (DMFParser.T__232 - 192)) | (1 << (DMFParser.T__233 - 192)) | (1 << (DMFParser.T__234 - 192)) | (1 << (DMFParser.T__235 - 192)) | (1 << (DMFParser.T__237 - 192)) | (1 << (DMFParser.T__238 - 192)) | (1 << (DMFParser.T__239 - 192)) | (1 << (DMFParser.T__240 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.LOCAL - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (DMFParser.TOGGLE - 257)) | (1 << (DMFParser.MAYBE - 257)) | (1 << (DMFParser.ID - 257)) | (1 << (DMFParser.INT - 257)) | (1 << (DMFParser.FLOAT - 257)) | (1 << (DMFParser.STRING - 257)))) != 0):
                    self.state = 214
                    self.stat()
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 220
                self.match(DMFParser.T__3)
                pass
            elif token in [DMFParser.T__4]:
                localctx = DMFParser.Par_blockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self.match(DMFParser.T__4)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__76 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__80 - 64)) | (1 << (DMFParser.T__81 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__125 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__129 - 128)) | (1 << (DMFParser.T__130 - 128)) | (1 << (DMFParser.T__131 - 128)) | (1 << (DMFParser.T__132 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__135 - 128)) | (1 << (DMFParser.T__136 - 128)) | (1 << (DMFParser.T__137 - 128)) | (1 << (DMFParser.T__142 - 128)) | (1 << (DMFParser.T__147 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__195 - 192)) | (1 << (DMFParser.T__196 - 192)) | (1 << (DMFParser.T__197 - 192)) | (1 << (DMFParser.T__198 - 192)) | (1 << (DMFParser.T__199 - 192)) | (1 << (DMFParser.T__200 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__220 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.T__225 - 192)) | (1 << (DMFParser.T__226 - 192)) | (1 << (DMFParser.T__227 - 192)) | (1 << (DMFParser.T__228 - 192)) | (1 << (DMFParser.T__229 - 192)) | (1 << (DMFParser.T__230 - 192)) | (1 << (DMFParser.T__231 - 192)) | (1 << (DMFParser.T__232 - 192)) | (1 << (DMFParser.T__233 - 192)) | (1 << (DMFParser.T__234 - 192)) | (1 << (DMFParser.T__235 - 192)) | (1 << (DMFParser.T__237 - 192)) | (1 << (DMFParser.T__238 - 192)) | (1 << (DMFParser.T__239 - 192)) | (1 << (DMFParser.T__240 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.LOCAL - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (DMFParser.TOGGLE - 257)) | (1 << (DMFParser.MAYBE - 257)) | (1 << (DMFParser.ID - 257)) | (1 << (DMFParser.INT - 257)) | (1 << (DMFParser.FLOAT - 257)) | (1 << (DMFParser.STRING - 257)))) != 0):
                    self.state = 222
                    self.stat()
                    self.state = 227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 228
                self.match(DMFParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_loop_header

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Duration_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration_loop_header" ):
                listener.enterDuration_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration_loop_header" ):
                listener.exitDuration_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuration_loop_header" ):
                return visitor.visitDuration_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Test_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.cond = None # ExprContext
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(DMFParser.WHILE, 0)
        def UNTIL(self):
            return self.getToken(DMFParser.UNTIL, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_loop_header" ):
                listener.enterTest_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_loop_header" ):
                listener.exitTest_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_loop_header" ):
                return visitor.visitTest_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Seq_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.seq = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_iter_loop_header" ):
                listener.enterSeq_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_iter_loop_header" ):
                listener.exitSeq_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_iter_loop_header" ):
                return visitor.visitSeq_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Step_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.first = None # Step_first_and_dirContext
            self.bound = None # ExprContext
            self.step = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def step_first_and_dir(self):
            return self.getTypedRuleContext(DMFParser.Step_first_and_dirContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def param(self):
            return self.getTypedRuleContext(DMFParser.ParamContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_iter_loop_header" ):
                listener.enterStep_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_iter_loop_header" ):
                listener.exitStep_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_iter_loop_header" ):
                return visitor.visitStep_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class N_times_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.n = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_times_loop_header" ):
                listener.enterN_times_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_times_loop_header" ):
                listener.exitN_times_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_times_loop_header" ):
                return visitor.visitN_times_loop_header(self)
            else:
                return visitor.visitChildren(self)



    def loop_header(self):

        localctx = DMFParser.Loop_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_loop_header)
        self._la = 0 # Token type
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = DMFParser.N_times_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                localctx.n = self.expr(0)
                self.state = 232
                self.match(DMFParser.T__6)
                pass

            elif la_ == 2:
                localctx = DMFParser.Duration_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.match(DMFParser.T__7)
                self.state = 235
                localctx.duration = self.expr(0)
                pass

            elif la_ == 3:
                localctx = DMFParser.Test_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                _la = self._input.LA(1)
                if not(_la==DMFParser.UNTIL or _la==DMFParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 237
                localctx.cond = self.expr(0)
                pass

            elif la_ == 4:
                localctx = DMFParser.Seq_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 238
                self.match(DMFParser.T__8)
                self.state = 239
                localctx.var = self.name()
                self.state = 240
                self.match(DMFParser.T__9)
                self.state = 241
                localctx.seq = self.expr(0)
                pass

            elif la_ == 5:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 243
                self.match(DMFParser.T__8)
                self.state = 244
                localctx.var = self.name()
                self.state = 245
                localctx.first = self.step_first_and_dir()
                self.state = 246
                self.match(DMFParser.T__10)
                self.state = 247
                localctx.bound = self.expr(0)
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 248
                    self.match(DMFParser.T__11)
                    self.state = 249
                    localctx.step = self.expr(0)


                pass

            elif la_ == 6:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 252
                self.match(DMFParser.T__8)
                self.state = 253
                localctx.var = self.param()
                self.state = 254
                localctx.first = self.step_first_and_dir()
                self.state = 255
                self.match(DMFParser.T__10)
                self.state = 256
                localctx.bound = self.expr(0)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 257
                    self.match(DMFParser.T__11)
                    self.state = 258
                    localctx.step = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Step_first_and_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_down = None

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_step_first_and_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_first_and_dir" ):
                listener.enterStep_first_and_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_first_and_dir" ):
                listener.exitStep_first_and_dir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_first_and_dir" ):
                return visitor.visitStep_first_and_dir(self)
            else:
                return visitor.visitChildren(self)




    def step_first_and_dir(self):

        localctx = DMFParser.Step_first_and_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_step_first_and_dir)
        self._la = 0 # Token type
        try:
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.match(DMFParser.ASSIGN)
                self.state = 264
                self.expr(0)
                self.state = 265
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.match(DMFParser.ASSIGN)
                self.state = 269
                self.expr(0)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__13:
                    self.state = 270
                    self.match(DMFParser.T__13)


                localctx.is_down=False
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 275
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__13:
                    self.state = 277
                    self.match(DMFParser.T__13)


                localctx.is_down=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext
            self.header = None # Loop_headerContext
            self.body = None # CompoundContext

        def loop_header(self):
            return self.getTypedRuleContext(DMFParser.Loop_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = DMFParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DMFParser.T__14:
                self.state = 283
                self.match(DMFParser.T__14)
                self.state = 284
                localctx.loop_name = self.name()
                self.state = 285
                self.match(DMFParser.CLOSE_BRACKET)


            self.state = 289
            self.match(DMFParser.T__15)
            self.state = 290
            localctx.header = self.loop_header()
            self.state = 291
            localctx.body = self.compound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit" ):
                return visitor.visitExit(self)
            else:
                return visitor.visitChildren(self)




    def exit(self):

        localctx = DMFParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(DMFParser.T__16)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__55))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (DMFParser.T__90 - 91)) | (1 << (DMFParser.T__91 - 91)) | (1 << (DMFParser.T__92 - 91)) | (1 << (DMFParser.T__93 - 91)) | (1 << (DMFParser.T__94 - 91)) | (1 << (DMFParser.T__95 - 91)) | (1 << (DMFParser.T__96 - 91)) | (1 << (DMFParser.T__97 - 91)) | (1 << (DMFParser.T__99 - 91)) | (1 << (DMFParser.T__105 - 91)) | (1 << (DMFParser.T__112 - 91)) | (1 << (DMFParser.T__114 - 91)) | (1 << (DMFParser.T__119 - 91)) | (1 << (DMFParser.T__120 - 91)) | (1 << (DMFParser.T__123 - 91)) | (1 << (DMFParser.T__126 - 91)) | (1 << (DMFParser.T__130 - 91)) | (1 << (DMFParser.T__135 - 91)) | (1 << (DMFParser.T__137 - 91)) | (1 << (DMFParser.T__142 - 91)) | (1 << (DMFParser.T__147 - 91)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                self.state = 294
                localctx.loop_name = self.name()


            self.state = 297
            self.match(DMFParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_ret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRet" ):
                listener.enterRet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRet" ):
                listener.exitRet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRet" ):
                return visitor.visitRet(self)
            else:
                return visitor.visitChildren(self)




    def ret(self):

        localctx = DMFParser.RetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(DMFParser.T__18)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (DMFParser.T__9 - 10)) | (1 << (DMFParser.T__10 - 10)) | (1 << (DMFParser.T__12 - 10)) | (1 << (DMFParser.T__13 - 10)) | (1 << (DMFParser.T__16 - 10)) | (1 << (DMFParser.T__19 - 10)) | (1 << (DMFParser.T__22 - 10)) | (1 << (DMFParser.T__23 - 10)) | (1 << (DMFParser.T__26 - 10)) | (1 << (DMFParser.T__27 - 10)) | (1 << (DMFParser.T__29 - 10)) | (1 << (DMFParser.T__30 - 10)) | (1 << (DMFParser.T__31 - 10)) | (1 << (DMFParser.T__33 - 10)) | (1 << (DMFParser.T__34 - 10)) | (1 << (DMFParser.T__38 - 10)) | (1 << (DMFParser.T__39 - 10)) | (1 << (DMFParser.T__42 - 10)) | (1 << (DMFParser.T__43 - 10)) | (1 << (DMFParser.T__45 - 10)) | (1 << (DMFParser.T__46 - 10)) | (1 << (DMFParser.T__47 - 10)) | (1 << (DMFParser.T__55 - 10)) | (1 << (DMFParser.T__58 - 10)) | (1 << (DMFParser.T__59 - 10)) | (1 << (DMFParser.T__60 - 10)) | (1 << (DMFParser.T__61 - 10)) | (1 << (DMFParser.T__62 - 10)) | (1 << (DMFParser.T__63 - 10)) | (1 << (DMFParser.T__64 - 10)) | (1 << (DMFParser.T__65 - 10)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (DMFParser.T__75 - 76)) | (1 << (DMFParser.T__76 - 76)) | (1 << (DMFParser.T__77 - 76)) | (1 << (DMFParser.T__79 - 76)) | (1 << (DMFParser.T__80 - 76)) | (1 << (DMFParser.T__81 - 76)) | (1 << (DMFParser.T__82 - 76)) | (1 << (DMFParser.T__83 - 76)) | (1 << (DMFParser.T__84 - 76)) | (1 << (DMFParser.T__85 - 76)) | (1 << (DMFParser.T__86 - 76)) | (1 << (DMFParser.T__87 - 76)) | (1 << (DMFParser.T__90 - 76)) | (1 << (DMFParser.T__91 - 76)) | (1 << (DMFParser.T__92 - 76)) | (1 << (DMFParser.T__93 - 76)) | (1 << (DMFParser.T__94 - 76)) | (1 << (DMFParser.T__95 - 76)) | (1 << (DMFParser.T__96 - 76)) | (1 << (DMFParser.T__97 - 76)) | (1 << (DMFParser.T__98 - 76)) | (1 << (DMFParser.T__99 - 76)) | (1 << (DMFParser.T__100 - 76)) | (1 << (DMFParser.T__101 - 76)) | (1 << (DMFParser.T__102 - 76)) | (1 << (DMFParser.T__103 - 76)) | (1 << (DMFParser.T__104 - 76)) | (1 << (DMFParser.T__105 - 76)) | (1 << (DMFParser.T__106 - 76)) | (1 << (DMFParser.T__107 - 76)) | (1 << (DMFParser.T__108 - 76)) | (1 << (DMFParser.T__109 - 76)) | (1 << (DMFParser.T__110 - 76)) | (1 << (DMFParser.T__111 - 76)) | (1 << (DMFParser.T__112 - 76)) | (1 << (DMFParser.T__113 - 76)) | (1 << (DMFParser.T__114 - 76)) | (1 << (DMFParser.T__115 - 76)) | (1 << (DMFParser.T__116 - 76)) | (1 << (DMFParser.T__117 - 76)) | (1 << (DMFParser.T__118 - 76)) | (1 << (DMFParser.T__119 - 76)) | (1 << (DMFParser.T__120 - 76)) | (1 << (DMFParser.T__121 - 76)) | (1 << (DMFParser.T__122 - 76)) | (1 << (DMFParser.T__123 - 76)) | (1 << (DMFParser.T__124 - 76)) | (1 << (DMFParser.T__125 - 76)) | (1 << (DMFParser.T__126 - 76)) | (1 << (DMFParser.T__127 - 76)) | (1 << (DMFParser.T__128 - 76)) | (1 << (DMFParser.T__129 - 76)) | (1 << (DMFParser.T__130 - 76)) | (1 << (DMFParser.T__131 - 76)) | (1 << (DMFParser.T__132 - 76)) | (1 << (DMFParser.T__133 - 76)) | (1 << (DMFParser.T__135 - 76)) | (1 << (DMFParser.T__136 - 76)) | (1 << (DMFParser.T__137 - 76)))) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (DMFParser.T__142 - 143)) | (1 << (DMFParser.T__147 - 143)) | (1 << (DMFParser.T__175 - 143)) | (1 << (DMFParser.T__176 - 143)) | (1 << (DMFParser.T__177 - 143)) | (1 << (DMFParser.T__178 - 143)) | (1 << (DMFParser.T__179 - 143)) | (1 << (DMFParser.T__180 - 143)) | (1 << (DMFParser.T__181 - 143)) | (1 << (DMFParser.T__184 - 143)) | (1 << (DMFParser.T__185 - 143)) | (1 << (DMFParser.T__186 - 143)) | (1 << (DMFParser.T__187 - 143)) | (1 << (DMFParser.T__188 - 143)) | (1 << (DMFParser.T__189 - 143)) | (1 << (DMFParser.T__190 - 143)) | (1 << (DMFParser.T__191 - 143)) | (1 << (DMFParser.T__192 - 143)) | (1 << (DMFParser.T__193 - 143)) | (1 << (DMFParser.T__194 - 143)) | (1 << (DMFParser.T__195 - 143)) | (1 << (DMFParser.T__196 - 143)) | (1 << (DMFParser.T__197 - 143)) | (1 << (DMFParser.T__198 - 143)) | (1 << (DMFParser.T__199 - 143)) | (1 << (DMFParser.T__200 - 143)) | (1 << (DMFParser.T__201 - 143)) | (1 << (DMFParser.T__202 - 143)) | (1 << (DMFParser.T__203 - 143)) | (1 << (DMFParser.T__204 - 143)) | (1 << (DMFParser.T__205 - 143)))) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (DMFParser.T__206 - 207)) | (1 << (DMFParser.T__207 - 207)) | (1 << (DMFParser.T__208 - 207)) | (1 << (DMFParser.T__209 - 207)) | (1 << (DMFParser.T__210 - 207)) | (1 << (DMFParser.T__217 - 207)) | (1 << (DMFParser.T__218 - 207)) | (1 << (DMFParser.T__219 - 207)) | (1 << (DMFParser.T__220 - 207)) | (1 << (DMFParser.T__221 - 207)) | (1 << (DMFParser.T__222 - 207)) | (1 << (DMFParser.T__223 - 207)) | (1 << (DMFParser.T__224 - 207)) | (1 << (DMFParser.T__225 - 207)) | (1 << (DMFParser.T__226 - 207)) | (1 << (DMFParser.T__227 - 207)) | (1 << (DMFParser.T__228 - 207)) | (1 << (DMFParser.T__229 - 207)) | (1 << (DMFParser.T__230 - 207)) | (1 << (DMFParser.T__231 - 207)) | (1 << (DMFParser.T__232 - 207)) | (1 << (DMFParser.T__233 - 207)) | (1 << (DMFParser.T__234 - 207)) | (1 << (DMFParser.T__235 - 207)) | (1 << (DMFParser.T__237 - 207)) | (1 << (DMFParser.T__238 - 207)) | (1 << (DMFParser.T__239 - 207)) | (1 << (DMFParser.T__240 - 207)) | (1 << (DMFParser.FUTURE - 207)) | (1 << (DMFParser.INTERACTIVE - 207)) | (1 << (DMFParser.NOT - 207)) | (1 << (DMFParser.OFF - 207)) | (1 << (DMFParser.ON - 207)) | (1 << (DMFParser.SUB - 207)) | (1 << (DMFParser.TOGGLE - 207)) | (1 << (DMFParser.MAYBE - 207)) | (1 << (DMFParser.ID - 207)) | (1 << (DMFParser.INT - 207)) | (1 << (DMFParser.FLOAT - 207)) | (1 << (DMFParser.STRING - 207)))) != 0):
                self.state = 300
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_punctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_closed = None

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_term_punct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_punct" ):
                listener.enterTerm_punct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_punct" ):
                listener.exitTerm_punct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm_punct" ):
                return visitor.visitTerm_punct(self)
            else:
                return visitor.visitChildren(self)




    def term_punct(self):

        localctx = DMFParser.Term_punctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_term_punct)
        try:
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.CLOSE_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.match(DMFParser.CLOSE_BRACKET)
                localctx.is_closed=True
                pass
            elif token in [DMFParser.CLOSE_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.match(DMFParser.CLOSE_PAREN)
                localctx.is_closed=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Neg_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeg_expr" ):
                listener.enterNeg_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeg_expr" ):
                listener.exitNeg_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeg_expr" ):
                return visitor.visitNeg_expr(self)
            else:
                return visitor.visitChildren(self)


    class Const_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)
        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_rc_expr" ):
                listener.enterConst_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_rc_expr" ):
                listener.exitConst_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_rc_expr" ):
                return visitor.visitConst_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_string_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_string_expr" ):
                listener.enterUnit_string_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_string_expr" ):
                listener.exitUnit_string_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_string_expr" ):
                return visitor.visitUnit_string_expr(self)
            else:
                return visitor.visitChildren(self)


    class Action_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def no_arg_action(self):
            return self.getTypedRuleContext(DMFParser.No_arg_actionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_expr" ):
                listener.enterAction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_expr" ):
                listener.exitAction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_expr" ):
                return visitor.visitAction_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_assign_expr" ):
                listener.enterAttr_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_assign_expr" ):
                listener.exitAttr_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_assign_expr" ):
                return visitor.visitAttr_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_expr" ):
                listener.enterUnit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_expr" ):
                listener.exitUnit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_expr" ):
                return visitor.visitUnit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Temperature_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemperature_expr" ):
                listener.enterTemperature_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemperature_expr" ):
                listener.exitTemperature_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemperature_expr" ):
                return visitor.visitTemperature_expr(self)
            else:
                return visitor.visitChildren(self)


    class Print_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_expr" ):
                listener.enterPrint_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_expr" ):
                listener.exitPrint_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_expr" ):
                return visitor.visitPrint_expr(self)
            else:
                return visitor.visitChildren(self)


    class Numbered_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.kind = None # Numbered_typeContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def numbered_type(self):
            return self.getTypedRuleContext(DMFParser.Numbered_typeContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_expr" ):
                listener.enterNumbered_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_expr" ):
                listener.exitNumbered_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_expr" ):
                return visitor.visitNumbered_expr(self)
            else:
                return visitor.visitChildren(self)


    class Rel_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def rel(self):
            return self.getTypedRuleContext(DMFParser.RelContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_expr" ):
                listener.enterRel_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_expr" ):
                listener.exitRel_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel_expr" ):
                return visitor.visitRel_expr(self)
            else:
                return visitor.visitChildren(self)


    class Existence_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # ExprContext
            self.copyFrom(ctx)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence_expr" ):
                listener.enterExistence_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence_expr" ):
                listener.exitExistence_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence_expr" ):
                return visitor.visitExistence_expr(self)
            else:
                return visitor.visitChildren(self)


    class Not_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_expr" ):
                listener.enterNot_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_expr" ):
                listener.exitNot_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_expr" ):
                return visitor.visitNot_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reagent(self):
            return self.getTypedRuleContext(DMFParser.ReagentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_lit_expr" ):
                listener.enterReagent_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_lit_expr" ):
                listener.exitReagent_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_lit_expr" ):
                return visitor.visitReagent_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class And_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)


    class Prompt_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_expr" ):
                listener.enterPrompt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_expr" ):
                listener.exitPrompt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_expr" ):
                return visitor.visitPrompt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Or_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expr" ):
                listener.enterOr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expr" ):
                listener.exitOr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_expr" ):
                return visitor.visitOr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Injection_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInjection_expr" ):
                listener.enterInjection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInjection_expr" ):
                listener.exitInjection_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInjection_expr" ):
                return visitor.visitInjection_expr(self)
            else:
                return visitor.visitChildren(self)


    class Drop_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.loc = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_expr" ):
                listener.enterDrop_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_expr" ):
                listener.exitDrop_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_expr" ):
                return visitor.visitDrop_expr(self)
            else:
                return visitor.visitChildren(self)


    class Function_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.func = None # ExprContext
            self._expr = None # ExprContext
            self.args = list() # of ExprContexts
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_expr" ):
                listener.enterFunction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_expr" ):
                listener.exitFunction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_expr" ):
                return visitor.visitFunction_expr(self)
            else:
                return visitor.visitChildren(self)


    class To_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def axis(self):
            return self.getTypedRuleContext(DMFParser.AxisContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTo_expr" ):
                listener.enterTo_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTo_expr" ):
                listener.exitTo_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTo_expr" ):
                return visitor.visitTo_expr(self)
            else:
                return visitor.visitChildren(self)


    class Bool_const_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # Bool_valContext
            self.copyFrom(ctx)

        def bool_val(self):
            return self.getTypedRuleContext(DMFParser.Bool_valContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_const_expr" ):
                listener.enterBool_const_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_const_expr" ):
                listener.exitBool_const_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_const_expr" ):
                return visitor.visitBool_const_expr(self)
            else:
                return visitor.visitChildren(self)


    class Has_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def possession(self):
            return self.getTypedRuleContext(DMFParser.PossessionContext,0)

        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_expr" ):
                listener.enterHas_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_expr" ):
                listener.exitHas_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHas_expr" ):
                return visitor.visitHas_expr(self)
            else:
                return visitor.visitChildren(self)


    class Float_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT(self):
            return self.getToken(DMFParser.FLOAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_expr" ):
                listener.enterFloat_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_expr" ):
                listener.exitFloat_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_expr" ):
                return visitor.visitFloat_expr(self)
            else:
                return visitor.visitChildren(self)


    class N_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_rc_expr" ):
                listener.enterN_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_rc_expr" ):
                listener.exitN_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_rc_expr" ):
                return visitor.visitN_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Macro_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_def(self):
            return self.getTypedRuleContext(DMFParser.Macro_defContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_expr" ):
                listener.enterMacro_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_expr" ):
                listener.exitMacro_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_expr" ):
                return visitor.visitMacro_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_expr" ):
                listener.enterName_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_expr" ):
                listener.exitName_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_expr" ):
                return visitor.visitName_expr(self)
            else:
                return visitor.visitChildren(self)


    class Addsub_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ADD(self):
            return self.getToken(DMFParser.ADD, 0)
        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddsub_expr" ):
                listener.enterAddsub_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddsub_expr" ):
                listener.exitAddsub_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddsub_expr" ):
                return visitor.visitAddsub_expr(self)
            else:
                return visitor.visitChildren(self)


    class Liquid_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiquid_expr" ):
                listener.enterLiquid_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiquid_expr" ):
                listener.exitLiquid_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiquid_expr" ):
                return visitor.visitLiquid_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_expr" ):
                listener.enterReagent_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_expr" ):
                listener.exitReagent_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_expr" ):
                return visitor.visitReagent_expr(self)
            else:
                return visitor.visitChildren(self)


    class Dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDir_expr" ):
                listener.enterDir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDir_expr" ):
                listener.exitDir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDir_expr" ):
                return visitor.visitDir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Coord_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.x = None # ExprContext
            self.y = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_expr" ):
                listener.enterCoord_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_expr" ):
                listener.exitCoord_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_expr" ):
                return visitor.visitCoord_expr(self)
            else:
                return visitor.visitChildren(self)


    class Pause_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPause_expr" ):
                listener.enterPause_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPause_expr" ):
                listener.exitPause_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPause_expr" ):
                return visitor.visitPause_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)
        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_expr" ):
                listener.enterAttr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_expr" ):
                listener.exitAttr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_expr" ):
                return visitor.visitAttr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Paren_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParen_expr" ):
                listener.enterParen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParen_expr" ):
                listener.exitParen_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParen_expr" ):
                return visitor.visitParen_expr(self)
            else:
                return visitor.visitChildren(self)


    class Type_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.n = None # Token
            self.copyFrom(ctx)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_expr" ):
                listener.enterType_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_expr" ):
                listener.exitType_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name_expr" ):
                return visitor.visitType_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Index_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_expr" ):
                listener.enterIndex_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_expr" ):
                listener.exitIndex_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_expr" ):
                return visitor.visitIndex_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # NameContext
            self.what = None # ExprContext
            self.ptype = None # Value_typeContext
            self.n = None # Token
            self.copyFrom(ctx)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_assign_expr" ):
                listener.enterName_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_assign_expr" ):
                listener.exitName_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_assign_expr" ):
                return visitor.visitName_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class String_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(DMFParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_lit_expr" ):
                listener.enterString_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_lit_expr" ):
                listener.exitString_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_lit_expr" ):
                return visitor.visitString_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Magnitude_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagnitude_expr" ):
                listener.enterMagnitude_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagnitude_expr" ):
                listener.exitMagnitude_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMagnitude_expr" ):
                return visitor.visitMagnitude_expr(self)
            else:
                return visitor.visitChildren(self)


    class In_dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.d = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_dir_expr" ):
                listener.enterIn_dir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_dir_expr" ):
                listener.exitIn_dir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_dir_expr" ):
                return visitor.visitIn_dir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Muldiv_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def MUL(self):
            return self.getToken(DMFParser.MUL, 0)
        def DIV(self):
            return self.getToken(DMFParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMuldiv_expr" ):
                listener.enterMuldiv_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMuldiv_expr" ):
                listener.exitMuldiv_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMuldiv_expr" ):
                return visitor.visitMuldiv_expr(self)
            else:
                return visitor.visitChildren(self)


    class Int_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_expr" ):
                listener.enterInt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_expr" ):
                listener.exitInt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt_expr" ):
                return visitor.visitInt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Turn_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.start_dir = None # ExprContext
            self.copyFrom(ctx)

        def turn(self):
            return self.getTypedRuleContext(DMFParser.TurnContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn_expr" ):
                listener.enterTurn_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn_expr" ):
                listener.exitTurn_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn_expr" ):
                return visitor.visitTurn_expr(self)
            else:
                return visitor.visitChildren(self)


    class Cond_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.first = None # ExprContext
            self.cond = None # ExprContext
            self.second = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_expr" ):
                listener.enterCond_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_expr" ):
                listener.exitCond_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond_expr" ):
                return visitor.visitCond_expr(self)
            else:
                return visitor.visitChildren(self)


    class Mw_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMw_name_expr" ):
                listener.enterMw_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMw_name_expr" ):
                listener.exitMw_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMw_name_expr" ):
                return visitor.visitMw_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Delta_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelta_expr" ):
                listener.enterDelta_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelta_expr" ):
                listener.exitDelta_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelta_expr" ):
                return visitor.visitDelta_expr(self)
            else:
                return visitor.visitChildren(self)


    class Sample_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.empty = None # Token
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def sample_type(self):
            return self.getTypedRuleContext(DMFParser.Sample_typeContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_expr" ):
                listener.enterSample_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_expr" ):
                listener.exitSample_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_expr" ):
                return visitor.visitSample_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_recip_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_recip_expr" ):
                listener.enterUnit_recip_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_recip_expr" ):
                listener.exitUnit_recip_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_recip_expr" ):
                return visitor.visitUnit_recip_expr(self)
            else:
                return visitor.visitChildren(self)


    class Is_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.pred = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)
        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_expr" ):
                listener.enterIs_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_expr" ):
                listener.exitIs_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_expr" ):
                return visitor.visitIs_expr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = DMFParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Paren_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 310
                self.match(DMFParser.T__19)
                self.state = 311
                self.expr(0)
                self.state = 312
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = DMFParser.Coord_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 314
                self.match(DMFParser.T__19)
                self.state = 315
                localctx.x = self.expr(0)
                self.state = 316
                self.match(DMFParser.T__20)
                self.state = 317
                localctx.y = self.expr(0)
                self.state = 318
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                localctx = DMFParser.Neg_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 320
                self.match(DMFParser.SUB)
                self.state = 321
                localctx.rhs = self.expr(55)
                pass

            elif la_ == 4:
                localctx = DMFParser.Numbered_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 322
                localctx.kind = self.numbered_type()
                self.state = 323
                self.match(DMFParser.T__21)
                self.state = 324
                localctx.which = self.expr(53)
                pass

            elif la_ == 5:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__22:
                    self.state = 326
                    self.match(DMFParser.T__22)


                self.state = 329
                localctx.empty = self.match(DMFParser.T__23)
                self.state = 330
                self.sample_type()
                pass

            elif la_ == 6:
                localctx = DMFParser.Const_rc_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 331
                localctx._INT = self.match(DMFParser.INT)
                self.state = 332
                self.rc((0 if localctx._INT is None else int(localctx._INT.text)))
                pass

            elif la_ == 7:
                localctx = DMFParser.Reagent_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 333
                    self.match(DMFParser.T__33)


                self.state = 336
                self.reagent()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 337
                    self.match(DMFParser.T__34)


                pass

            elif la_ == 8:
                localctx = DMFParser.Reagent_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26 or _la==DMFParser.T__33:
                    self.state = 340
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__26 or _la==DMFParser.T__33):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 343
                self.match(DMFParser.T__34)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__35:
                    self.state = 344
                    self.match(DMFParser.T__35)


                self.state = 347
                localctx.which = self.expr(37)
                pass

            elif la_ == 9:
                localctx = DMFParser.Not_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 348
                self.match(DMFParser.NOT)
                self.state = 349
                self.expr(30)
                pass

            elif la_ == 10:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 350
                    self.match(DMFParser.T__26)


                self.state = 353
                self.match(DMFParser.T__38)
                self.state = 354
                self.match(DMFParser.T__39)
                self.state = 355
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 356
                self.match(DMFParser.T__40)
                self.state = 357
                localctx._expr = self.expr(29)
                localctx.vals.append(localctx._expr)
                pass

            elif la_ == 11:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 359
                    self.match(DMFParser.T__26)


                self.state = 362
                self.match(DMFParser.T__38)
                self.state = 363
                self.match(DMFParser.T__39)
                self.state = 364
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 365
                        self.match(DMFParser.T__20)
                        self.state = 366
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass

            elif la_ == 12:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 372
                    self.match(DMFParser.T__26)


                self.state = 375
                self.match(DMFParser.T__38)
                self.state = 376
                self.match(DMFParser.T__39)
                self.state = 377
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 378
                        self.match(DMFParser.T__20)
                        self.state = 379
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 385
                self.match(DMFParser.T__20)
                self.state = 386
                self.match(DMFParser.T__40)
                self.state = 387
                localctx._expr = self.expr(27)
                localctx.vals.append(localctx._expr)
                pass

            elif la_ == 13:
                localctx = DMFParser.Delta_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 389
                self.direction()
                self.state = 390
                localctx.dist = self.expr(24)
                pass

            elif la_ == 14:
                localctx = DMFParser.Dir_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 392
                self.direction()
                pass

            elif la_ == 15:
                localctx = DMFParser.To_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 393
                self.match(DMFParser.T__10)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (DMFParser.T__69 - 70)) | (1 << (DMFParser.T__71 - 70)) | (1 << (DMFParser.T__72 - 70)))) != 0):
                    self.state = 394
                    self.axis()


                self.state = 397
                localctx.which = self.expr(22)
                pass

            elif la_ == 16:
                localctx = DMFParser.Pause_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 398
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__7:
                    self.state = 399
                    self.match(DMFParser.T__7)


                self.state = 402
                localctx.duration = self.expr(21)
                pass

            elif la_ == 17:
                localctx = DMFParser.Prompt_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 407
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__42, DMFParser.T__43]:
                    self.state = 403
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 404
                    self.match(DMFParser.T__7)
                    self.state = 405
                    self.match(DMFParser.T__44)
                    pass
                elif token in [DMFParser.T__45]:
                    self.state = 406
                    self.match(DMFParser.T__45)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 409
                    localctx._expr = self.expr(0)
                    localctx.vals.append(localctx._expr)
                    self.state = 414
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 410
                            self.match(DMFParser.T__20)
                            self.state = 411
                            localctx._expr = self.expr(0)
                            localctx.vals.append(localctx._expr) 
                        self.state = 416
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,38,self._ctx)



                pass

            elif la_ == 18:
                localctx = DMFParser.Print_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 419
                self.match(DMFParser.T__46)
                self.state = 420
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 421
                        self.match(DMFParser.T__20)
                        self.state = 422
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 427
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

                pass

            elif la_ == 19:
                localctx = DMFParser.Drop_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 428
                self.match(DMFParser.T__47)
                self.state = 429
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__48 or _la==DMFParser.T__49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 430
                localctx.loc = self.expr(17)
                pass

            elif la_ == 20:
                localctx = DMFParser.Macro_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 431
                self.macro_def()
                pass

            elif la_ == 21:
                localctx = DMFParser.Action_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 432
                self.no_arg_action()
                pass

            elif la_ == 22:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 433
                    self.match(DMFParser.T__33)


                self.state = 436
                self.value_type()
                pass

            elif la_ == 23:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 437
                self.value_type()
                self.state = 438
                localctx.n = self.match(DMFParser.INT)
                pass

            elif la_ == 24:
                localctx = DMFParser.Bool_const_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 440
                localctx.val = self.bool_val()
                pass

            elif la_ == 25:
                localctx = DMFParser.Name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 441
                self.name()
                pass

            elif la_ == 26:
                localctx = DMFParser.Mw_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 442
                self.multi_word_name()
                pass

            elif la_ == 27:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 443
                localctx.which = self.name()
                self.state = 444
                self.match(DMFParser.ASSIGN)
                self.state = 445
                localctx.what = self.expr(6)
                pass

            elif la_ == 28:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 447
                localctx.ptype = self.value_type()
                self.state = 448
                localctx.n = self.match(DMFParser.INT)
                self.state = 449
                self.match(DMFParser.ASSIGN)
                self.state = 450
                localctx.what = self.expr(4)
                pass

            elif la_ == 29:
                localctx = DMFParser.String_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 452
                self.string()
                pass

            elif la_ == 30:
                localctx = DMFParser.Int_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 453
                localctx._INT = self.match(DMFParser.INT)
                pass

            elif la_ == 31:
                localctx = DMFParser.Float_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 454
                self.match(DMFParser.FLOAT)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 577
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                    if la_ == 1:
                        localctx = DMFParser.In_dir_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 457
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 458
                        self.match(DMFParser.T__9)
                        self.state = 459
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 460
                        localctx.d = self.expr(45)
                        pass

                    elif la_ == 2:
                        localctx = DMFParser.Liquid_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 461
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 462
                        self.match(DMFParser.T__36)
                        self.state = 463
                        localctx.which = self.expr(37)
                        pass

                    elif la_ == 3:
                        localctx = DMFParser.Muldiv_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 464
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 465
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.DIV or _la==DMFParser.MUL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 466
                        localctx.rhs = self.expr(36)
                        pass

                    elif la_ == 4:
                        localctx = DMFParser.Addsub_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 467
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 468
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.ADD or _la==DMFParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 469
                        localctx.rhs = self.expr(35)
                        pass

                    elif la_ == 5:
                        localctx = DMFParser.Rel_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 470
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 471
                        self.rel()
                        self.state = 472
                        localctx.rhs = self.expr(34)
                        pass

                    elif la_ == 6:
                        localctx = DMFParser.Is_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 474
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 480
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [DMFParser.T__37]:
                            self.state = 475
                            self.match(DMFParser.T__37)
                            self.state = 477
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                            if la_ == 1:
                                self.state = 476
                                self.match(DMFParser.NOT)


                            pass
                        elif token in [DMFParser.ISNT]:
                            self.state = 479
                            self.match(DMFParser.ISNT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 482
                        localctx.pred = self.expr(32)
                        pass

                    elif la_ == 7:
                        localctx = DMFParser.And_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 483
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 484
                        self.match(DMFParser.T__40)
                        self.state = 485
                        localctx.rhs = self.expr(27)
                        pass

                    elif la_ == 8:
                        localctx = DMFParser.Or_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 486
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 487
                        self.match(DMFParser.T__41)
                        self.state = 488
                        localctx.rhs = self.expr(26)
                        pass

                    elif la_ == 9:
                        localctx = DMFParser.Drop_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 489
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 490
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__48 or _la==DMFParser.T__49):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 491
                        localctx.loc = self.expr(17)
                        pass

                    elif la_ == 10:
                        localctx = DMFParser.Injection_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 492
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 493
                        self.match(DMFParser.INJECT)
                        self.state = 494
                        localctx.what = self.expr(16)
                        pass

                    elif la_ == 11:
                        localctx = DMFParser.Cond_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.first = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 495
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 496
                        self.match(DMFParser.T__0)
                        self.state = 497
                        localctx.cond = self.expr(0)
                        self.state = 498
                        self.match(DMFParser.T__1)
                        self.state = 499
                        localctx.second = self.expr(15)
                        pass

                    elif la_ == 12:
                        localctx = DMFParser.Attr_assign_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 501
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 502
                        self.match(DMFParser.ATTR)
                        self.state = 503
                        self.attr()
                        self.state = 504
                        self.match(DMFParser.ASSIGN)
                        self.state = 505
                        localctx.what = self.expr(6)
                        pass

                    elif la_ == 13:
                        localctx = DMFParser.Function_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.func = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 507
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 508
                        self.match(DMFParser.T__19)
                        self.state = 517
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (DMFParser.T__9 - 10)) | (1 << (DMFParser.T__10 - 10)) | (1 << (DMFParser.T__12 - 10)) | (1 << (DMFParser.T__13 - 10)) | (1 << (DMFParser.T__16 - 10)) | (1 << (DMFParser.T__19 - 10)) | (1 << (DMFParser.T__22 - 10)) | (1 << (DMFParser.T__23 - 10)) | (1 << (DMFParser.T__26 - 10)) | (1 << (DMFParser.T__27 - 10)) | (1 << (DMFParser.T__29 - 10)) | (1 << (DMFParser.T__30 - 10)) | (1 << (DMFParser.T__31 - 10)) | (1 << (DMFParser.T__33 - 10)) | (1 << (DMFParser.T__34 - 10)) | (1 << (DMFParser.T__38 - 10)) | (1 << (DMFParser.T__39 - 10)) | (1 << (DMFParser.T__42 - 10)) | (1 << (DMFParser.T__43 - 10)) | (1 << (DMFParser.T__45 - 10)) | (1 << (DMFParser.T__46 - 10)) | (1 << (DMFParser.T__47 - 10)) | (1 << (DMFParser.T__55 - 10)) | (1 << (DMFParser.T__58 - 10)) | (1 << (DMFParser.T__59 - 10)) | (1 << (DMFParser.T__60 - 10)) | (1 << (DMFParser.T__61 - 10)) | (1 << (DMFParser.T__62 - 10)) | (1 << (DMFParser.T__63 - 10)) | (1 << (DMFParser.T__64 - 10)) | (1 << (DMFParser.T__65 - 10)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (DMFParser.T__75 - 76)) | (1 << (DMFParser.T__76 - 76)) | (1 << (DMFParser.T__77 - 76)) | (1 << (DMFParser.T__79 - 76)) | (1 << (DMFParser.T__80 - 76)) | (1 << (DMFParser.T__81 - 76)) | (1 << (DMFParser.T__82 - 76)) | (1 << (DMFParser.T__83 - 76)) | (1 << (DMFParser.T__84 - 76)) | (1 << (DMFParser.T__85 - 76)) | (1 << (DMFParser.T__86 - 76)) | (1 << (DMFParser.T__87 - 76)) | (1 << (DMFParser.T__90 - 76)) | (1 << (DMFParser.T__91 - 76)) | (1 << (DMFParser.T__92 - 76)) | (1 << (DMFParser.T__93 - 76)) | (1 << (DMFParser.T__94 - 76)) | (1 << (DMFParser.T__95 - 76)) | (1 << (DMFParser.T__96 - 76)) | (1 << (DMFParser.T__97 - 76)) | (1 << (DMFParser.T__98 - 76)) | (1 << (DMFParser.T__99 - 76)) | (1 << (DMFParser.T__100 - 76)) | (1 << (DMFParser.T__101 - 76)) | (1 << (DMFParser.T__102 - 76)) | (1 << (DMFParser.T__103 - 76)) | (1 << (DMFParser.T__104 - 76)) | (1 << (DMFParser.T__105 - 76)) | (1 << (DMFParser.T__106 - 76)) | (1 << (DMFParser.T__107 - 76)) | (1 << (DMFParser.T__108 - 76)) | (1 << (DMFParser.T__109 - 76)) | (1 << (DMFParser.T__110 - 76)) | (1 << (DMFParser.T__111 - 76)) | (1 << (DMFParser.T__112 - 76)) | (1 << (DMFParser.T__113 - 76)) | (1 << (DMFParser.T__114 - 76)) | (1 << (DMFParser.T__115 - 76)) | (1 << (DMFParser.T__116 - 76)) | (1 << (DMFParser.T__117 - 76)) | (1 << (DMFParser.T__118 - 76)) | (1 << (DMFParser.T__119 - 76)) | (1 << (DMFParser.T__120 - 76)) | (1 << (DMFParser.T__121 - 76)) | (1 << (DMFParser.T__122 - 76)) | (1 << (DMFParser.T__123 - 76)) | (1 << (DMFParser.T__124 - 76)) | (1 << (DMFParser.T__125 - 76)) | (1 << (DMFParser.T__126 - 76)) | (1 << (DMFParser.T__127 - 76)) | (1 << (DMFParser.T__128 - 76)) | (1 << (DMFParser.T__129 - 76)) | (1 << (DMFParser.T__130 - 76)) | (1 << (DMFParser.T__131 - 76)) | (1 << (DMFParser.T__132 - 76)) | (1 << (DMFParser.T__133 - 76)) | (1 << (DMFParser.T__135 - 76)) | (1 << (DMFParser.T__136 - 76)) | (1 << (DMFParser.T__137 - 76)))) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (DMFParser.T__142 - 143)) | (1 << (DMFParser.T__147 - 143)) | (1 << (DMFParser.T__175 - 143)) | (1 << (DMFParser.T__176 - 143)) | (1 << (DMFParser.T__177 - 143)) | (1 << (DMFParser.T__178 - 143)) | (1 << (DMFParser.T__179 - 143)) | (1 << (DMFParser.T__180 - 143)) | (1 << (DMFParser.T__181 - 143)) | (1 << (DMFParser.T__184 - 143)) | (1 << (DMFParser.T__185 - 143)) | (1 << (DMFParser.T__186 - 143)) | (1 << (DMFParser.T__187 - 143)) | (1 << (DMFParser.T__188 - 143)) | (1 << (DMFParser.T__189 - 143)) | (1 << (DMFParser.T__190 - 143)) | (1 << (DMFParser.T__191 - 143)) | (1 << (DMFParser.T__192 - 143)) | (1 << (DMFParser.T__193 - 143)) | (1 << (DMFParser.T__194 - 143)) | (1 << (DMFParser.T__195 - 143)) | (1 << (DMFParser.T__196 - 143)) | (1 << (DMFParser.T__197 - 143)) | (1 << (DMFParser.T__198 - 143)) | (1 << (DMFParser.T__199 - 143)) | (1 << (DMFParser.T__200 - 143)) | (1 << (DMFParser.T__201 - 143)) | (1 << (DMFParser.T__202 - 143)) | (1 << (DMFParser.T__203 - 143)) | (1 << (DMFParser.T__204 - 143)) | (1 << (DMFParser.T__205 - 143)))) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (DMFParser.T__206 - 207)) | (1 << (DMFParser.T__207 - 207)) | (1 << (DMFParser.T__208 - 207)) | (1 << (DMFParser.T__209 - 207)) | (1 << (DMFParser.T__210 - 207)) | (1 << (DMFParser.T__217 - 207)) | (1 << (DMFParser.T__218 - 207)) | (1 << (DMFParser.T__219 - 207)) | (1 << (DMFParser.T__220 - 207)) | (1 << (DMFParser.T__221 - 207)) | (1 << (DMFParser.T__222 - 207)) | (1 << (DMFParser.T__223 - 207)) | (1 << (DMFParser.T__224 - 207)) | (1 << (DMFParser.T__225 - 207)) | (1 << (DMFParser.T__226 - 207)) | (1 << (DMFParser.T__227 - 207)) | (1 << (DMFParser.T__228 - 207)) | (1 << (DMFParser.T__229 - 207)) | (1 << (DMFParser.T__230 - 207)) | (1 << (DMFParser.T__231 - 207)) | (1 << (DMFParser.T__232 - 207)) | (1 << (DMFParser.T__233 - 207)) | (1 << (DMFParser.T__234 - 207)) | (1 << (DMFParser.T__235 - 207)) | (1 << (DMFParser.T__237 - 207)) | (1 << (DMFParser.T__238 - 207)) | (1 << (DMFParser.T__239 - 207)) | (1 << (DMFParser.T__240 - 207)) | (1 << (DMFParser.FUTURE - 207)) | (1 << (DMFParser.INTERACTIVE - 207)) | (1 << (DMFParser.NOT - 207)) | (1 << (DMFParser.OFF - 207)) | (1 << (DMFParser.ON - 207)) | (1 << (DMFParser.SUB - 207)) | (1 << (DMFParser.TOGGLE - 207)) | (1 << (DMFParser.MAYBE - 207)) | (1 << (DMFParser.ID - 207)) | (1 << (DMFParser.INT - 207)) | (1 << (DMFParser.FLOAT - 207)) | (1 << (DMFParser.STRING - 207)))) != 0):
                            self.state = 509
                            localctx._expr = self.expr(0)
                            localctx.args.append(localctx._expr)
                            self.state = 514
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==DMFParser.T__20:
                                self.state = 510
                                self.match(DMFParser.T__20)
                                self.state = 511
                                localctx._expr = self.expr(0)
                                localctx.args.append(localctx._expr)
                                self.state = 516
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 519
                        self.match(DMFParser.CLOSE_PAREN)
                        pass

                    elif la_ == 14:
                        localctx = DMFParser.Delta_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 520
                        if not self.precpred(self._ctx, 54):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 54)")
                        self.state = 521
                        self.direction()
                        pass

                    elif la_ == 15:
                        localctx = DMFParser.Magnitude_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 522
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 523
                        self.match(DMFParser.ATTR)
                        self.state = 524
                        self.match(DMFParser.T__24)
                        self.state = 525
                        self.match(DMFParser.T__9)
                        self.state = 526
                        self.dim_unit()
                        pass

                    elif la_ == 16:
                        localctx = DMFParser.Unit_string_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 527
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 528
                        self.match(DMFParser.T__25)
                        self.state = 530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.T__26:
                            self.state = 529
                            self.match(DMFParser.T__26)


                        self.state = 532
                        self.match(DMFParser.T__27)
                        self.state = 533
                        self.match(DMFParser.T__9)
                        self.state = 534
                        self.dim_unit()
                        pass

                    elif la_ == 17:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 535
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 536
                        self.match(DMFParser.ATTR)
                        self.state = 537
                        self.attr()
                        self.state = 539
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                        if la_ == 1:
                            self.state = 538
                            self.existence()


                        pass

                    elif la_ == 18:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 541
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 542
                        self.match(DMFParser.ATTR)
                        self.state = 544
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.MAYBE:
                            self.state = 543
                            self.match(DMFParser.MAYBE)


                        self.state = 546
                        self.attr()
                        pass

                    elif la_ == 19:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 547
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 548
                        self.match(DMFParser.ATTR)
                        self.state = 549
                        self.match(DMFParser.T__19)
                        self.state = 550
                        self.match(DMFParser.MAYBE)
                        self.state = 551
                        self.match(DMFParser.CLOSE_PAREN)
                        self.state = 552
                        self.attr()
                        pass

                    elif la_ == 20:
                        localctx = DMFParser.Existence_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.val = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 553
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 554
                        self.existence()
                        pass

                    elif la_ == 21:
                        localctx = DMFParser.Turn_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.start_dir = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 555
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 556
                        self.match(DMFParser.T__28)
                        self.state = 557
                        self.turn()
                        pass

                    elif la_ == 22:
                        localctx = DMFParser.N_rc_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 558
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 559
                        self.rc(0)
                        pass

                    elif la_ == 23:
                        localctx = DMFParser.Unit_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 560
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 561
                        self.dim_unit()
                        pass

                    elif la_ == 24:
                        localctx = DMFParser.Unit_recip_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 562
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 563
                        self.match(DMFParser.T__31)
                        self.state = 564
                        self.dim_unit()
                        pass

                    elif la_ == 25:
                        localctx = DMFParser.Temperature_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 565
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 566
                        self.match(DMFParser.T__32)
                        pass

                    elif la_ == 26:
                        localctx = DMFParser.Has_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 567
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 568
                        self.possession()
                        self.state = 569
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__22 or _la==DMFParser.T__26):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 570
                        self.attr()
                        pass

                    elif la_ == 27:
                        localctx = DMFParser.Index_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 572
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 573
                        self.match(DMFParser.T__14)
                        self.state = 574
                        localctx.which = self.expr(0)
                        self.state = 575
                        self.match(DMFParser.CLOSE_BRACKET)
                        pass

             
                self.state = 581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExistenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_existence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence" ):
                listener.enterExistence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence" ):
                listener.exitExistence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence" ):
                return visitor.visitExistence(self)
            else:
                return visitor.visitChildren(self)




    def existence(self):

        localctx = DMFParser.ExistenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_existence)
        try:
            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.match(DMFParser.T__50)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.match(DMFParser.T__51)
                self.state = 585
                self.match(DMFParser.NOT)
                self.state = 586
                self.match(DMFParser.T__52)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 588
                self.match(DMFParser.T__53)
                self.state = 589
                self.match(DMFParser.T__52)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 591
                self.match(DMFParser.T__54)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 593
                self.match(DMFParser.T__37)
                self.state = 594
                self.match(DMFParser.NOT)
                self.state = 595
                self.match(DMFParser.T__55)
                localctx.polarity=True
                pass
            elif token in [DMFParser.ISNT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 597
                self.match(DMFParser.ISNT)
                self.state = 598
                self.match(DMFParser.T__55)
                localctx.polarity=True
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_possession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossession" ):
                listener.enterPossession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossession" ):
                listener.exitPossession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPossession" ):
                return visitor.visitPossession(self)
            else:
                return visitor.visitChildren(self)




    def possession(self):

        localctx = DMFParser.PossessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_possession)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.match(DMFParser.T__56)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.match(DMFParser.T__51)
                self.state = 605
                self.match(DMFParser.NOT)
                self.state = 606
                self.match(DMFParser.T__57)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.match(DMFParser.T__53)
                self.state = 609
                self.match(DMFParser.T__57)
                localctx.polarity=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReagentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None


        def getRuleIndex(self):
            return DMFParser.RULE_reagent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent" ):
                listener.enterReagent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent" ):
                listener.exitReagent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent" ):
                return visitor.visitReagent(self)
            else:
                return visitor.visitChildren(self)




    def reagent(self):

        localctx = DMFParser.ReagentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reagent)
        try:
            self.state = 617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.match(DMFParser.T__58)
                localctx.r = unknown_reagent
                pass
            elif token in [DMFParser.T__59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.match(DMFParser.T__59)
                localctx.r = waste_reagent
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = DMFParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.state = 631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__13, DMFParser.T__60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__13 or _la==DMFParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__12, DMFParser.T__61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__12 or _la==DMFParser.T__61):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.DOWN
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__62, DMFParser.T__63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 625
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__62 or _la==DMFParser.T__63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.LEFT
                localctx.verticalp=False
                pass
            elif token in [DMFParser.T__64, DMFParser.T__65]:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__64 or _la==DMFParser.T__65):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TurnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None


        def getRuleIndex(self):
            return DMFParser.RULE_turn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn" ):
                listener.enterTurn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn" ):
                listener.exitTurn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn" ):
                return visitor.visitTurn(self)
            else:
                return visitor.visitChildren(self)




    def turn(self):

        localctx = DMFParser.TurnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_turn)
        self._la = 0 # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__64, DMFParser.T__66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__64 or _la==DMFParser.T__66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.RIGHT
                pass
            elif token in [DMFParser.T__62, DMFParser.T__67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__62 or _la==DMFParser.T__67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.LEFT
                pass
            elif token in [DMFParser.T__68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 637
                self.match(DMFParser.T__68)
                localctx.t = Turn.AROUND
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, n:int=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None
            self.d = None
            self.verticalp = None
            self.n = n


        def getRuleIndex(self):
            return DMFParser.RULE_rc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRc" ):
                listener.enterRc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRc" ):
                listener.exitRc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRc" ):
                return visitor.visitRc(self)
            else:
                return visitor.visitChildren(self)




    def rc(self, n:int):

        localctx = DMFParser.RcContext(self, self._ctx, self.state, n)
        self.enterRule(localctx, 34, self.RULE_rc)
        self._la = 0 # Token type
        try:
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 642
                self.match(DMFParser.T__69)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.match(DMFParser.T__70)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 648
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 649
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__71 or _la==DMFParser.T__72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 652
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__73 or _la==DMFParser.T__74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AxisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_axis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxis" ):
                listener.enterAxis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxis" ):
                listener.exitAxis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAxis" ):
                return visitor.visitAxis(self)
            else:
                return visitor.visitChildren(self)




    def axis(self):

        localctx = DMFParser.AxisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_axis)
        self._la = 0 # Token type
        try:
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.match(DMFParser.T__69)
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__71, DMFParser.T__72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__71 or _la==DMFParser.T__72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_def(self):
            return self.getTypedRuleContext(DMFParser.Macro_defContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_declaration" ):
                listener.enterMacro_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_declaration" ):
                listener.exitMacro_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_declaration" ):
                return visitor.visitMacro_declaration(self)
            else:
                return visitor.visitChildren(self)




    def macro_declaration(self):

        localctx = DMFParser.Macro_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_macro_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.macro_def()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_header(self):
            return self.getTypedRuleContext(DMFParser.Macro_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def" ):
                listener.enterMacro_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def" ):
                listener.exitMacro_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def" ):
                return visitor.visitMacro_def(self)
            else:
                return visitor.visitChildren(self)




    def macro_def(self):

        localctx = DMFParser.Macro_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_macro_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.macro_header()
            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2, DMFParser.T__4]:
                self.state = 666
                self.compound()
                pass
            elif token in [DMFParser.INJECT]:
                self.state = 667
                self.match(DMFParser.INJECT)
                self.state = 668
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.called = None # NameContext
            self.ret_type = None # Value_typeContext

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ParamContext)
            else:
                return self.getTypedRuleContext(DMFParser.ParamContext,i)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_header" ):
                listener.enterMacro_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_header" ):
                listener.exitMacro_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_header" ):
                return visitor.visitMacro_header(self)
            else:
                return visitor.visitChildren(self)




    def macro_header(self):

        localctx = DMFParser.Macro_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_macro_header)
        self._la = 0 # Token type
        try:
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__75, DMFParser.T__76, DMFParser.T__77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                _la = self._input.LA(1)
                if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (DMFParser.T__75 - 76)) | (1 << (DMFParser.T__76 - 76)) | (1 << (DMFParser.T__77 - 76)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__55))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (DMFParser.T__90 - 91)) | (1 << (DMFParser.T__91 - 91)) | (1 << (DMFParser.T__92 - 91)) | (1 << (DMFParser.T__93 - 91)) | (1 << (DMFParser.T__94 - 91)) | (1 << (DMFParser.T__95 - 91)) | (1 << (DMFParser.T__96 - 91)) | (1 << (DMFParser.T__97 - 91)) | (1 << (DMFParser.T__99 - 91)) | (1 << (DMFParser.T__105 - 91)) | (1 << (DMFParser.T__112 - 91)) | (1 << (DMFParser.T__114 - 91)) | (1 << (DMFParser.T__119 - 91)) | (1 << (DMFParser.T__120 - 91)) | (1 << (DMFParser.T__123 - 91)) | (1 << (DMFParser.T__126 - 91)) | (1 << (DMFParser.T__130 - 91)) | (1 << (DMFParser.T__135 - 91)) | (1 << (DMFParser.T__137 - 91)) | (1 << (DMFParser.T__142 - 91)) | (1 << (DMFParser.T__147 - 91)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                    self.state = 672
                    localctx.called = self.name()


                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 675
                    self.match(DMFParser.T__19)
                    self.state = 684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (DMFParser.T__86 - 87)) | (1 << (DMFParser.T__90 - 87)) | (1 << (DMFParser.T__91 - 87)) | (1 << (DMFParser.T__92 - 87)) | (1 << (DMFParser.T__93 - 87)) | (1 << (DMFParser.T__94 - 87)) | (1 << (DMFParser.T__95 - 87)) | (1 << (DMFParser.T__96 - 87)) | (1 << (DMFParser.T__97 - 87)) | (1 << (DMFParser.T__98 - 87)) | (1 << (DMFParser.T__99 - 87)) | (1 << (DMFParser.T__100 - 87)) | (1 << (DMFParser.T__101 - 87)) | (1 << (DMFParser.T__102 - 87)) | (1 << (DMFParser.T__103 - 87)) | (1 << (DMFParser.T__104 - 87)) | (1 << (DMFParser.T__105 - 87)) | (1 << (DMFParser.T__106 - 87)) | (1 << (DMFParser.T__107 - 87)) | (1 << (DMFParser.T__108 - 87)) | (1 << (DMFParser.T__109 - 87)) | (1 << (DMFParser.T__110 - 87)) | (1 << (DMFParser.T__111 - 87)) | (1 << (DMFParser.T__112 - 87)) | (1 << (DMFParser.T__113 - 87)) | (1 << (DMFParser.T__114 - 87)) | (1 << (DMFParser.T__115 - 87)) | (1 << (DMFParser.T__116 - 87)) | (1 << (DMFParser.T__117 - 87)) | (1 << (DMFParser.T__118 - 87)) | (1 << (DMFParser.T__119 - 87)) | (1 << (DMFParser.T__120 - 87)) | (1 << (DMFParser.T__121 - 87)) | (1 << (DMFParser.T__122 - 87)) | (1 << (DMFParser.T__123 - 87)) | (1 << (DMFParser.T__124 - 87)) | (1 << (DMFParser.T__125 - 87)) | (1 << (DMFParser.T__126 - 87)) | (1 << (DMFParser.T__127 - 87)) | (1 << (DMFParser.T__128 - 87)) | (1 << (DMFParser.T__129 - 87)) | (1 << (DMFParser.T__130 - 87)) | (1 << (DMFParser.T__131 - 87)) | (1 << (DMFParser.T__132 - 87)) | (1 << (DMFParser.T__133 - 87)) | (1 << (DMFParser.T__135 - 87)) | (1 << (DMFParser.T__136 - 87)) | (1 << (DMFParser.T__137 - 87)) | (1 << (DMFParser.T__142 - 87)) | (1 << (DMFParser.T__147 - 87)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.FUTURE - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.MAYBE - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                        self.state = 676
                        self.param()
                        self.state = 681
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 677
                            self.match(DMFParser.T__20)
                            self.state = 678
                            self.param()
                            self.state = 683
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 686
                    self.match(DMFParser.CLOSE_PAREN)


                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__78:
                    self.state = 689
                    self.match(DMFParser.T__78)
                    self.state = 690
                    localctx.ret_type = self.value_type()


                pass
            elif token in [DMFParser.T__79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.match(DMFParser.T__79)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 694
                    self.match(DMFParser.T__19)
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (DMFParser.T__86 - 87)) | (1 << (DMFParser.T__90 - 87)) | (1 << (DMFParser.T__91 - 87)) | (1 << (DMFParser.T__92 - 87)) | (1 << (DMFParser.T__93 - 87)) | (1 << (DMFParser.T__94 - 87)) | (1 << (DMFParser.T__95 - 87)) | (1 << (DMFParser.T__96 - 87)) | (1 << (DMFParser.T__97 - 87)) | (1 << (DMFParser.T__98 - 87)) | (1 << (DMFParser.T__99 - 87)) | (1 << (DMFParser.T__100 - 87)) | (1 << (DMFParser.T__101 - 87)) | (1 << (DMFParser.T__102 - 87)) | (1 << (DMFParser.T__103 - 87)) | (1 << (DMFParser.T__104 - 87)) | (1 << (DMFParser.T__105 - 87)) | (1 << (DMFParser.T__106 - 87)) | (1 << (DMFParser.T__107 - 87)) | (1 << (DMFParser.T__108 - 87)) | (1 << (DMFParser.T__109 - 87)) | (1 << (DMFParser.T__110 - 87)) | (1 << (DMFParser.T__111 - 87)) | (1 << (DMFParser.T__112 - 87)) | (1 << (DMFParser.T__113 - 87)) | (1 << (DMFParser.T__114 - 87)) | (1 << (DMFParser.T__115 - 87)) | (1 << (DMFParser.T__116 - 87)) | (1 << (DMFParser.T__117 - 87)) | (1 << (DMFParser.T__118 - 87)) | (1 << (DMFParser.T__119 - 87)) | (1 << (DMFParser.T__120 - 87)) | (1 << (DMFParser.T__121 - 87)) | (1 << (DMFParser.T__122 - 87)) | (1 << (DMFParser.T__123 - 87)) | (1 << (DMFParser.T__124 - 87)) | (1 << (DMFParser.T__125 - 87)) | (1 << (DMFParser.T__126 - 87)) | (1 << (DMFParser.T__127 - 87)) | (1 << (DMFParser.T__128 - 87)) | (1 << (DMFParser.T__129 - 87)) | (1 << (DMFParser.T__130 - 87)) | (1 << (DMFParser.T__131 - 87)) | (1 << (DMFParser.T__132 - 87)) | (1 << (DMFParser.T__133 - 87)) | (1 << (DMFParser.T__135 - 87)) | (1 << (DMFParser.T__136 - 87)) | (1 << (DMFParser.T__137 - 87)) | (1 << (DMFParser.T__142 - 87)) | (1 << (DMFParser.T__147 - 87)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.FUTURE - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.MAYBE - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                        self.state = 695
                        self.param()
                        self.state = 700
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 696
                            self.match(DMFParser.T__20)
                            self.state = 697
                            self.param()
                            self.state = 702
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 705
                    self.match(DMFParser.CLOSE_PAREN)


                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__78:
                    self.state = 708
                    self.match(DMFParser.T__78)
                    self.state = 709
                    localctx.ret_type = self.value_type()


                pass
            elif token in [DMFParser.T__80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 712
                self.match(DMFParser.T__80)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__55))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (DMFParser.T__90 - 91)) | (1 << (DMFParser.T__91 - 91)) | (1 << (DMFParser.T__92 - 91)) | (1 << (DMFParser.T__93 - 91)) | (1 << (DMFParser.T__94 - 91)) | (1 << (DMFParser.T__95 - 91)) | (1 << (DMFParser.T__96 - 91)) | (1 << (DMFParser.T__97 - 91)) | (1 << (DMFParser.T__99 - 91)) | (1 << (DMFParser.T__105 - 91)) | (1 << (DMFParser.T__112 - 91)) | (1 << (DMFParser.T__114 - 91)) | (1 << (DMFParser.T__119 - 91)) | (1 << (DMFParser.T__120 - 91)) | (1 << (DMFParser.T__123 - 91)) | (1 << (DMFParser.T__126 - 91)) | (1 << (DMFParser.T__130 - 91)) | (1 << (DMFParser.T__135 - 91)) | (1 << (DMFParser.T__137 - 91)) | (1 << (DMFParser.T__142 - 91)) | (1 << (DMFParser.T__147 - 91)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                    self.state = 713
                    localctx.called = self.name()


                pass
            elif token in [DMFParser.T__81, DMFParser.T__82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 716
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__81 or _la==DMFParser.T__82):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__55))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (DMFParser.T__90 - 91)) | (1 << (DMFParser.T__91 - 91)) | (1 << (DMFParser.T__92 - 91)) | (1 << (DMFParser.T__93 - 91)) | (1 << (DMFParser.T__94 - 91)) | (1 << (DMFParser.T__95 - 91)) | (1 << (DMFParser.T__96 - 91)) | (1 << (DMFParser.T__97 - 91)) | (1 << (DMFParser.T__99 - 91)) | (1 << (DMFParser.T__105 - 91)) | (1 << (DMFParser.T__112 - 91)) | (1 << (DMFParser.T__114 - 91)) | (1 << (DMFParser.T__119 - 91)) | (1 << (DMFParser.T__120 - 91)) | (1 << (DMFParser.T__123 - 91)) | (1 << (DMFParser.T__126 - 91)) | (1 << (DMFParser.T__130 - 91)) | (1 << (DMFParser.T__135 - 91)) | (1 << (DMFParser.T__137 - 91)) | (1 << (DMFParser.T__142 - 91)) | (1 << (DMFParser.T__147 - 91)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                    self.state = 717
                    localctx.called = self.name()


                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 720
                    self.match(DMFParser.T__19)
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (DMFParser.T__86 - 87)) | (1 << (DMFParser.T__90 - 87)) | (1 << (DMFParser.T__91 - 87)) | (1 << (DMFParser.T__92 - 87)) | (1 << (DMFParser.T__93 - 87)) | (1 << (DMFParser.T__94 - 87)) | (1 << (DMFParser.T__95 - 87)) | (1 << (DMFParser.T__96 - 87)) | (1 << (DMFParser.T__97 - 87)) | (1 << (DMFParser.T__98 - 87)) | (1 << (DMFParser.T__99 - 87)) | (1 << (DMFParser.T__100 - 87)) | (1 << (DMFParser.T__101 - 87)) | (1 << (DMFParser.T__102 - 87)) | (1 << (DMFParser.T__103 - 87)) | (1 << (DMFParser.T__104 - 87)) | (1 << (DMFParser.T__105 - 87)) | (1 << (DMFParser.T__106 - 87)) | (1 << (DMFParser.T__107 - 87)) | (1 << (DMFParser.T__108 - 87)) | (1 << (DMFParser.T__109 - 87)) | (1 << (DMFParser.T__110 - 87)) | (1 << (DMFParser.T__111 - 87)) | (1 << (DMFParser.T__112 - 87)) | (1 << (DMFParser.T__113 - 87)) | (1 << (DMFParser.T__114 - 87)) | (1 << (DMFParser.T__115 - 87)) | (1 << (DMFParser.T__116 - 87)) | (1 << (DMFParser.T__117 - 87)) | (1 << (DMFParser.T__118 - 87)) | (1 << (DMFParser.T__119 - 87)) | (1 << (DMFParser.T__120 - 87)) | (1 << (DMFParser.T__121 - 87)) | (1 << (DMFParser.T__122 - 87)) | (1 << (DMFParser.T__123 - 87)) | (1 << (DMFParser.T__124 - 87)) | (1 << (DMFParser.T__125 - 87)) | (1 << (DMFParser.T__126 - 87)) | (1 << (DMFParser.T__127 - 87)) | (1 << (DMFParser.T__128 - 87)) | (1 << (DMFParser.T__129 - 87)) | (1 << (DMFParser.T__130 - 87)) | (1 << (DMFParser.T__131 - 87)) | (1 << (DMFParser.T__132 - 87)) | (1 << (DMFParser.T__133 - 87)) | (1 << (DMFParser.T__135 - 87)) | (1 << (DMFParser.T__136 - 87)) | (1 << (DMFParser.T__137 - 87)) | (1 << (DMFParser.T__142 - 87)) | (1 << (DMFParser.T__147 - 87)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.FUTURE - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.MAYBE - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                        self.state = 721
                        self.param()
                        self.state = 726
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 722
                            self.match(DMFParser.T__20)
                            self.state = 723
                            self.param()
                            self.state = 728
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 731
                    self.match(DMFParser.CLOSE_PAREN)


                self.state = 734
                self.match(DMFParser.T__78)
                self.state = 735
                localctx.ret_type = self.value_type()
                pass
            elif token in [DMFParser.T__83, DMFParser.T__84]:
                self.enterOuterAlt(localctx, 5)
                self.state = 736
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__83 or _la==DMFParser.T__84):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__55))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (DMFParser.T__90 - 91)) | (1 << (DMFParser.T__91 - 91)) | (1 << (DMFParser.T__92 - 91)) | (1 << (DMFParser.T__93 - 91)) | (1 << (DMFParser.T__94 - 91)) | (1 << (DMFParser.T__95 - 91)) | (1 << (DMFParser.T__96 - 91)) | (1 << (DMFParser.T__97 - 91)) | (1 << (DMFParser.T__99 - 91)) | (1 << (DMFParser.T__105 - 91)) | (1 << (DMFParser.T__112 - 91)) | (1 << (DMFParser.T__114 - 91)) | (1 << (DMFParser.T__119 - 91)) | (1 << (DMFParser.T__120 - 91)) | (1 << (DMFParser.T__123 - 91)) | (1 << (DMFParser.T__126 - 91)) | (1 << (DMFParser.T__130 - 91)) | (1 << (DMFParser.T__135 - 91)) | (1 << (DMFParser.T__137 - 91)) | (1 << (DMFParser.T__142 - 91)) | (1 << (DMFParser.T__147 - 91)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                    self.state = 737
                    localctx.called = self.name()


                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 740
                    self.match(DMFParser.T__19)
                    self.state = 749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (DMFParser.T__86 - 87)) | (1 << (DMFParser.T__90 - 87)) | (1 << (DMFParser.T__91 - 87)) | (1 << (DMFParser.T__92 - 87)) | (1 << (DMFParser.T__93 - 87)) | (1 << (DMFParser.T__94 - 87)) | (1 << (DMFParser.T__95 - 87)) | (1 << (DMFParser.T__96 - 87)) | (1 << (DMFParser.T__97 - 87)) | (1 << (DMFParser.T__98 - 87)) | (1 << (DMFParser.T__99 - 87)) | (1 << (DMFParser.T__100 - 87)) | (1 << (DMFParser.T__101 - 87)) | (1 << (DMFParser.T__102 - 87)) | (1 << (DMFParser.T__103 - 87)) | (1 << (DMFParser.T__104 - 87)) | (1 << (DMFParser.T__105 - 87)) | (1 << (DMFParser.T__106 - 87)) | (1 << (DMFParser.T__107 - 87)) | (1 << (DMFParser.T__108 - 87)) | (1 << (DMFParser.T__109 - 87)) | (1 << (DMFParser.T__110 - 87)) | (1 << (DMFParser.T__111 - 87)) | (1 << (DMFParser.T__112 - 87)) | (1 << (DMFParser.T__113 - 87)) | (1 << (DMFParser.T__114 - 87)) | (1 << (DMFParser.T__115 - 87)) | (1 << (DMFParser.T__116 - 87)) | (1 << (DMFParser.T__117 - 87)) | (1 << (DMFParser.T__118 - 87)) | (1 << (DMFParser.T__119 - 87)) | (1 << (DMFParser.T__120 - 87)) | (1 << (DMFParser.T__121 - 87)) | (1 << (DMFParser.T__122 - 87)) | (1 << (DMFParser.T__123 - 87)) | (1 << (DMFParser.T__124 - 87)) | (1 << (DMFParser.T__125 - 87)) | (1 << (DMFParser.T__126 - 87)) | (1 << (DMFParser.T__127 - 87)) | (1 << (DMFParser.T__128 - 87)) | (1 << (DMFParser.T__129 - 87)) | (1 << (DMFParser.T__130 - 87)) | (1 << (DMFParser.T__131 - 87)) | (1 << (DMFParser.T__132 - 87)) | (1 << (DMFParser.T__133 - 87)) | (1 << (DMFParser.T__135 - 87)) | (1 << (DMFParser.T__136 - 87)) | (1 << (DMFParser.T__137 - 87)) | (1 << (DMFParser.T__142 - 87)) | (1 << (DMFParser.T__147 - 87)))) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & ((1 << (DMFParser.T__175 - 176)) | (1 << (DMFParser.T__176 - 176)) | (1 << (DMFParser.T__177 - 176)) | (1 << (DMFParser.T__178 - 176)) | (1 << (DMFParser.T__179 - 176)) | (1 << (DMFParser.T__180 - 176)) | (1 << (DMFParser.T__181 - 176)) | (1 << (DMFParser.T__184 - 176)) | (1 << (DMFParser.T__185 - 176)) | (1 << (DMFParser.T__186 - 176)) | (1 << (DMFParser.T__187 - 176)) | (1 << (DMFParser.T__188 - 176)) | (1 << (DMFParser.T__189 - 176)) | (1 << (DMFParser.T__190 - 176)) | (1 << (DMFParser.T__191 - 176)) | (1 << (DMFParser.T__192 - 176)) | (1 << (DMFParser.T__193 - 176)) | (1 << (DMFParser.T__194 - 176)) | (1 << (DMFParser.T__195 - 176)) | (1 << (DMFParser.T__196 - 176)) | (1 << (DMFParser.T__197 - 176)) | (1 << (DMFParser.T__198 - 176)) | (1 << (DMFParser.T__199 - 176)) | (1 << (DMFParser.T__200 - 176)) | (1 << (DMFParser.T__201 - 176)) | (1 << (DMFParser.T__202 - 176)) | (1 << (DMFParser.T__203 - 176)) | (1 << (DMFParser.T__204 - 176)) | (1 << (DMFParser.T__205 - 176)) | (1 << (DMFParser.T__206 - 176)) | (1 << (DMFParser.T__207 - 176)) | (1 << (DMFParser.T__208 - 176)) | (1 << (DMFParser.T__209 - 176)) | (1 << (DMFParser.T__210 - 176)) | (1 << (DMFParser.T__229 - 176)) | (1 << (DMFParser.T__230 - 176)) | (1 << (DMFParser.T__231 - 176)) | (1 << (DMFParser.T__232 - 176)) | (1 << (DMFParser.T__233 - 176)) | (1 << (DMFParser.T__234 - 176)) | (1 << (DMFParser.T__235 - 176)) | (1 << (DMFParser.T__237 - 176)) | (1 << (DMFParser.T__238 - 176)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (DMFParser.T__239 - 240)) | (1 << (DMFParser.T__240 - 240)) | (1 << (DMFParser.FUTURE - 240)) | (1 << (DMFParser.INTERACTIVE - 240)) | (1 << (DMFParser.OFF - 240)) | (1 << (DMFParser.ON - 240)) | (1 << (DMFParser.MAYBE - 240)) | (1 << (DMFParser.ID - 240)))) != 0):
                        self.state = 741
                        self.param()
                        self.state = 746
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 742
                            self.match(DMFParser.T__20)
                            self.state = 743
                            self.param()
                            self.state = 748
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 751
                    self.match(DMFParser.CLOSE_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self.deprecated = None
            self._value_type = None # Value_typeContext
            self._INT = None # Token
            self._name = None # NameContext

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = DMFParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__22 or _la==DMFParser.T__26:
                    self.state = 756
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__22 or _la==DMFParser.T__26):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 759
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 762
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                self.state = 764
                localctx._INT = self.match(DMFParser.INT)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 767
                localctx._value_type = self.value_type()
                self.state = 768
                localctx._name = self.name()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                localctx._name = self.name()
                self.state = 773
                self.match(DMFParser.INJECT)
                self.state = 774
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.deprecated=True
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_arg_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def TOGGLE(self):
            return self.getToken(DMFParser.TOGGLE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_no_arg_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_arg_action" ):
                listener.enterNo_arg_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_arg_action" ):
                listener.exitNo_arg_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_arg_action" ):
                return visitor.visitNo_arg_action(self)
            else:
                return visitor.visitChildren(self)




    def no_arg_action(self):

        localctx = DMFParser.No_arg_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_no_arg_action)
        self._la = 0 # Token type
        try:
            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.match(DMFParser.T__85)
                self.state = 782
                self.match(DMFParser.ON)
                localctx.which="TURN-ON"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(DMFParser.T__85)
                self.state = 785
                self.match(DMFParser.OFF)
                localctx.which="TURN-OFF"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 787
                self.match(DMFParser.TOGGLE)
                self.state = 789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 788
                    self.match(DMFParser.T__86)


                localctx.which="TOGGLE"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 792
                self.match(DMFParser.T__87)
                self.state = 798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 793
                    self.match(DMFParser.T__88)
                    self.state = 795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__33:
                        self.state = 794
                        self.match(DMFParser.T__33)


                    self.state = 797
                    self.match(DMFParser.T__89)


                localctx.which="REMOVE-FROM-BOARD"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 801
                self.match(DMFParser.T__90)
                self.state = 802
                self.match(DMFParser.T__91)
                localctx.which="RESET PADS"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 804
                self.match(DMFParser.T__90)
                self.state = 805
                self.match(DMFParser.T__92)
                localctx.which="RESET MAGNETS"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 807
                self.match(DMFParser.T__90)
                self.state = 811
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__93]:
                    self.state = 808
                    self.match(DMFParser.T__93)
                    pass
                elif token in [DMFParser.T__94]:
                    self.state = 809
                    self.match(DMFParser.T__94)
                    self.state = 810
                    self.match(DMFParser.T__95)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.which="RESET HEATERS"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 814
                self.match(DMFParser.T__90)
                self.state = 815
                self.match(DMFParser.T__96)
                localctx.which="RESET CHILLERS"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 817
                self.match(DMFParser.T__90)
                self.state = 818
                self.match(DMFParser.T__97)
                localctx.which="RESET ALL"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_future_type = None # Not_future_typeContext

        def FUTURE(self):
            return self.getToken(DMFParser.FUTURE, 0)

        def not_future_type(self):
            return self.getTypedRuleContext(DMFParser.Not_future_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_type" ):
                listener.enterValue_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_type" ):
                listener.exitValue_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_type" ):
                return visitor.visitValue_type(self)
            else:
                return visitor.visitChildren(self)




    def value_type(self):

        localctx = DMFParser.Value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_value_type)
        try:
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.match(DMFParser.FUTURE)
                self.state = 823
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.match(DMFParser.T__19)
                self.state = 827
                self.match(DMFParser.FUTURE)
                self.state = 828
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 829
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_future_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_maybe_type = None # Not_maybe_typeContext

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)

        def not_maybe_type(self):
            return self.getTypedRuleContext(DMFParser.Not_maybe_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_not_future_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_future_type" ):
                listener.enterNot_future_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_future_type" ):
                listener.exitNot_future_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_future_type" ):
                return visitor.visitNot_future_type(self)
            else:
                return visitor.visitChildren(self)




    def not_future_type(self):

        localctx = DMFParser.Not_future_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_not_future_type)
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.MAYBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.match(DMFParser.MAYBE)
                self.state = 838
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.match(DMFParser.T__19)
                self.state = 842
                self.match(DMFParser.MAYBE)
                self.state = 843
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 844
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__27, DMFParser.T__29, DMFParser.T__30, DMFParser.T__34, DMFParser.T__47, DMFParser.T__86, DMFParser.T__94, DMFParser.T__98, DMFParser.T__99, DMFParser.T__100, DMFParser.T__101, DMFParser.T__102, DMFParser.T__103, DMFParser.T__104, DMFParser.T__106, DMFParser.T__107, DMFParser.T__108, DMFParser.T__109, DMFParser.T__110, DMFParser.T__111, DMFParser.T__113, DMFParser.T__114, DMFParser.T__115, DMFParser.T__116, DMFParser.T__117, DMFParser.T__118, DMFParser.T__121, DMFParser.T__122, DMFParser.T__123, DMFParser.T__124, DMFParser.T__125, DMFParser.T__127, DMFParser.T__128, DMFParser.T__129, DMFParser.T__131, DMFParser.T__132, DMFParser.T__133, DMFParser.T__136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_maybe_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sample_type = None # Sample_typeContext
            self._atomic_type = None # Atomic_typeContext

        def sample_type(self):
            return self.getTypedRuleContext(DMFParser.Sample_typeContext,0)


        def atomic_type(self):
            return self.getTypedRuleContext(DMFParser.Atomic_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_not_maybe_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_maybe_type" ):
                listener.enterNot_maybe_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_maybe_type" ):
                listener.exitNot_maybe_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_maybe_type" ):
                return visitor.visitNot_maybe_type(self)
            else:
                return visitor.visitChildren(self)




    def not_maybe_type(self):

        localctx = DMFParser.Not_maybe_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_not_maybe_type)
        try:
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                localctx._sample_type = self.sample_type()
                localctx.type=localctx._sample_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                localctx._atomic_type = self.atomic_type()
                localctx.type=localctx._atomic_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sampleable_type = None # Sampleable_typeContext

        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sample_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_type" ):
                listener.enterSample_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_type" ):
                listener.exitSample_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_type" ):
                return visitor.visitSample_type(self)
            else:
                return visitor.visitChildren(self)




    def sample_type(self):

        localctx = DMFParser.Sample_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sample_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            localctx._sampleable_type = self.sampleable_type()
            self.state = 861
            self.match(DMFParser.T__38)
            localctx.type=localctx._sampleable_type.type.sample
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._component_type = None # Component_typeContext
            self._sampleable_type = None # Sampleable_typeContext

        def component_type(self):
            return self.getTypedRuleContext(DMFParser.Component_typeContext,0)


        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_atomic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_type" ):
                listener.enterAtomic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_type" ):
                listener.exitAtomic_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_type" ):
                return visitor.visitAtomic_type(self)
            else:
                return visitor.visitChildren(self)




    def atomic_type(self):

        localctx = DMFParser.Atomic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_atomic_type)
        self._la = 0 # Token type
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(DMFParser.T__47)
                localctx.type=Type.DROP
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.match(DMFParser.T__27)
                localctx.type=Type.STRING
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.match(DMFParser.T__86)
                localctx.type=Type.BINARY_STATE
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 870
                self.match(DMFParser.T__98)
                localctx.type=Type.BINARY_CPT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 872
                self.match(DMFParser.T__99)
                localctx.type=Type.DELTA
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 874
                self.match(DMFParser.T__100)
                localctx.type=Type.MOTION
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 876
                self.match(DMFParser.T__101)
                localctx.type=Type.DELAY
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 878
                self.match(DMFParser.T__102)
                localctx.type=Type.BOOL
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 880
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.DIR
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 882
                self.match(DMFParser.T__34)
                localctx.type=Type.REAGENT
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 884
                self.match(DMFParser.T__103)
                localctx.type=Type.LIQUID
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 886
                self.match(DMFParser.T__104)
                self.state = 887
                self.match(DMFParser.T__105)
                localctx.type=Type.SENSOR_READING
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 889
                self.match(DMFParser.T__106)
                self.state = 890
                self.match(DMFParser.T__105)
                localctx.type=Type.ESELOG_READING
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 892
                localctx._component_type = self.component_type()
                localctx.type=localctx._component_type.type
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 895
                localctx._sampleable_type = self.sampleable_type()
                localctx.type=localctx._sampleable_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sampleable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._quantity_type = None # Quantity_typeContext

        def quantity_type(self):
            return self.getTypedRuleContext(DMFParser.Quantity_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sampleable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleable_type" ):
                listener.enterSampleable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleable_type" ):
                listener.exitSampleable_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleable_type" ):
                return visitor.visitSampleable_type(self)
            else:
                return visitor.visitChildren(self)




    def sampleable_type(self):

        localctx = DMFParser.Sampleable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sampleable_type)
        self._la = 0 # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(DMFParser.T__107)
                localctx.type=Type.INT
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__108 or _la==DMFParser.T__109):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.FLOAT
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__110 or _la==DMFParser.T__111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.match(DMFParser.T__112)


                localctx.type=Type.ABS_TEMP
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 909
                self.match(DMFParser.T__113)
                localctx.type=Type.TIMESTAMP
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 911
                localctx._quantity_type = self.quantity_type()
                localctx.type=localctx._quantity_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantity_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_quantity_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantity_type" ):
                listener.enterQuantity_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantity_type" ):
                listener.exitQuantity_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantity_type" ):
                return visitor.visitQuantity_type(self)
            else:
                return visitor.visitChildren(self)




    def quantity_type(self):

        localctx = DMFParser.Quantity_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_quantity_type)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(DMFParser.T__114)
                localctx.type=Type.TIME
                pass
            elif token in [DMFParser.T__115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(DMFParser.T__115)
                localctx.type=Time.FREQUENCY
                pass
            elif token in [DMFParser.T__116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 920
                self.match(DMFParser.T__116)
                localctx.type=Type.TICKS
                pass
            elif token in [DMFParser.T__117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 922
                self.match(DMFParser.T__117)
                localctx.type=Type.VOLUME
                pass
            elif token in [DMFParser.T__118]:
                self.enterOuterAlt(localctx, 5)
                self.state = 924
                self.match(DMFParser.T__118)
                localctx.type=Type.VOLTAGE
                pass
            elif token in [DMFParser.T__110, DMFParser.T__111]:
                self.enterOuterAlt(localctx, 6)
                self.state = 926
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__110 or _la==DMFParser.T__111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 927
                _la = self._input.LA(1)
                if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (DMFParser.T__99 - 100)) | (1 << (DMFParser.T__119 - 100)) | (1 << (DMFParser.T__120 - 100)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.REL_TEMP
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_component_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_type" ):
                listener.enterComponent_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_type" ):
                listener.exitComponent_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponent_type" ):
                return visitor.visitComponent_type(self)
            else:
                return visitor.visitChildren(self)




    def component_type(self):

        localctx = DMFParser.Component_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_component_type)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 931
                self.match(DMFParser.T__121)
                localctx.type=Type.PAD
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__122:
                    self.state = 933
                    self.match(DMFParser.T__122)


                self.state = 936
                self.match(DMFParser.T__123)
                localctx.type=Type.PIPETTING_TARGET
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.match(DMFParser.T__124)
                localctx.type=Type.WELL
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 940
                    self.match(DMFParser.T__125)
                    self.state = 941
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__112 or _la==DMFParser.T__126):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__125:
                        self.state = 942
                        self.match(DMFParser.T__125)


                    self.state = 945
                    self.match(DMFParser.T__127)
                    pass


                localctx.type=Type.EXTRACTION_POINT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 949
                self.match(DMFParser.T__124)
                self.state = 950
                self.match(DMFParser.T__121)
                localctx.type=Type.WELL_PAD
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__124:
                    self.state = 952
                    self.match(DMFParser.T__124)


                self.state = 955
                self.match(DMFParser.T__128)
                localctx.type=Type.WELL_GATE
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 960
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__129]:
                    self.state = 957
                    self.match(DMFParser.T__129)
                    pass
                elif token in [DMFParser.T__94]:
                    self.state = 958
                    self.match(DMFParser.T__94)
                    self.state = 959
                    self.match(DMFParser.T__130)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.type=Type.HEATER
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 963
                self.match(DMFParser.T__131)
                localctx.type=Type.CHILLER
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 965
                self.match(DMFParser.T__132)
                localctx.type=Type.MAGNET
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 967
                self.match(DMFParser.T__133)
                self.state = 968
                self.match(DMFParser.T__134)
                localctx.type=Type.POWER_SUPPLY
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 970
                self.match(DMFParser.T__133)
                self.state = 971
                self.match(DMFParser.T__135)
                localctx.type=Type.POWER_MODE
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 973
                self.match(DMFParser.T__136)
                localctx.type=Type.FAN
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 975
                self.match(DMFParser.T__104)
                localctx.type=Type.SENSOR
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 977
                self.match(DMFParser.T__106)
                localctx.type=Type.ESELOG
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dim_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unit = None


        def getRuleIndex(self):
            return DMFParser.RULE_dim_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDim_unit" ):
                listener.enterDim_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDim_unit" ):
                listener.exitDim_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDim_unit" ):
                return visitor.visitDim_unit(self)
            else:
                return visitor.visitChildren(self)




    def dim_unit(self):

        localctx = DMFParser.Dim_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dim_unit)
        self._la = 0 # Token type
        try:
            self.state = 1003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__137, DMFParser.T__138, DMFParser.T__139, DMFParser.T__140, DMFParser.T__141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                _la = self._input.LA(1)
                if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (DMFParser.T__137 - 138)) | (1 << (DMFParser.T__138 - 138)) | (1 << (DMFParser.T__139 - 138)) | (1 << (DMFParser.T__140 - 138)) | (1 << (DMFParser.T__141 - 138)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.sec
                pass
            elif token in [DMFParser.T__142, DMFParser.T__143, DMFParser.T__144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 983
                _la = self._input.LA(1)
                if not(((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (DMFParser.T__142 - 143)) | (1 << (DMFParser.T__143 - 143)) | (1 << (DMFParser.T__144 - 143)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.ms
                pass
            elif token in [DMFParser.T__145, DMFParser.T__146, DMFParser.T__147, DMFParser.T__148]:
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                _la = self._input.LA(1)
                if not(((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & ((1 << (DMFParser.T__145 - 146)) | (1 << (DMFParser.T__146 - 146)) | (1 << (DMFParser.T__147 - 146)) | (1 << (DMFParser.T__148 - 146)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.minutes
                pass
            elif token in [DMFParser.T__149, DMFParser.T__150, DMFParser.T__151, DMFParser.T__152]:
                self.enterOuterAlt(localctx, 4)
                self.state = 987
                _la = self._input.LA(1)
                if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (DMFParser.T__149 - 150)) | (1 << (DMFParser.T__150 - 150)) | (1 << (DMFParser.T__151 - 150)) | (1 << (DMFParser.T__152 - 150)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.hours
                pass
            elif token in [DMFParser.T__153, DMFParser.T__154, DMFParser.T__155, DMFParser.T__156, DMFParser.T__157, DMFParser.T__158]:
                self.enterOuterAlt(localctx, 5)
                self.state = 989
                _la = self._input.LA(1)
                if not(((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__158 - 154)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.uL
                pass
            elif token in [DMFParser.T__159, DMFParser.T__160, DMFParser.T__161, DMFParser.T__162, DMFParser.T__163, DMFParser.T__164]:
                self.enterOuterAlt(localctx, 6)
                self.state = 991
                _la = self._input.LA(1)
                if not(((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & ((1 << (DMFParser.T__159 - 160)) | (1 << (DMFParser.T__160 - 160)) | (1 << (DMFParser.T__161 - 160)) | (1 << (DMFParser.T__162 - 160)) | (1 << (DMFParser.T__163 - 160)) | (1 << (DMFParser.T__164 - 160)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.mL
                pass
            elif token in [DMFParser.T__116, DMFParser.T__165]:
                self.enterOuterAlt(localctx, 7)
                self.state = 993
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__165):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=ticks
                pass
            elif token in [DMFParser.T__47, DMFParser.T__166]:
                self.enterOuterAlt(localctx, 8)
                self.state = 995
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__47 or _la==DMFParser.T__166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=EnvRelativeUnit.DROP
                pass
            elif token in [DMFParser.T__167, DMFParser.T__168, DMFParser.T__169]:
                self.enterOuterAlt(localctx, 9)
                self.state = 997
                _la = self._input.LA(1)
                if not(((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (DMFParser.T__167 - 168)) | (1 << (DMFParser.T__168 - 168)) | (1 << (DMFParser.T__169 - 168)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.volts
                pass
            elif token in [DMFParser.T__170, DMFParser.T__171, DMFParser.T__172]:
                self.enterOuterAlt(localctx, 10)
                self.state = 999
                _la = self._input.LA(1)
                if not(((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (DMFParser.T__170 - 171)) | (1 << (DMFParser.T__171 - 171)) | (1 << (DMFParser.T__172 - 171)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.millivolts
                pass
            elif token in [DMFParser.T__173, DMFParser.T__174]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1001
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__173 or _la==DMFParser.T__174):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.hertz
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numbered_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None


        def getRuleIndex(self):
            return DMFParser.RULE_numbered_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_type" ):
                listener.enterNumbered_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_type" ):
                listener.exitNumbered_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_type" ):
                return visitor.visitNumbered_type(self)
            else:
                return visitor.visitChildren(self)




    def numbered_type(self):

        localctx = DMFParser.Numbered_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_numbered_type)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.match(DMFParser.T__124)
                localctx.kind=NumberedItem.WELL
                pass
            elif token in [DMFParser.T__94, DMFParser.T__129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__129]:
                    self.state = 1007
                    self.match(DMFParser.T__129)
                    pass
                elif token in [DMFParser.T__94]:
                    self.state = 1008
                    self.match(DMFParser.T__94)
                    self.state = 1009
                    self.match(DMFParser.T__130)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.kind=NumberedItem.HEATER
                pass
            elif token in [DMFParser.T__131]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.match(DMFParser.T__131)
                localctx.kind=NumberedItem.CHILLER
                pass
            elif token in [DMFParser.T__132]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1015
                self.match(DMFParser.T__132)
                localctx.kind=NumberedItem.MAGNET
                pass
            elif token in [DMFParser.T__125, DMFParser.T__127]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1017
                    self.match(DMFParser.T__125)
                    self.state = 1018
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__112 or _la==DMFParser.T__126):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__125:
                        self.state = 1019
                        self.match(DMFParser.T__125)


                    self.state = 1022
                    self.match(DMFParser.T__127)
                    pass


                localctx.kind=NumberedItem.EXTRACTION_POINT
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinimumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_minimum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinimum" ):
                listener.enterMinimum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinimum" ):
                listener.exitMinimum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinimum" ):
                return visitor.visitMinimum(self)
            else:
                return visitor.visitChildren(self)




    def minimum(self):

        localctx = DMFParser.MinimumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_minimum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__147 or _la==DMFParser.T__175):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaximumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_maximum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaximum" ):
                listener.enterMaximum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaximum" ):
                listener.exitMaximum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaximum" ):
                return visitor.visitMaximum(self)
            else:
                return visitor.visitChildren(self)




    def maximum(self):

        localctx = DMFParser.MaximumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_maximum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__176 or _la==DMFParser.T__177):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Min_maxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minimum(self):
            return self.getTypedRuleContext(DMFParser.MinimumContext,0)


        def maximum(self):
            return self.getTypedRuleContext(DMFParser.MaximumContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_min_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMin_max" ):
                listener.enterMin_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMin_max" ):
                listener.exitMin_max(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMin_max" ):
                return visitor.visitMin_max(self)
            else:
                return visitor.visitChildren(self)




    def min_max(self):

        localctx = DMFParser.Min_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_min_max)
        try:
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__147, DMFParser.T__175]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.minimum()
                pass
            elif token in [DMFParser.T__176, DMFParser.T__177]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.maximum()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = DMFParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.match(DMFParser.T__16)
                self.state = 1037
                self.match(DMFParser.T__121)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self.match(DMFParser.T__178)
                self.state = 1039
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__179 or _la==DMFParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(DMFParser.T__181)
                self.state = 1041
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__179 or _la==DMFParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1042
                self.match(DMFParser.T__16)
                self.state = 1043
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1044
                self.match(DMFParser.T__182)
                self.state = 1045
                self.match(DMFParser.T__183)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1046
                self.match(DMFParser.T__184)
                self.state = 1047
                self.match(DMFParser.T__185)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1048
                self.match(DMFParser.T__186)
                self.state = 1049
                self.match(DMFParser.T__185)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1050
                self.match(DMFParser.T__123)
                self.state = 1051
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__110 or _la==DMFParser.T__111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1052
                self.match(DMFParser.T__187)
                self.state = 1053
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__110 or _la==DMFParser.T__111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1054
                self.match(DMFParser.T__133)
                self.state = 1055
                self.match(DMFParser.T__134)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1056
                self.min_max()
                self.state = 1057
                self.match(DMFParser.T__118)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1059
                self.min_max()
                self.state = 1060
                _la = self._input.LA(1)
                if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (DMFParser.T__110 - 111)) | (1 << (DMFParser.T__111 - 111)) | (1 << (DMFParser.T__123 - 111)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__133:
                    self.state = 1062
                    self.match(DMFParser.T__133)


                self.state = 1065
                self.match(DMFParser.T__135)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1066
                self.match(DMFParser.T__94)
                self.state = 1067
                self.match(DMFParser.T__130)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1068
                self.match(DMFParser.T__188)
                self.state = 1069
                self.match(DMFParser.T__189)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1070
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1071
                self.match(DMFParser.T__191)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1072
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1073
                self.match(DMFParser.T__192)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1074
                self.match(DMFParser.T__193)
                self.state = 1076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1075
                    self.match(DMFParser.T__194)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1078
                self.match(DMFParser.T__195)
                self.state = 1080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1079
                    self.match(DMFParser.T__194)


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1082
                self.min_max()
                self.state = 1084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1083
                    self.match(DMFParser.T__194)


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1091
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__196, DMFParser.T__199]:
                    self.state = 1087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__196:
                        self.state = 1086
                        self.match(DMFParser.T__196)


                    pass
                elif token in [DMFParser.T__197]:
                    self.state = 1089
                    self.match(DMFParser.T__197)
                    pass
                elif token in [DMFParser.T__198]:
                    self.state = 1090
                    self.match(DMFParser.T__198)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1093
                self.match(DMFParser.T__199)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1094
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__200 or _la==DMFParser.T__201):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1095
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__202 or _la==DMFParser.T__203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1096
                self.match(DMFParser.T__204)
                self.state = 1097
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__205 or _la==DMFParser.T__206):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__207:
                    self.state = 1098
                    self.match(DMFParser.T__207)


                self.state = 1101
                self.match(DMFParser.T__208)
                self.state = 1102
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__209 or _la==DMFParser.T__210):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1103
                self.match(DMFParser.T__125)
                self.state = 1104
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__112 or _la==DMFParser.T__126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1105
                self.kwd_names()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1106
                self.match(DMFParser.T__47)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1107
                self.match(DMFParser.T__121)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1108
                self.match(DMFParser.T__124)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1109
                self.match(DMFParser.T__117)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1110
                self.match(DMFParser.T__34)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1111
                self.match(DMFParser.T__129)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1112
                self.match(DMFParser.T__131)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1113
                self.match(DMFParser.T__132)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1114
                self.match(DMFParser.T__86)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1115
                self.match(DMFParser.T__136)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1116
                self.match(DMFParser.T__183)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1117
                self.match(DMFParser.T__106)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1118
                self.match(DMFParser.T__113)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1119
                self.match(DMFParser.T__111)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1120
                self.match(DMFParser.T__110)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1121
                self.match(DMFParser.T__128)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1122
                self.match(DMFParser.T__29)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1123
                self.match(DMFParser.T__30)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1124
                self.match(DMFParser.T__69)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1125
                self.match(DMFParser.T__71)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1126
                self.match(DMFParser.T__72)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1127
                self.match(DMFParser.T__118)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1128
                self.match(DMFParser.T__135)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1129
                self.match(DMFParser.T__194)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1130
                self.match(DMFParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None


        def getRuleIndex(self):
            return DMFParser.RULE_rel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel" ):
                listener.enterRel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel" ):
                listener.exitRel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel" ):
                return visitor.visitRel(self)
            else:
                return visitor.visitChildren(self)




    def rel(self):

        localctx = DMFParser.RelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_rel)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__211]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1133
                self.match(DMFParser.T__211)
                localctx.which=Rel.EQ
                pass
            elif token in [DMFParser.T__212]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.match(DMFParser.T__212)
                localctx.which=Rel.NE
                pass
            elif token in [DMFParser.T__213]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1137
                self.match(DMFParser.T__213)
                localctx.which=Rel.LT
                pass
            elif token in [DMFParser.T__214]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1139
                self.match(DMFParser.T__214)
                localctx.which=Rel.LE
                pass
            elif token in [DMFParser.T__215]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1141
                self.match(DMFParser.T__215)
                localctx.which=Rel.GT
                pass
            elif token in [DMFParser.T__216]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1143
                self.match(DMFParser.T__216)
                localctx.which=Rel.GE
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None


        def getRuleIndex(self):
            return DMFParser.RULE_bool_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_val" ):
                listener.enterBool_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_val" ):
                listener.exitBool_val(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_val" ):
                return visitor.visitBool_val(self)
            else:
                return visitor.visitChildren(self)




    def bool_val(self):

        localctx = DMFParser.Bool_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_bool_val)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__217, DMFParser.T__218, DMFParser.T__219, DMFParser.T__220, DMFParser.T__221, DMFParser.T__222]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                _la = self._input.LA(1)
                if not(((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & ((1 << (DMFParser.T__217 - 218)) | (1 << (DMFParser.T__218 - 218)) | (1 << (DMFParser.T__219 - 218)) | (1 << (DMFParser.T__220 - 218)) | (1 << (DMFParser.T__221 - 218)) | (1 << (DMFParser.T__222 - 218)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=True
                pass
            elif token in [DMFParser.T__223, DMFParser.T__224, DMFParser.T__225, DMFParser.T__226, DMFParser.T__227, DMFParser.T__228]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                _la = self._input.LA(1)
                if not(((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & ((1 << (DMFParser.T__223 - 224)) | (1 << (DMFParser.T__224 - 224)) | (1 << (DMFParser.T__225 - 224)) | (1 << (DMFParser.T__226 - 224)) | (1 << (DMFParser.T__227 - 224)) | (1 << (DMFParser.T__228 - 224)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None
            self._multi_word_name = None # Multi_word_nameContext
            self._ID = None # Token
            self._kwd_names = None # Kwd_namesContext

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = DMFParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_name)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                localctx._multi_word_name = self.multi_word_name()
                localctx.val=localctx._multi_word_name.val
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                localctx._ID = self.match(DMFParser.ID)
                localctx.val=(None if localctx._ID is None else localctx._ID.text)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1158
                localctx._kwd_names = self.kwd_names()
                localctx.val=(None if localctx._kwd_names is None else self._input.getText(localctx._kwd_names.start,localctx._kwd_names.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_word_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def INTERACTIVE(self):
            return self.getToken(DMFParser.INTERACTIVE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_multi_word_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_word_name" ):
                listener.enterMulti_word_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_word_name" ):
                listener.exitMulti_word_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_word_name" ):
                return visitor.visitMulti_word_name(self)
            else:
                return visitor.visitChildren(self)




    def multi_word_name(self):

        localctx = DMFParser.Multi_word_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_multi_word_name)
        self._la = 0 # Token type
        try:
            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.match(DMFParser.ON)
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1164
                    self.match(DMFParser.T__33)


                self.state = 1167
                self.match(DMFParser.T__89)
                localctx.val="on board"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1169
                    self.match(DMFParser.T__33)


                self.state = 1172
                self.match(DMFParser.INTERACTIVE)
                self.state = 1173
                self.match(DMFParser.T__34)
                localctx.val="interactive reagent"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1175
                    self.match(DMFParser.T__33)


                self.state = 1178
                self.match(DMFParser.INTERACTIVE)
                self.state = 1179
                self.match(DMFParser.T__117)
                localctx.val="interactive volume"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1181
                self.match(DMFParser.T__33)
                self.state = 1182
                self.match(DMFParser.T__89)
                localctx.val="the board"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1184
                    self.match(DMFParser.T__33)


                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__195:
                    self.state = 1187
                    self.match(DMFParser.T__195)


                self.state = 1190
                self.match(DMFParser.T__229)
                self.state = 1191
                self.match(DMFParser.T__121)
                localctx.val="clicked pad"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1193
                    self.match(DMFParser.T__33)


                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__195:
                    self.state = 1196
                    self.match(DMFParser.T__195)


                self.state = 1199
                self.match(DMFParser.T__229)
                self.state = 1200
                self.match(DMFParser.T__47)
                localctx.val="clicked drop"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1202
                self.match(DMFParser.T__230)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 1203
                    self.match(DMFParser.T__26)


                self.state = 1206
                self.match(DMFParser.T__47)
                localctx.val="dispense drop"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1208
                self.match(DMFParser.T__231)
                self.state = 1209
                self.match(DMFParser.T__124)
                localctx.val="enter well"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1211
                self.match(DMFParser.T__232)
                self.state = 1212
                self.match(DMFParser.T__9)
                localctx.val="transfer in"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1214
                self.match(DMFParser.T__232)
                self.state = 1215
                self.match(DMFParser.T__233)
                localctx.val="transfer out"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1217
                self.match(DMFParser.T__234)
                self.state = 1218
                self.match(DMFParser.T__10)
                self.state = 1219
                self.match(DMFParser.T__230)
                localctx.val="prepare to dispense"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1221
                self.match(DMFParser.T__235)
                self.state = 1227
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__26, DMFParser.T__105]:
                    self.state = 1223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__26:
                        self.state = 1222
                        self.match(DMFParser.T__26)


                    self.state = 1225
                    self.match(DMFParser.T__105)
                    pass
                elif token in [DMFParser.T__236]:
                    self.state = 1226
                    self.match(DMFParser.T__236)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.val="take reading"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1230
                self.match(DMFParser.T__187)
                self.state = 1231
                self.match(DMFParser.T__114)
                localctx.val="current time"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1233
                self.match(DMFParser.T__114)
                self.state = 1234
                self.match(DMFParser.T__237)
                localctx.val="current time"
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1236
                self.match(DMFParser.T__238)
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__10:
                    self.state = 1237
                    self.match(DMFParser.T__10)


                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__207:
                    self.state = 1240
                    self.match(DMFParser.T__207)


                self.state = 1243
                self.match(DMFParser.T__208)
                localctx.val="write to csv file"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwd_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_kwd_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwd_names" ):
                listener.enterKwd_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwd_names" ):
                listener.exitKwd_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwd_names" ):
                return visitor.visitKwd_names(self)
            else:
                return visitor.visitChildren(self)




    def kwd_names(self):

        localctx = DMFParser.Kwd_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_kwd_names)
        try:
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self.match(DMFParser.T__137)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.match(DMFParser.T__142)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1249
                self.match(DMFParser.T__181)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1250
                self.match(DMFParser.T__178)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1251
                self.match(DMFParser.T__26)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1252
                self.match(DMFParser.T__22)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1253
                self.match(DMFParser.T__188)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1254
                self.match(DMFParser.ON)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1255
                self.match(DMFParser.OFF)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1256
                self.match(DMFParser.T__31)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1257
                self.match(DMFParser.T__147)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1258
                self.match(DMFParser.T__176)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1259
                self.match(DMFParser.T__175)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1260
                self.match(DMFParser.T__177)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1261
                self.match(DMFParser.T__119)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1262
                self.match(DMFParser.T__120)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1263
                self.match(DMFParser.T__99)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1264
                self.match(DMFParser.T__112)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1265
                self.match(DMFParser.T__239)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1266
                self.match(DMFParser.T__240)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1267
                self.match(DMFParser.T__230)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1268
                self.match(DMFParser.T__231)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1269
                self.match(DMFParser.T__90)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1270
                self.match(DMFParser.T__92)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1271
                self.match(DMFParser.T__91)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1272
                self.match(DMFParser.T__93)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1273
                self.match(DMFParser.T__96)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1274
                self.match(DMFParser.T__97)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1275
                self.match(DMFParser.T__55)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1276
                self.match(DMFParser.T__195)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1277
                self.match(DMFParser.T__229)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1278
                self.match(DMFParser.T__126)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1279
                self.match(DMFParser.T__232)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1280
                self.match(DMFParser.T__9)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1281
                self.match(DMFParser.T__233)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1282
                self.match(DMFParser.T__94)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1283
                self.match(DMFParser.T__130)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1284
                self.match(DMFParser.T__95)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1285
                self.match(DMFParser.T__184)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1286
                self.match(DMFParser.T__186)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1287
                self.match(DMFParser.T__185)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1288
                self.match(DMFParser.T__234)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1289
                self.match(DMFParser.T__10)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1290
                self.match(DMFParser.T__230)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1291
                self.match(DMFParser.T__189)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1292
                self.match(DMFParser.T__190)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1293
                self.match(DMFParser.T__191)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1294
                self.match(DMFParser.T__192)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1295
                self.match(DMFParser.T__105)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1296
                self.match(DMFParser.T__123)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1297
                self.match(DMFParser.T__193)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1298
                self.match(DMFParser.T__195)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1299
                self.match(DMFParser.T__194)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1300
                self.match(DMFParser.T__187)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1301
                self.match(DMFParser.T__237)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1302
                self.match(DMFParser.T__16)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1303
                self.match(DMFParser.T__179)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1304
                self.match(DMFParser.T__180)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1305
                self.match(DMFParser.T__135)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1306
                self.min_max()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1307
                self.match(DMFParser.T__196)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1308
                self.match(DMFParser.T__197)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1309
                self.match(DMFParser.T__198)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1310
                self.match(DMFParser.T__199)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1311
                self.match(DMFParser.T__200)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1312
                self.match(DMFParser.T__201)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1313
                self.match(DMFParser.T__202)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1314
                self.match(DMFParser.T__203)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1315
                self.match(DMFParser.T__204)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1316
                self.match(DMFParser.T__29)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1317
                self.match(DMFParser.T__205)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1318
                self.match(DMFParser.T__206)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1319
                self.match(DMFParser.T__207)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1320
                self.match(DMFParser.T__208)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1321
                self.match(DMFParser.T__209)
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1322
                self.match(DMFParser.T__210)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1323
                self.match(DMFParser.T__39)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1324
                self.match(DMFParser.T__23)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1325
                self.match(DMFParser.T__38)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(DMFParser.STRING, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = DMFParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(DMFParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None
            self.n = None # Token

        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_old_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_attr" ):
                listener.enterOld_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_attr" ):
                listener.exitOld_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_attr" ):
                return visitor.visitOld_attr(self)
            else:
                return visitor.visitChildren(self)




    def old_attr(self):

        localctx = DMFParser.Old_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_old_attr)
        self._la = 0 # Token type
        try:
            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1330
                self.match(DMFParser.T__16)
                self.state = 1331
                self.match(DMFParser.T__121)
                localctx.which="#exit_pad"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.match(DMFParser.T__178)
                self.state = 1334
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__179 or _la==DMFParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#y_coord"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1336
                self.match(DMFParser.T__181)
                self.state = 1337
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__179 or _la==DMFParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#x_coord"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1339
                self.match(DMFParser.T__16)
                self.state = 1340
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#exit_dir"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1342
                self.match(DMFParser.T__182)
                self.state = 1343
                self.match(DMFParser.T__183)
                localctx.which="#remaining_capacity"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1345
                self.match(DMFParser.T__184)
                self.state = 1346
                self.match(DMFParser.T__185)
                localctx.which="#fill_level"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1348
                self.match(DMFParser.T__186)
                self.state = 1349
                self.match(DMFParser.T__185)
                localctx.which="#refill_level"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1351
                self.match(DMFParser.T__123)
                self.state = 1352
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__110 or _la==DMFParser.T__111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#target_temperature"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1354
                self.match(DMFParser.T__187)
                self.state = 1355
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__110 or _la==DMFParser.T__111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#current_temperature"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1357
                self.match(DMFParser.T__133)
                self.state = 1358
                self.match(DMFParser.T__134)
                localctx.which="#power_supply"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1360
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__147 or _la==DMFParser.T__175):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1361
                self.match(DMFParser.T__118)
                localctx.which="#min_voltage"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1363
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__176 or _la==DMFParser.T__177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1364
                self.match(DMFParser.T__118)
                localctx.which="#max_voltage"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1366
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__147 or _la==DMFParser.T__175):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1367
                _la = self._input.LA(1)
                if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (DMFParser.T__110 - 111)) | (1 << (DMFParser.T__111 - 111)) | (1 << (DMFParser.T__123 - 111)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#min_target"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1369
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__176 or _la==DMFParser.T__177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1370
                _la = self._input.LA(1)
                if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (DMFParser.T__110 - 111)) | (1 << (DMFParser.T__111 - 111)) | (1 << (DMFParser.T__123 - 111)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#max_target"
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1372
                self.match(DMFParser.T__133)
                self.state = 1373
                self.match(DMFParser.T__135)
                localctx.which="#power_mode"
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1375
                self.match(DMFParser.T__94)
                self.state = 1376
                self.match(DMFParser.T__130)
                localctx.which="#heating_zone"
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1378
                self.match(DMFParser.T__188)
                self.state = 1379
                self.match(DMFParser.T__189)
                localctx.which="#n_samples"
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1381
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1382
                self.match(DMFParser.T__191)
                localctx.which="#sample_rate"
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1384
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1385
                self.match(DMFParser.T__192)
                localctx.which="#sample_interval"
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1387
                self.match(DMFParser.T__193)
                self.state = 1388
                self.match(DMFParser.T__194)
                localctx.which="#first_value"
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1390
                self.match(DMFParser.T__195)
                self.state = 1391
                self.match(DMFParser.T__194)
                localctx.which="#last_value"
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1393
                localctx.n = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__34) | (1 << DMFParser.T__47))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (DMFParser.T__69 - 70)) | (1 << (DMFParser.T__71 - 70)) | (1 << (DMFParser.T__72 - 70)) | (1 << (DMFParser.T__86 - 70)) | (1 << (DMFParser.T__106 - 70)) | (1 << (DMFParser.T__110 - 70)) | (1 << (DMFParser.T__111 - 70)) | (1 << (DMFParser.T__113 - 70)) | (1 << (DMFParser.T__117 - 70)) | (1 << (DMFParser.T__118 - 70)) | (1 << (DMFParser.T__121 - 70)) | (1 << (DMFParser.T__123 - 70)) | (1 << (DMFParser.T__124 - 70)) | (1 << (DMFParser.T__128 - 70)) | (1 << (DMFParser.T__129 - 70)) | (1 << (DMFParser.T__131 - 70)) | (1 << (DMFParser.T__132 - 70)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (DMFParser.T__135 - 136)) | (1 << (DMFParser.T__136 - 136)) | (1 << (DMFParser.T__183 - 136)) | (1 << (DMFParser.T__193 - 136)) | (1 << (DMFParser.T__194 - 136)) | (1 << (DMFParser.T__195 - 136)))) != 0) or _la==DMFParser.ID):
                    localctx.n = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which=(None if localctx.n is None else localctx.n.text)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.expr_sempred
        self._predicates[17] = self.rc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 54)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 18)
         

    def rc_sempred(self, localctx:RcContext, predIndex:int):
            if predIndex == 27:
                return localctx.n==1
         

            if predIndex == 28:
                return localctx.n==1
         




