# Generated from DMF.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


from mpam.types import Dir, OnOff, Turn, ticks, unknown_reagent, waste_reagent
from langsup.type_supp import Type, Rel, PhysUnit, EnvRelativeUnit, NumberedItem
from quantities import SI


from mpam.types import Dir 


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00f5")
        buf.write("\u046f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\7\2X\n\2\f\2\16")
        buf.write("\2[\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3g")
        buf.write("\n\3\3\3\3\3\3\3\3\3\5\3m\n\3\3\3\3\3\3\3\5\3r\n\3\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4|\n\4\3\4\3\4\3\4\3\4")
        buf.write("\5\4\u0082\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\5\4\u008e\n\4\3\4\3\4\3\4\3\4\5\4\u0094\n\4\3\4\3\4\3")
        buf.write("\4\5\4\u0099\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\7\5\u00a6\n\5\f\5\16\5\u00a9\13\5\3\5\3\5\5\5\u00ad")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00ba")
        buf.write("\n\5\3\6\3\6\7\6\u00be\n\6\f\6\16\6\u00c1\13\6\3\6\3\6")
        buf.write("\3\6\7\6\u00c6\n\6\f\6\16\6\u00c9\13\6\3\6\5\6\u00cc\n")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00e1\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u00ea\n\7\5\7\u00ec\n\7\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00f9\n\b\3\t\3\t\3")
        buf.write("\t\3\t\5\t\u00ff\n\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u0107")
        buf.write("\n\n\3\n\3\n\3\13\3\13\5\13\u010d\n\13\3\f\3\f\3\f\3\f")
        buf.write("\5\f\u0113\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0129\n\r")
        buf.write("\3\r\3\r\5\r\u012d\n\r\3\r\5\r\u0130\n\r\3\r\3\r\5\r\u0134")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u013f\n\r")
        buf.write("\3\r\3\r\3\r\5\r\u0144\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u014b")
        buf.write("\n\r\3\r\3\r\3\r\7\r\u0150\n\r\f\r\16\r\u0153\13\r\5\r")
        buf.write("\u0155\n\r\3\r\3\r\3\r\3\r\7\r\u015b\n\r\f\r\16\r\u015e")
        buf.write("\13\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0166\n\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u017b\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u0191\n\r\3\r\5\r\u0194\n\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u01b4\n")
        buf.write("\r\f\r\16\r\u01b7\13\r\5\r\u01b9\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01c6\n\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u01cf\n\r\3\r\3\r\3\r\5\r\u01d4\n\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\7\r\u01f5\n\r\f\r\16\r\u01f8\13\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u020c\n\16\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0217\n\17")
        buf.write("\3\20\3\20\3\20\3\20\5\20\u021d\n\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u022b")
        buf.write("\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0233\n\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0243\n\23\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u0249\n\24\3\25\3\25\3\25\5\25\u024e\n\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\7\26\u0255\n\26\f\26\16\26\u0258\13\26")
        buf.write("\5\26\u025a\n\26\3\26\3\26\3\26\5\26\u025f\n\26\3\27\5")
        buf.write("\27\u0262\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\5\27\u0278\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\5\30\u0282\n\30\3\30\3\30\3\30\3\30\5\30\u0288")
        buf.write("\n\30\3\30\5\30\u028b\n\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\5\30\u0298\n\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u02a1\n\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u02b0\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u02b9\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u02dd\n\33\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\5\34\u02e5\n\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\5\34\u02ed\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u02fc\n\35\3\36")
        buf.write("\3\36\3\36\5\36\u0301\n\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u030a\n\36\3\36\5\36\u030d\n\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u0314\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\5\36\u031b\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u032e\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0340\n\37")
        buf.write("\3 \3 \3 \3 \3 \5 \u0347\n \3 \3 \3 \3 \3 \3 \3 \3 \5")
        buf.write(" \u0351\n \3 \5 \u0354\n \3 \5 \u0357\n \3!\3!\3\"\3\"")
        buf.write("\3#\3#\5#\u035f\n#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u037c")
        buf.write("\n$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0389\n$\3$\3")
        buf.write("$\5$\u038d\n$\3$\3$\5$\u0391\n$\3$\5$\u0394\n$\3$\3$\5")
        buf.write("$\u0398\n$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u03b7\n")
        buf.write("$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u03fa\n%\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0408\n&\3\'\3\'\3\'\3")
        buf.write("\'\5\'\u040e\n\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0418\n(\3")
        buf.write(")\3)\5)\u041c\n)\3)\3)\3)\5)\u0421\n)\3)\3)\3)\3)\5)\u0427")
        buf.write("\n)\3)\3)\3)\3)\3)\3)\3)\5)\u0430\n)\3)\5)\u0433\n)\3")
        buf.write(")\3)\3)\3)\5)\u0439\n)\3)\5)\u043c\n)\3)\3)\3)\3)\3)\5")
        buf.write(")\u0443\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\5)\u0456\n)\3)\3)\5)\u045a\n)\3)\3)\3)\3)\3)\3")
        buf.write(")\5)\u0462\n)\3)\5)\u0465\n)\3)\3)\5)\u0469\n)\3*\3*\3")
        buf.write("+\3+\3+\2\3\30,\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRT\2(\3\2\u00ea\u00eb")
        buf.write("\4\2\32\32!!\3\2)*\3\2/\60\3\2\35\36\4\2\u00de\u00de\u00e3")
        buf.write("\u00e3\4\2\u00db\u00db\u00e7\u00e7\4\2\32\32%%\3\2;<\4")
        buf.write("\2\17\17==\3\2>?\3\2@A\4\2@@BB\4\2>>CC\3\2GH\3\2IJ\3\2")
        buf.write("fg\4\2\\\\op\4\2hhvv\3\2\u0081\u0085\3\2\u0086\u0088\3")
        buf.write("\2\u0089\u008e\3\2\u008f\u0094\4\2ll\u0095\u0095\4\2.")
        buf.write(".\u0096\u0096\3\2\u0097\u0099\3\2\u009a\u009b\3\2\u009c")
        buf.write("\u009d\3\2\u009e\u009f\3\2\u00a1\u00a2\4\2fgss\4\2ZZ\u00ac")
        buf.write("\u00ac\3\2\u00b6\u00b7\3\2\u00b8\u00b9\24\2\35\36\"\"")
        buf.write("..EEGHNNccfgiimnqqstxy{|\177\u0080\u00a5\u00a5\u00af\u00b1")
        buf.write("\u00ef\u00ef\3\2\u00c0\u00c5\3\2\u00c6\u00cb\30\2\f\r")
        buf.write("\32\32\37\37%%\66\66RY\\\\bbhhopssvvzz\u0081\u0081\u0086")
        buf.write("\u0086\u009c\u00a0\u00a3\u00a3\u00a6\u00a7\u00a9\u00b1")
        buf.write("\u00cc\u00d1\u00d7\u00da\u00e5\u00e6\2\u057e\2Y\3\2\2")
        buf.write("\2\4q\3\2\2\2\6\u0098\3\2\2\2\b\u00b9\3\2\2\2\n\u00cb")
        buf.write("\3\2\2\2\f\u00eb\3\2\2\2\16\u00f8\3\2\2\2\20\u00fe\3\2")
        buf.write("\2\2\22\u0104\3\2\2\2\24\u010a\3\2\2\2\26\u0112\3\2\2")
        buf.write("\2\30\u017a\3\2\2\2\32\u020b\3\2\2\2\34\u0216\3\2\2\2")
        buf.write("\36\u021c\3\2\2\2 \u022a\3\2\2\2\"\u0232\3\2\2\2$\u0242")
        buf.write("\3\2\2\2&\u0248\3\2\2\2(\u024a\3\2\2\2*\u024f\3\2\2\2")
        buf.write(",\u0277\3\2\2\2.\u02a0\3\2\2\2\60\u02af\3\2\2\2\62\u02b8")
        buf.write("\3\2\2\2\64\u02dc\3\2\2\2\66\u02ec\3\2\2\28\u02fb\3\2")
        buf.write("\2\2:\u032d\3\2\2\2<\u033f\3\2\2\2>\u0356\3\2\2\2@\u0358")
        buf.write("\3\2\2\2B\u035a\3\2\2\2D\u035e\3\2\2\2F\u03b6\3\2\2\2")
        buf.write("H\u03f9\3\2\2\2J\u0407\3\2\2\2L\u040d\3\2\2\2N\u0417\3")
        buf.write("\2\2\2P\u0468\3\2\2\2R\u046a\3\2\2\2T\u046c\3\2\2\2VX")
        buf.write("\5\b\5\2WV\3\2\2\2X[\3\2\2\2YW\3\2\2\2YZ\3\2\2\2Z\\\3")
        buf.write("\2\2\2[Y\3\2\2\2\\]\7\2\2\3]\3\3\2\2\2^_\5\n\6\2_`\7\2")
        buf.write("\2\3`r\3\2\2\2ab\5\20\t\2bc\7\2\2\3cr\3\2\2\2df\5\6\4")
        buf.write("\2eg\7\u00e8\2\2fe\3\2\2\2fg\3\2\2\2gh\3\2\2\2hi\7\2\2")
        buf.write("\3ir\3\2\2\2jl\5\30\r\2km\7\u00e8\2\2lk\3\2\2\2lm\3\2")
        buf.write("\2\2mn\3\2\2\2no\7\2\2\3or\3\2\2\2pr\7\2\2\3q^\3\2\2\2")
        buf.write("qa\3\2\2\2qd\3\2\2\2qj\3\2\2\2qp\3\2\2\2r\5\3\2\2\2st")
        buf.write("\7\u00e2\2\2tu\5N(\2uv\7\u00dc\2\2vw\5\30\r\2wx\b\4\1")
        buf.write("\2xy\b\4\1\2y\u0099\3\2\2\2z|\7\u00e2\2\2{z\3\2\2\2{|")
        buf.write("\3\2\2\2|}\3\2\2\2}~\5\60\31\2~\177\7\u00f0\2\2\177\u0081")
        buf.write("\7\u00dc\2\2\u0080\u0082\5\30\r\2\u0081\u0080\3\2\2\2")
        buf.write("\u0081\u0082\3\2\2\2\u0082\u0083\3\2\2\2\u0083\u0084\b")
        buf.write("\4\1\2\u0084\u0085\b\4\1\2\u0085\u0099\3\2\2\2\u0086\u0087")
        buf.write("\7\u00e2\2\2\u0087\u0088\5\60\31\2\u0088\u0089\7\u00f0")
        buf.write("\2\2\u0089\u008a\b\4\1\2\u008a\u008b\b\4\1\2\u008b\u0099")
        buf.write("\3\2\2\2\u008c\u008e\7\u00e2\2\2\u008d\u008c\3\2\2\2\u008d")
        buf.write("\u008e\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0090\5\60\31")
        buf.write("\2\u0090\u0093\5N(\2\u0091\u0092\7\u00dc\2\2\u0092\u0094")
        buf.write("\5\30\r\2\u0093\u0091\3\2\2\2\u0093\u0094\3\2\2\2\u0094")
        buf.write("\u0095\3\2\2\2\u0095\u0096\b\4\1\2\u0096\u0097\b\4\1\2")
        buf.write("\u0097\u0099\3\2\2\2\u0098s\3\2\2\2\u0098{\3\2\2\2\u0098")
        buf.write("\u0086\3\2\2\2\u0098\u008d\3\2\2\2\u0099\7\3\2\2\2\u009a")
        buf.write("\u009b\5\6\4\2\u009b\u009c\7\u00e8\2\2\u009c\u00ba\3\2")
        buf.write("\2\2\u009d\u009e\7\3\2\2\u009e\u009f\5\30\r\2\u009f\u00a7")
        buf.write("\5\n\6\2\u00a0\u00a1\7\4\2\2\u00a1\u00a2\7\3\2\2\u00a2")
        buf.write("\u00a3\5\30\r\2\u00a3\u00a4\5\n\6\2\u00a4\u00a6\3\2\2")
        buf.write("\2\u00a5\u00a0\3\2\2\2\u00a6\u00a9\3\2\2\2\u00a7\u00a5")
        buf.write("\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00ac\3\2\2\2\u00a9")
        buf.write("\u00a7\3\2\2\2\u00aa\u00ab\7\4\2\2\u00ab\u00ad\5\n\6\2")
        buf.write("\u00ac\u00aa\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00ba\3")
        buf.write("\2\2\2\u00ae\u00af\5\30\r\2\u00af\u00b0\7\u00e8\2\2\u00b0")
        buf.write("\u00ba\3\2\2\2\u00b1\u00ba\5\20\t\2\u00b2\u00b3\5\22\n")
        buf.write("\2\u00b3\u00b4\7\u00e8\2\2\u00b4\u00ba\3\2\2\2\u00b5\u00b6")
        buf.write("\5\24\13\2\u00b6\u00b7\7\u00e8\2\2\u00b7\u00ba\3\2\2\2")
        buf.write("\u00b8\u00ba\5\n\6\2\u00b9\u009a\3\2\2\2\u00b9\u009d\3")
        buf.write("\2\2\2\u00b9\u00ae\3\2\2\2\u00b9\u00b1\3\2\2\2\u00b9\u00b2")
        buf.write("\3\2\2\2\u00b9\u00b5\3\2\2\2\u00b9\u00b8\3\2\2\2\u00ba")
        buf.write("\t\3\2\2\2\u00bb\u00bf\7\5\2\2\u00bc\u00be\5\b\5\2\u00bd")
        buf.write("\u00bc\3\2\2\2\u00be\u00c1\3\2\2\2\u00bf\u00bd\3\2\2\2")
        buf.write("\u00bf\u00c0\3\2\2\2\u00c0\u00c2\3\2\2\2\u00c1\u00bf\3")
        buf.write("\2\2\2\u00c2\u00cc\7\6\2\2\u00c3\u00c7\7\7\2\2\u00c4\u00c6")
        buf.write("\5\b\5\2\u00c5\u00c4\3\2\2\2\u00c6\u00c9\3\2\2\2\u00c7")
        buf.write("\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2")
        buf.write("\u00c9\u00c7\3\2\2\2\u00ca\u00cc\7\b\2\2\u00cb\u00bb\3")
        buf.write("\2\2\2\u00cb\u00c3\3\2\2\2\u00cc\13\3\2\2\2\u00cd\u00ce")
        buf.write("\5\30\r\2\u00ce\u00cf\7\t\2\2\u00cf\u00ec\3\2\2\2\u00d0")
        buf.write("\u00d1\7\n\2\2\u00d1\u00ec\5\30\r\2\u00d2\u00d3\t\2\2")
        buf.write("\2\u00d3\u00ec\5\30\r\2\u00d4\u00d5\7\13\2\2\u00d5\u00d6")
        buf.write("\5N(\2\u00d6\u00d7\7\f\2\2\u00d7\u00d8\5\30\r\2\u00d8")
        buf.write("\u00ec\3\2\2\2\u00d9\u00da\7\13\2\2\u00da\u00db\5N(\2")
        buf.write("\u00db\u00dc\5\16\b\2\u00dc\u00dd\7\r\2\2\u00dd\u00e0")
        buf.write("\5\30\r\2\u00de\u00df\7\16\2\2\u00df\u00e1\5\30\r\2\u00e0")
        buf.write("\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00ec\3\2\2\2")
        buf.write("\u00e2\u00e3\7\13\2\2\u00e3\u00e4\5,\27\2\u00e4\u00e5")
        buf.write("\5\16\b\2\u00e5\u00e6\7\r\2\2\u00e6\u00e9\5\30\r\2\u00e7")
        buf.write("\u00e8\7\16\2\2\u00e8\u00ea\5\30\r\2\u00e9\u00e7\3\2\2")
        buf.write("\2\u00e9\u00ea\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00cd")
        buf.write("\3\2\2\2\u00eb\u00d0\3\2\2\2\u00eb\u00d2\3\2\2\2\u00eb")
        buf.write("\u00d4\3\2\2\2\u00eb\u00d9\3\2\2\2\u00eb\u00e2\3\2\2\2")
        buf.write("\u00ec\r\3\2\2\2\u00ed\u00ee\7\u00dc\2\2\u00ee\u00ef\5")
        buf.write("\30\r\2\u00ef\u00f0\7\17\2\2\u00f0\u00f1\b\b\1\2\u00f1")
        buf.write("\u00f9\3\2\2\2\u00f2\u00f3\7\u00dc\2\2\u00f3\u00f4\5\30")
        buf.write("\r\2\u00f4\u00f5\b\b\1\2\u00f5\u00f9\3\2\2\2\u00f6\u00f7")
        buf.write("\7\17\2\2\u00f7\u00f9\b\b\1\2\u00f8\u00ed\3\2\2\2\u00f8")
        buf.write("\u00f2\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\17\3\2\2\2\u00fa")
        buf.write("\u00fb\7\20\2\2\u00fb\u00fc\5N(\2\u00fc\u00fd\7\u00ec")
        buf.write("\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00fa\3\2\2\2\u00fe\u00ff")
        buf.write("\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0101\7\21\2\2\u0101")
        buf.write("\u0102\5\f\7\2\u0102\u0103\5\n\6\2\u0103\21\3\2\2\2\u0104")
        buf.write("\u0106\7\22\2\2\u0105\u0107\5N(\2\u0106\u0105\3\2\2\2")
        buf.write("\u0106\u0107\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0109\7")
        buf.write("\23\2\2\u0109\23\3\2\2\2\u010a\u010c\7\24\2\2\u010b\u010d")
        buf.write("\5\30\r\2\u010c\u010b\3\2\2\2\u010c\u010d\3\2\2\2\u010d")
        buf.write("\25\3\2\2\2\u010e\u010f\7\u00ec\2\2\u010f\u0113\b\f\1")
        buf.write("\2\u0110\u0111\7\u00ed\2\2\u0111\u0113\b\f\1\2\u0112\u010e")
        buf.write("\3\2\2\2\u0112\u0110\3\2\2\2\u0113\27\3\2\2\2\u0114\u0115")
        buf.write("\b\r\1\2\u0115\u0116\7\25\2\2\u0116\u0117\5\30\r\2\u0117")
        buf.write("\u0118\7\u00ed\2\2\u0118\u017b\3\2\2\2\u0119\u011a\7\25")
        buf.write("\2\2\u011a\u011b\5\30\r\2\u011b\u011c\7\26\2\2\u011c\u011d")
        buf.write("\5\30\r\2\u011d\u011e\7\u00ed\2\2\u011e\u017b\3\2\2\2")
        buf.write("\u011f\u0120\7\u00e7\2\2\u0120\u017b\5\30\r\65\u0121\u0122")
        buf.write("\5> \2\u0122\u0123\7\27\2\2\u0123\u0124\5\30\r\63\u0124")
        buf.write("\u017b\3\2\2\2\u0125\u0126\7\u00f0\2\2\u0126\u017b\5$")
        buf.write("\23\2\u0127\u0129\7!\2\2\u0128\u0127\3\2\2\2\u0128\u0129")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\5\36\20\2\u012b")
        buf.write("\u012d\7\"\2\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2\2\2")
        buf.write("\u012d\u017b\3\2\2\2\u012e\u0130\t\3\2\2\u012f\u012e\3")
        buf.write("\2\2\2\u012f\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133")
        buf.write("\7\"\2\2\u0132\u0134\7#\2\2\u0133\u0132\3\2\2\2\u0133")
        buf.write("\u0134\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u017b\5\30\r")
        buf.write("$\u0136\u0137\7\u00e4\2\2\u0137\u017b\5\30\r\35\u0138")
        buf.write("\u0139\5 \21\2\u0139\u013a\5\30\r\32\u013a\u017b\3\2\2")
        buf.write("\2\u013b\u017b\5 \21\2\u013c\u013e\7\r\2\2\u013d\u013f")
        buf.write("\5&\24\2\u013e\u013d\3\2\2\2\u013e\u013f\3\2\2\2\u013f")
        buf.write("\u0140\3\2\2\2\u0140\u017b\5\30\r\30\u0141\u0143\t\4\2")
        buf.write("\2\u0142\u0144\7\n\2\2\u0143\u0142\3\2\2\2\u0143\u0144")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u017b\5\30\r\27\u0146")
        buf.write("\u0147\t\4\2\2\u0147\u0148\7\n\2\2\u0148\u014b\7+\2\2")
        buf.write("\u0149\u014b\7,\2\2\u014a\u0146\3\2\2\2\u014a\u0149\3")
        buf.write("\2\2\2\u014b\u0154\3\2\2\2\u014c\u0151\5\30\r\2\u014d")
        buf.write("\u014e\7\26\2\2\u014e\u0150\5\30\r\2\u014f\u014d\3\2\2")
        buf.write("\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152")
        buf.write("\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0154")
        buf.write("\u014c\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u017b\3\2\2\2")
        buf.write("\u0156\u0157\7-\2\2\u0157\u015c\5\30\r\2\u0158\u0159\7")
        buf.write("\26\2\2\u0159\u015b\5\30\r\2\u015a\u0158\3\2\2\2\u015b")
        buf.write("\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\u017b\3\2\2\2\u015e\u015c\3\2\2\2\u015f\u0160\7")
        buf.write(".\2\2\u0160\u0161\t\5\2\2\u0161\u017b\5\30\r\23\u0162")
        buf.write("\u017b\5(\25\2\u0163\u017b\5.\30\2\u0164\u0166\7!\2\2")
        buf.write("\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u017b\5\60\31\2\u0168\u0169\5\60\31\2\u0169")
        buf.write("\u016a\7\u00f0\2\2\u016a\u017b\3\2\2\2\u016b\u017b\5L")
        buf.write("\'\2\u016c\u017b\5N(\2\u016d\u017b\5P)\2\u016e\u016f\5")
        buf.write("N(\2\u016f\u0170\7\u00dc\2\2\u0170\u0171\5\30\r\b\u0171")
        buf.write("\u017b\3\2\2\2\u0172\u0173\5\60\31\2\u0173\u0174\7\u00f0")
        buf.write("\2\2\u0174\u0175\7\u00dc\2\2\u0175\u0176\5\30\r\6\u0176")
        buf.write("\u017b\3\2\2\2\u0177\u017b\5T+\2\u0178\u017b\7\u00f0\2")
        buf.write("\2\u0179\u017b\7\u00f1\2\2\u017a\u0114\3\2\2\2\u017a\u0119")
        buf.write("\3\2\2\2\u017a\u011f\3\2\2\2\u017a\u0121\3\2\2\2\u017a")
        buf.write("\u0125\3\2\2\2\u017a\u0128\3\2\2\2\u017a\u012f\3\2\2\2")
        buf.write("\u017a\u0136\3\2\2\2\u017a\u0138\3\2\2\2\u017a\u013b\3")
        buf.write("\2\2\2\u017a\u013c\3\2\2\2\u017a\u0141\3\2\2\2\u017a\u014a")
        buf.write("\3\2\2\2\u017a\u0156\3\2\2\2\u017a\u015f\3\2\2\2\u017a")
        buf.write("\u0162\3\2\2\2\u017a\u0163\3\2\2\2\u017a\u0165\3\2\2\2")
        buf.write("\u017a\u0168\3\2\2\2\u017a\u016b\3\2\2\2\u017a\u016c\3")
        buf.write("\2\2\2\u017a\u016d\3\2\2\2\u017a\u016e\3\2\2\2\u017a\u0172")
        buf.write("\3\2\2\2\u017a\u0177\3\2\2\2\u017a\u0178\3\2\2\2\u017a")
        buf.write("\u0179\3\2\2\2\u017b\u01f6\3\2\2\2\u017c\u017d\f+\2\2")
        buf.write("\u017d\u017e\7\f\2\2\u017e\u017f\t\6\2\2\u017f\u01f5\5")
        buf.write("\30\r,\u0180\u0181\f#\2\2\u0181\u0182\7$\2\2\u0182\u01f5")
        buf.write("\5\30\r$\u0183\u0184\f\"\2\2\u0184\u0185\t\7\2\2\u0185")
        buf.write("\u01f5\5\30\r#\u0186\u0187\f!\2\2\u0187\u0188\t\b\2\2")
        buf.write("\u0188\u01f5\5\30\r\"\u0189\u018a\f \2\2\u018a\u018b\5")
        buf.write("J&\2\u018b\u018c\5\30\r!\u018c\u01f5\3\2\2\2\u018d\u0193")
        buf.write("\f\36\2\2\u018e\u0190\7&\2\2\u018f\u0191\7\u00e4\2\2\u0190")
        buf.write("\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0194\3\2\2\2")
        buf.write("\u0192\u0194\7\u00e1\2\2\u0193\u018e\3\2\2\2\u0193\u0192")
        buf.write("\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u01f5\5\30\r\37\u0196")
        buf.write("\u0197\f\34\2\2\u0197\u0198\7\'\2\2\u0198\u01f5\5\30\r")
        buf.write("\35\u0199\u019a\f\33\2\2\u019a\u019b\7(\2\2\u019b\u01f5")
        buf.write("\5\30\r\34\u019c\u019d\f\22\2\2\u019d\u019e\t\5\2\2\u019e")
        buf.write("\u01f5\5\30\r\23\u019f\u01a0\f\21\2\2\u01a0\u01a1\7\u00e0")
        buf.write("\2\2\u01a1\u01f5\5\30\r\22\u01a2\u01a3\f\20\2\2\u01a3")
        buf.write("\u01a4\7\3\2\2\u01a4\u01a5\5\30\r\2\u01a5\u01a6\7\4\2")
        buf.write("\2\u01a6\u01a7\5\30\r\21\u01a7\u01f5\3\2\2\2\u01a8\u01a9")
        buf.write("\f\7\2\2\u01a9\u01aa\7\u00dd\2\2\u01aa\u01ab\5F$\2\u01ab")
        buf.write("\u01ac\7\u00dc\2\2\u01ac\u01ad\5\30\r\b\u01ad\u01f5\3")
        buf.write("\2\2\2\u01ae\u01af\f\67\2\2\u01af\u01b8\7\25\2\2\u01b0")
        buf.write("\u01b5\5\30\r\2\u01b1\u01b2\7\26\2\2\u01b2\u01b4\5\30")
        buf.write("\r\2\u01b3\u01b1\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b3")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7")
        buf.write("\u01b5\3\2\2\2\u01b8\u01b0\3\2\2\2\u01b8\u01b9\3\2\2\2")
        buf.write("\u01b9\u01ba\3\2\2\2\u01ba\u01f5\7\u00ed\2\2\u01bb\u01bc")
        buf.write("\f\64\2\2\u01bc\u01f5\5 \21\2\u01bd\u01be\f\62\2\2\u01be")
        buf.write("\u01bf\7\u00dd\2\2\u01bf\u01c0\7\30\2\2\u01c0\u01c1\7")
        buf.write("\f\2\2\u01c1\u01f5\5<\37\2\u01c2\u01c3\f\61\2\2\u01c3")
        buf.write("\u01c5\7\31\2\2\u01c4\u01c6\7\32\2\2\u01c5\u01c4\3\2\2")
        buf.write("\2\u01c5\u01c6\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c8")
        buf.write("\7\33\2\2\u01c8\u01c9\7\f\2\2\u01c9\u01f5\5<\37\2\u01ca")
        buf.write("\u01cb\f\60\2\2\u01cb\u01cc\7\u00dd\2\2\u01cc\u01ce\5")
        buf.write("F$\2\u01cd\u01cf\5\32\16\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf")
        buf.write("\3\2\2\2\u01cf\u01f5\3\2\2\2\u01d0\u01d1\f/\2\2\u01d1")
        buf.write("\u01d3\7\u00dd\2\2\u01d2\u01d4\7\u00ee\2\2\u01d3\u01d2")
        buf.write("\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5")
        buf.write("\u01f5\5F$\2\u01d6\u01d7\f.\2\2\u01d7\u01d8\7\u00dd\2")
        buf.write("\2\u01d8\u01d9\7\25\2\2\u01d9\u01da\7\u00ee\2\2\u01da")
        buf.write("\u01db\7\u00ed\2\2\u01db\u01f5\5F$\2\u01dc\u01dd\f-\2")
        buf.write("\2\u01dd\u01f5\5\32\16\2\u01de\u01df\f,\2\2\u01df\u01e0")
        buf.write("\7\34\2\2\u01e0\u01f5\5\"\22\2\u01e1\u01e2\f)\2\2\u01e2")
        buf.write("\u01f5\5$\23\2\u01e3\u01e4\f(\2\2\u01e4\u01f5\5<\37\2")
        buf.write("\u01e5\u01e6\f\'\2\2\u01e6\u01e7\7\37\2\2\u01e7\u01f5")
        buf.write("\5<\37\2\u01e8\u01e9\f&\2\2\u01e9\u01f5\7 \2\2\u01ea\u01eb")
        buf.write("\f\37\2\2\u01eb\u01ec\5\34\17\2\u01ec\u01ed\t\t\2\2\u01ed")
        buf.write("\u01ee\5F$\2\u01ee\u01f5\3\2\2\2\u01ef\u01f0\f\24\2\2")
        buf.write("\u01f0\u01f1\7\20\2\2\u01f1\u01f2\5\30\r\2\u01f2\u01f3")
        buf.write("\7\u00ec\2\2\u01f3\u01f5\3\2\2\2\u01f4\u017c\3\2\2\2\u01f4")
        buf.write("\u0180\3\2\2\2\u01f4\u0183\3\2\2\2\u01f4\u0186\3\2\2\2")
        buf.write("\u01f4\u0189\3\2\2\2\u01f4\u018d\3\2\2\2\u01f4\u0196\3")
        buf.write("\2\2\2\u01f4\u0199\3\2\2\2\u01f4\u019c\3\2\2\2\u01f4\u019f")
        buf.write("\3\2\2\2\u01f4\u01a2\3\2\2\2\u01f4\u01a8\3\2\2\2\u01f4")
        buf.write("\u01ae\3\2\2\2\u01f4\u01bb\3\2\2\2\u01f4\u01bd\3\2\2\2")
        buf.write("\u01f4\u01c2\3\2\2\2\u01f4\u01ca\3\2\2\2\u01f4\u01d0\3")
        buf.write("\2\2\2\u01f4\u01d6\3\2\2\2\u01f4\u01dc\3\2\2\2\u01f4\u01de")
        buf.write("\3\2\2\2\u01f4\u01e1\3\2\2\2\u01f4\u01e3\3\2\2\2\u01f4")
        buf.write("\u01e5\3\2\2\2\u01f4\u01e8\3\2\2\2\u01f4\u01ea\3\2\2\2")
        buf.write("\u01f4\u01ef\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3")
        buf.write("\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\31\3\2\2\2\u01f8\u01f6")
        buf.write("\3\2\2\2\u01f9\u01fa\7\61\2\2\u01fa\u020c\b\16\1\2\u01fb")
        buf.write("\u01fc\7\62\2\2\u01fc\u01fd\7\u00e4\2\2\u01fd\u01fe\7")
        buf.write("\63\2\2\u01fe\u020c\b\16\1\2\u01ff\u0200\7\64\2\2\u0200")
        buf.write("\u0201\7\63\2\2\u0201\u020c\b\16\1\2\u0202\u0203\7\65")
        buf.write("\2\2\u0203\u020c\b\16\1\2\u0204\u0205\7&\2\2\u0205\u0206")
        buf.write("\7\u00e4\2\2\u0206\u0207\7\66\2\2\u0207\u020c\b\16\1\2")
        buf.write("\u0208\u0209\7\u00e1\2\2\u0209\u020a\7\66\2\2\u020a\u020c")
        buf.write("\b\16\1\2\u020b\u01f9\3\2\2\2\u020b\u01fb\3\2\2\2\u020b")
        buf.write("\u01ff\3\2\2\2\u020b\u0202\3\2\2\2\u020b\u0204\3\2\2\2")
        buf.write("\u020b\u0208\3\2\2\2\u020c\33\3\2\2\2\u020d\u020e\7\67")
        buf.write("\2\2\u020e\u0217\b\17\1\2\u020f\u0210\7\62\2\2\u0210\u0211")
        buf.write("\7\u00e4\2\2\u0211\u0212\78\2\2\u0212\u0217\b\17\1\2\u0213")
        buf.write("\u0214\7\64\2\2\u0214\u0215\78\2\2\u0215\u0217\b\17\1")
        buf.write("\2\u0216\u020d\3\2\2\2\u0216\u020f\3\2\2\2\u0216\u0213")
        buf.write("\3\2\2\2\u0217\35\3\2\2\2\u0218\u0219\79\2\2\u0219\u021d")
        buf.write("\b\20\1\2\u021a\u021b\7:\2\2\u021b\u021d\b\20\1\2\u021c")
        buf.write("\u0218\3\2\2\2\u021c\u021a\3\2\2\2\u021d\37\3\2\2\2\u021e")
        buf.write("\u021f\t\n\2\2\u021f\u0220\b\21\1\2\u0220\u022b\b\21\1")
        buf.write("\2\u0221\u0222\t\13\2\2\u0222\u0223\b\21\1\2\u0223\u022b")
        buf.write("\b\21\1\2\u0224\u0225\t\f\2\2\u0225\u0226\b\21\1\2\u0226")
        buf.write("\u022b\b\21\1\2\u0227\u0228\t\r\2\2\u0228\u0229\b\21\1")
        buf.write("\2\u0229\u022b\b\21\1\2\u022a\u021e\3\2\2\2\u022a\u0221")
        buf.write("\3\2\2\2\u022a\u0224\3\2\2\2\u022a\u0227\3\2\2\2\u022b")
        buf.write("!\3\2\2\2\u022c\u022d\t\16\2\2\u022d\u0233\b\22\1\2\u022e")
        buf.write("\u022f\t\17\2\2\u022f\u0233\b\22\1\2\u0230\u0231\7D\2")
        buf.write("\2\u0231\u0233\b\22\1\2\u0232\u022c\3\2\2\2\u0232\u022e")
        buf.write("\3\2\2\2\u0232\u0230\3\2\2\2\u0233#\3\2\2\2\u0234\u0235")
        buf.write("\6\23\35\3\u0235\u0236\7E\2\2\u0236\u0237\b\23\1\2\u0237")
        buf.write("\u0243\b\23\1\2\u0238\u0239\7F\2\2\u0239\u023a\b\23\1")
        buf.write("\2\u023a\u0243\b\23\1\2\u023b\u023c\6\23\36\3\u023c\u023d")
        buf.write("\t\20\2\2\u023d\u023e\b\23\1\2\u023e\u0243\b\23\1\2\u023f")
        buf.write("\u0240\t\21\2\2\u0240\u0241\b\23\1\2\u0241\u0243\b\23")
        buf.write("\1\2\u0242\u0234\3\2\2\2\u0242\u0238\3\2\2\2\u0242\u023b")
        buf.write("\3\2\2\2\u0242\u023f\3\2\2\2\u0243%\3\2\2\2\u0244\u0245")
        buf.write("\7E\2\2\u0245\u0249\b\24\1\2\u0246\u0247\t\20\2\2\u0247")
        buf.write("\u0249\b\24\1\2\u0248\u0244\3\2\2\2\u0248\u0246\3\2\2")
        buf.write("\2\u0249\'\3\2\2\2\u024a\u024d\5*\26\2\u024b\u024e\5\n")
        buf.write("\6\2\u024c\u024e\5\30\r\2\u024d\u024b\3\2\2\2\u024d\u024c")
        buf.write("\3\2\2\2\u024e)\3\2\2\2\u024f\u0250\7K\2\2\u0250\u0259")
        buf.write("\7\25\2\2\u0251\u0256\5,\27\2\u0252\u0253\7\26\2\2\u0253")
        buf.write("\u0255\5,\27\2\u0254\u0252\3\2\2\2\u0255\u0258\3\2\2\2")
        buf.write("\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u025a\3")
        buf.write("\2\2\2\u0258\u0256\3\2\2\2\u0259\u0251\3\2\2\2\u0259\u025a")
        buf.write("\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025e\7\u00ed\2\2\u025c")
        buf.write("\u025d\7L\2\2\u025d\u025f\5\60\31\2\u025e\u025c\3\2\2")
        buf.write("\2\u025e\u025f\3\2\2\2\u025f+\3\2\2\2\u0260\u0262\t\t")
        buf.write("\2\2\u0261\u0260\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0263")
        buf.write("\3\2\2\2\u0263\u0264\5\60\31\2\u0264\u0265\b\27\1\2\u0265")
        buf.write("\u0278\3\2\2\2\u0266\u0267\5\60\31\2\u0267\u0268\b\27")
        buf.write("\1\2\u0268\u0269\7\u00f0\2\2\u0269\u026a\b\27\1\2\u026a")
        buf.write("\u0278\3\2\2\2\u026b\u026c\5\60\31\2\u026c\u026d\5N(\2")
        buf.write("\u026d\u026e\b\27\1\2\u026e\u026f\b\27\1\2\u026f\u0278")
        buf.write("\3\2\2\2\u0270\u0271\5N(\2\u0271\u0272\7\u00e0\2\2\u0272")
        buf.write("\u0273\5\60\31\2\u0273\u0274\b\27\1\2\u0274\u0275\b\27")
        buf.write("\1\2\u0275\u0276\b\27\1\2\u0276\u0278\3\2\2\2\u0277\u0261")
        buf.write("\3\2\2\2\u0277\u0266\3\2\2\2\u0277\u026b\3\2\2\2\u0277")
        buf.write("\u0270\3\2\2\2\u0278-\3\2\2\2\u0279\u027a\7M\2\2\u027a")
        buf.write("\u027b\7\u00e6\2\2\u027b\u02a1\b\30\1\2\u027c\u027d\7")
        buf.write("M\2\2\u027d\u027e\7\u00e5\2\2\u027e\u02a1\b\30\1\2\u027f")
        buf.write("\u0281\7\u00e9\2\2\u0280\u0282\7N\2\2\u0281\u0280\3\2")
        buf.write("\2\2\u0281\u0282\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u02a1")
        buf.write("\b\30\1\2\u0284\u028a\7O\2\2\u0285\u0287\7P\2\2\u0286")
        buf.write("\u0288\7!\2\2\u0287\u0286\3\2\2\2\u0287\u0288\3\2\2\2")
        buf.write("\u0288\u0289\3\2\2\2\u0289\u028b\7Q\2\2\u028a\u0285\3")
        buf.write("\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u02a1")
        buf.write("\b\30\1\2\u028d\u028e\7R\2\2\u028e\u028f\7S\2\2\u028f")
        buf.write("\u02a1\b\30\1\2\u0290\u0291\7R\2\2\u0291\u0292\7T\2\2")
        buf.write("\u0292\u02a1\b\30\1\2\u0293\u0297\7R\2\2\u0294\u0298\7")
        buf.write("U\2\2\u0295\u0296\7V\2\2\u0296\u0298\7W\2\2\u0297\u0294")
        buf.write("\3\2\2\2\u0297\u0295\3\2\2\2\u0298\u0299\3\2\2\2\u0299")
        buf.write("\u02a1\b\30\1\2\u029a\u029b\7R\2\2\u029b\u029c\7X\2\2")
        buf.write("\u029c\u02a1\b\30\1\2\u029d\u029e\7R\2\2\u029e\u029f\7")
        buf.write("Y\2\2\u029f\u02a1\b\30\1\2\u02a0\u0279\3\2\2\2\u02a0\u027c")
        buf.write("\3\2\2\2\u02a0\u027f\3\2\2\2\u02a0\u0284\3\2\2\2\u02a0")
        buf.write("\u028d\3\2\2\2\u02a0\u0290\3\2\2\2\u02a0\u0293\3\2\2\2")
        buf.write("\u02a0\u029a\3\2\2\2\u02a0\u029d\3\2\2\2\u02a1/\3\2\2")
        buf.write("\2\u02a2\u02a3\7\u00ee\2\2\u02a3\u02a4\5\62\32\2\u02a4")
        buf.write("\u02a5\b\31\1\2\u02a5\u02b0\3\2\2\2\u02a6\u02a7\7\25\2")
        buf.write("\2\u02a7\u02a8\7\u00ee\2\2\u02a8\u02a9\7\u00ed\2\2\u02a9")
        buf.write("\u02aa\5\62\32\2\u02aa\u02ab\b\31\1\2\u02ab\u02b0\3\2")
        buf.write("\2\2\u02ac\u02ad\5\62\32\2\u02ad\u02ae\b\31\1\2\u02ae")
        buf.write("\u02b0\3\2\2\2\u02af\u02a2\3\2\2\2\u02af\u02a6\3\2\2\2")
        buf.write("\u02af\u02ac\3\2\2\2\u02b0\61\3\2\2\2\u02b1\u02b2\5\66")
        buf.write("\34\2\u02b2\u02b3\7Z\2\2\u02b3\u02b4\b\32\1\2\u02b4\u02b9")
        buf.write("\3\2\2\2\u02b5\u02b6\5\64\33\2\u02b6\u02b7\b\32\1\2\u02b7")
        buf.write("\u02b9\3\2\2\2\u02b8\u02b1\3\2\2\2\u02b8\u02b5\3\2\2\2")
        buf.write("\u02b9\63\3\2\2\2\u02ba\u02bb\7.\2\2\u02bb\u02dd\b\33")
        buf.write("\1\2\u02bc\u02bd\7\33\2\2\u02bd\u02dd\b\33\1\2\u02be\u02bf")
        buf.write("\7N\2\2\u02bf\u02dd\b\33\1\2\u02c0\u02c1\7[\2\2\u02c1")
        buf.write("\u02dd\b\33\1\2\u02c2\u02c3\7\\\2\2\u02c3\u02dd\b\33\1")
        buf.write("\2\u02c4\u02c5\7]\2\2\u02c5\u02dd\b\33\1\2\u02c6\u02c7")
        buf.write("\7^\2\2\u02c7\u02dd\b\33\1\2\u02c8\u02c9\7_\2\2\u02c9")
        buf.write("\u02dd\b\33\1\2\u02ca\u02cb\t\6\2\2\u02cb\u02dd\b\33\1")
        buf.write("\2\u02cc\u02cd\7\"\2\2\u02cd\u02dd\b\33\1\2\u02ce\u02cf")
        buf.write("\7`\2\2\u02cf\u02dd\b\33\1\2\u02d0\u02d1\7a\2\2\u02d1")
        buf.write("\u02d2\7b\2\2\u02d2\u02dd\b\33\1\2\u02d3\u02d4\7c\2\2")
        buf.write("\u02d4\u02d5\7b\2\2\u02d5\u02dd\b\33\1\2\u02d6\u02d7\5")
        buf.write(":\36\2\u02d7\u02d8\b\33\1\2\u02d8\u02dd\3\2\2\2\u02d9")
        buf.write("\u02da\5\66\34\2\u02da\u02db\b\33\1\2\u02db\u02dd\3\2")
        buf.write("\2\2\u02dc\u02ba\3\2\2\2\u02dc\u02bc\3\2\2\2\u02dc\u02be")
        buf.write("\3\2\2\2\u02dc\u02c0\3\2\2\2\u02dc\u02c2\3\2\2\2\u02dc")
        buf.write("\u02c4\3\2\2\2\u02dc\u02c6\3\2\2\2\u02dc\u02c8\3\2\2\2")
        buf.write("\u02dc\u02ca\3\2\2\2\u02dc\u02cc\3\2\2\2\u02dc\u02ce\3")
        buf.write("\2\2\2\u02dc\u02d0\3\2\2\2\u02dc\u02d3\3\2\2\2\u02dc\u02d6")
        buf.write("\3\2\2\2\u02dc\u02d9\3\2\2\2\u02dd\65\3\2\2\2\u02de\u02df")
        buf.write("\7d\2\2\u02df\u02ed\b\34\1\2\u02e0\u02e1\7e\2\2\u02e1")
        buf.write("\u02ed\b\34\1\2\u02e2\u02e4\t\22\2\2\u02e3\u02e5\7h\2")
        buf.write("\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6")
        buf.write("\3\2\2\2\u02e6\u02ed\b\34\1\2\u02e7\u02e8\7i\2\2\u02e8")
        buf.write("\u02ed\b\34\1\2\u02e9\u02ea\58\35\2\u02ea\u02eb\b\34\1")
        buf.write("\2\u02eb\u02ed\3\2\2\2\u02ec\u02de\3\2\2\2\u02ec\u02e0")
        buf.write("\3\2\2\2\u02ec\u02e2\3\2\2\2\u02ec\u02e7\3\2\2\2\u02ec")
        buf.write("\u02e9\3\2\2\2\u02ed\67\3\2\2\2\u02ee\u02ef\7j\2\2\u02ef")
        buf.write("\u02fc\b\35\1\2\u02f0\u02f1\7k\2\2\u02f1\u02fc\b\35\1")
        buf.write("\2\u02f2\u02f3\7l\2\2\u02f3\u02fc\b\35\1\2\u02f4\u02f5")
        buf.write("\7m\2\2\u02f5\u02fc\b\35\1\2\u02f6\u02f7\7n\2\2\u02f7")
        buf.write("\u02fc\b\35\1\2\u02f8\u02f9\t\22\2\2\u02f9\u02fa\t\23")
        buf.write("\2\2\u02fa\u02fc\b\35\1\2\u02fb\u02ee\3\2\2\2\u02fb\u02f0")
        buf.write("\3\2\2\2\u02fb\u02f2\3\2\2\2\u02fb\u02f4\3\2\2\2\u02fb")
        buf.write("\u02f6\3\2\2\2\u02fb\u02f8\3\2\2\2\u02fc9\3\2\2\2\u02fd")
        buf.write("\u02fe\7q\2\2\u02fe\u032e\b\36\1\2\u02ff\u0301\7r\2\2")
        buf.write("\u0300\u02ff\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\3")
        buf.write("\2\2\2\u0302\u0303\7s\2\2\u0303\u032e\b\36\1\2\u0304\u0305")
        buf.write("\7t\2\2\u0305\u032e\b\36\1\2\u0306\u0307\7u\2\2\u0307")
        buf.write("\u030d\t\24\2\2\u0308\u030a\7u\2\2\u0309\u0308\3\2\2\2")
        buf.write("\u0309\u030a\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030d\7")
        buf.write("w\2\2\u030c\u0306\3\2\2\2\u030c\u0309\3\2\2\2\u030d\u030e")
        buf.write("\3\2\2\2\u030e\u032e\b\36\1\2\u030f\u0310\7t\2\2\u0310")
        buf.write("\u0311\7q\2\2\u0311\u032e\b\36\1\2\u0312\u0314\7t\2\2")
        buf.write("\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\3")
        buf.write("\2\2\2\u0315\u0316\7x\2\2\u0316\u032e\b\36\1\2\u0317\u031b")
        buf.write("\7y\2\2\u0318\u0319\7V\2\2\u0319\u031b\7z\2\2\u031a\u0317")
        buf.write("\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031c\3\2\2\2\u031c")
        buf.write("\u032e\b\36\1\2\u031d\u031e\7{\2\2\u031e\u032e\b\36\1")
        buf.write("\2\u031f\u0320\7|\2\2\u0320\u032e\b\36\1\2\u0321\u0322")
        buf.write("\7}\2\2\u0322\u0323\7~\2\2\u0323\u032e\b\36\1\2\u0324")
        buf.write("\u0325\7}\2\2\u0325\u0326\7\177\2\2\u0326\u032e\b\36\1")
        buf.write("\2\u0327\u0328\7\u0080\2\2\u0328\u032e\b\36\1\2\u0329")
        buf.write("\u032a\7a\2\2\u032a\u032e\b\36\1\2\u032b\u032c\7c\2\2")
        buf.write("\u032c\u032e\b\36\1\2\u032d\u02fd\3\2\2\2\u032d\u0300")
        buf.write("\3\2\2\2\u032d\u0304\3\2\2\2\u032d\u030c\3\2\2\2\u032d")
        buf.write("\u030f\3\2\2\2\u032d\u0313\3\2\2\2\u032d\u031a\3\2\2\2")
        buf.write("\u032d\u031d\3\2\2\2\u032d\u031f\3\2\2\2\u032d\u0321\3")
        buf.write("\2\2\2\u032d\u0324\3\2\2\2\u032d\u0327\3\2\2\2\u032d\u0329")
        buf.write("\3\2\2\2\u032d\u032b\3\2\2\2\u032e;\3\2\2\2\u032f\u0330")
        buf.write("\t\25\2\2\u0330\u0340\b\37\1\2\u0331\u0332\t\26\2\2\u0332")
        buf.write("\u0340\b\37\1\2\u0333\u0334\t\27\2\2\u0334\u0340\b\37")
        buf.write("\1\2\u0335\u0336\t\30\2\2\u0336\u0340\b\37\1\2\u0337\u0338")
        buf.write("\t\31\2\2\u0338\u0340\b\37\1\2\u0339\u033a\t\32\2\2\u033a")
        buf.write("\u0340\b\37\1\2\u033b\u033c\t\33\2\2\u033c\u0340\b\37")
        buf.write("\1\2\u033d\u033e\t\34\2\2\u033e\u0340\b\37\1\2\u033f\u032f")
        buf.write("\3\2\2\2\u033f\u0331\3\2\2\2\u033f\u0333\3\2\2\2\u033f")
        buf.write("\u0335\3\2\2\2\u033f\u0337\3\2\2\2\u033f\u0339\3\2\2\2")
        buf.write("\u033f\u033b\3\2\2\2\u033f\u033d\3\2\2\2\u0340=\3\2\2")
        buf.write("\2\u0341\u0342\7t\2\2\u0342\u0357\b \1\2\u0343\u0347\7")
        buf.write("y\2\2\u0344\u0345\7V\2\2\u0345\u0347\7z\2\2\u0346\u0343")
        buf.write("\3\2\2\2\u0346\u0344\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u0357\b \1\2\u0349\u034a\7{\2\2\u034a\u0357\b \1\2\u034b")
        buf.write("\u034c\7|\2\2\u034c\u0357\b \1\2\u034d\u034e\7u\2\2\u034e")
        buf.write("\u0354\t\24\2\2\u034f\u0351\7u\2\2\u0350\u034f\3\2\2\2")
        buf.write("\u0350\u0351\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\7")
        buf.write("w\2\2\u0353\u034d\3\2\2\2\u0353\u0350\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0357\b \1\2\u0356\u0341\3\2\2\2\u0356")
        buf.write("\u0346\3\2\2\2\u0356\u0349\3\2\2\2\u0356\u034b\3\2\2\2")
        buf.write("\u0356\u0353\3\2\2\2\u0357?\3\2\2\2\u0358\u0359\t\35\2")
        buf.write("\2\u0359A\3\2\2\2\u035a\u035b\t\36\2\2\u035bC\3\2\2\2")
        buf.write("\u035c\u035f\5@!\2\u035d\u035f\5B\"\2\u035e\u035c\3\2")
        buf.write("\2\2\u035e\u035d\3\2\2\2\u035fE\3\2\2\2\u0360\u0361\7")
        buf.write("\22\2\2\u0361\u03b7\7q\2\2\u0362\u0363\7\u00a0\2\2\u0363")
        buf.write("\u03b7\t\37\2\2\u0364\u0365\7\u00a3\2\2\u0365\u03b7\t")
        buf.write("\37\2\2\u0366\u0367\7\22\2\2\u0367\u03b7\t\6\2\2\u0368")
        buf.write("\u0369\7\u00a4\2\2\u0369\u03b7\7\u00a5\2\2\u036a\u036b")
        buf.write("\7\u00a6\2\2\u036b\u03b7\7\u00a7\2\2\u036c\u036d\7\u00a8")
        buf.write("\2\2\u036d\u03b7\7\u00a7\2\2\u036e\u036f\7s\2\2\u036f")
        buf.write("\u03b7\t\22\2\2\u0370\u0371\7\u00a9\2\2\u0371\u03b7\t")
        buf.write("\22\2\2\u0372\u0373\7}\2\2\u0373\u03b7\7~\2\2\u0374\u0375")
        buf.write("\5D#\2\u0375\u0376\7n\2\2\u0376\u03b7\3\2\2\2\u0377\u0378")
        buf.write("\5D#\2\u0378\u0379\t \2\2\u0379\u03b7\3\2\2\2\u037a\u037c")
        buf.write("\7}\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u037d\3\2\2\2\u037d\u03b7\7\177\2\2\u037e\u037f\7V\2")
        buf.write("\2\u037f\u03b7\7z\2\2\u0380\u0381\7\u00aa\2\2\u0381\u03b7")
        buf.write("\7\u00ab\2\2\u0382\u0383\t!\2\2\u0383\u03b7\7\u00ad\2")
        buf.write("\2\u0384\u0385\t!\2\2\u0385\u03b7\7\u00ae\2\2\u0386\u0388")
        buf.write("\7\u00af\2\2\u0387\u0389\7\u00b0\2\2\u0388\u0387\3\2\2")
        buf.write("\2\u0388\u0389\3\2\2\2\u0389\u03b7\3\2\2\2\u038a\u038c")
        buf.write("\7\u00b1\2\2\u038b\u038d\7\u00b0\2\2\u038c\u038b\3\2\2")
        buf.write("\2\u038c\u038d\3\2\2\2\u038d\u03b7\3\2\2\2\u038e\u0390")
        buf.write("\5D#\2\u038f\u0391\7\u00b0\2\2\u0390\u038f\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u03b7\3\2\2\2\u0392\u0394\7\u00b2")
        buf.write("\2\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0398")
        buf.write("\3\2\2\2\u0395\u0398\7\u00b3\2\2\u0396\u0398\7\u00b4\2")
        buf.write("\2\u0397\u0393\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0396")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u03b7\7\u00b5\2\2\u039a")
        buf.write("\u039b\t\"\2\2\u039b\u03b7\t#\2\2\u039c\u03b7\5R*\2\u039d")
        buf.write("\u03b7\7.\2\2\u039e\u03b7\7q\2\2\u039f\u03b7\7t\2\2\u03a0")
        buf.write("\u03b7\7m\2\2\u03a1\u03b7\7\"\2\2\u03a2\u03b7\7y\2\2\u03a3")
        buf.write("\u03b7\7{\2\2\u03a4\u03b7\7|\2\2\u03a5\u03b7\7N\2\2\u03a6")
        buf.write("\u03b7\7\u0080\2\2\u03a7\u03b7\7\u00a5\2\2\u03a8\u03b7")
        buf.write("\7c\2\2\u03a9\u03b7\7i\2\2\u03aa\u03b7\7g\2\2\u03ab\u03b7")
        buf.write("\7f\2\2\u03ac\u03b7\7x\2\2\u03ad\u03b7\7\35\2\2\u03ae")
        buf.write("\u03b7\7\36\2\2\u03af\u03b7\7E\2\2\u03b0\u03b7\7G\2\2")
        buf.write("\u03b1\u03b7\7H\2\2\u03b2\u03b7\7n\2\2\u03b3\u03b7\7\177")
        buf.write("\2\2\u03b4\u03b7\7\u00b0\2\2\u03b5\u03b7\7\u00ef\2\2\u03b6")
        buf.write("\u0360\3\2\2\2\u03b6\u0362\3\2\2\2\u03b6\u0364\3\2\2\2")
        buf.write("\u03b6\u0366\3\2\2\2\u03b6\u0368\3\2\2\2\u03b6\u036a\3")
        buf.write("\2\2\2\u03b6\u036c\3\2\2\2\u03b6\u036e\3\2\2\2\u03b6\u0370")
        buf.write("\3\2\2\2\u03b6\u0372\3\2\2\2\u03b6\u0374\3\2\2\2\u03b6")
        buf.write("\u0377\3\2\2\2\u03b6\u037b\3\2\2\2\u03b6\u037e\3\2\2\2")
        buf.write("\u03b6\u0380\3\2\2\2\u03b6\u0382\3\2\2\2\u03b6\u0384\3")
        buf.write("\2\2\2\u03b6\u0386\3\2\2\2\u03b6\u038a\3\2\2\2\u03b6\u038e")
        buf.write("\3\2\2\2\u03b6\u0397\3\2\2\2\u03b6\u039a\3\2\2\2\u03b6")
        buf.write("\u039c\3\2\2\2\u03b6\u039d\3\2\2\2\u03b6\u039e\3\2\2\2")
        buf.write("\u03b6\u039f\3\2\2\2\u03b6\u03a0\3\2\2\2\u03b6\u03a1\3")
        buf.write("\2\2\2\u03b6\u03a2\3\2\2\2\u03b6\u03a3\3\2\2\2\u03b6\u03a4")
        buf.write("\3\2\2\2\u03b6\u03a5\3\2\2\2\u03b6\u03a6\3\2\2\2\u03b6")
        buf.write("\u03a7\3\2\2\2\u03b6\u03a8\3\2\2\2\u03b6\u03a9\3\2\2\2")
        buf.write("\u03b6\u03aa\3\2\2\2\u03b6\u03ab\3\2\2\2\u03b6\u03ac\3")
        buf.write("\2\2\2\u03b6\u03ad\3\2\2\2\u03b6\u03ae\3\2\2\2\u03b6\u03af")
        buf.write("\3\2\2\2\u03b6\u03b0\3\2\2\2\u03b6\u03b1\3\2\2\2\u03b6")
        buf.write("\u03b2\3\2\2\2\u03b6\u03b3\3\2\2\2\u03b6\u03b4\3\2\2\2")
        buf.write("\u03b6\u03b5\3\2\2\2\u03b7G\3\2\2\2\u03b8\u03b9\7\22\2")
        buf.write("\2\u03b9\u03ba\7q\2\2\u03ba\u03fa\b%\1\2\u03bb\u03bc\7")
        buf.write("\u00a0\2\2\u03bc\u03bd\t\37\2\2\u03bd\u03fa\b%\1\2\u03be")
        buf.write("\u03bf\7\u00a3\2\2\u03bf\u03c0\t\37\2\2\u03c0\u03fa\b")
        buf.write("%\1\2\u03c1\u03c2\7\22\2\2\u03c2\u03c3\t\6\2\2\u03c3\u03fa")
        buf.write("\b%\1\2\u03c4\u03c5\7\u00a4\2\2\u03c5\u03c6\7\u00a5\2")
        buf.write("\2\u03c6\u03fa\b%\1\2\u03c7\u03c8\7\u00a6\2\2\u03c8\u03c9")
        buf.write("\7\u00a7\2\2\u03c9\u03fa\b%\1\2\u03ca\u03cb\7\u00a8\2")
        buf.write("\2\u03cb\u03cc\7\u00a7\2\2\u03cc\u03fa\b%\1\2\u03cd\u03ce")
        buf.write("\7s\2\2\u03ce\u03cf\t\22\2\2\u03cf\u03fa\b%\1\2\u03d0")
        buf.write("\u03d1\7\u00a9\2\2\u03d1\u03d2\t\22\2\2\u03d2\u03fa\b")
        buf.write("%\1\2\u03d3\u03d4\7}\2\2\u03d4\u03d5\7~\2\2\u03d5\u03fa")
        buf.write("\b%\1\2\u03d6\u03d7\t\35\2\2\u03d7\u03d8\7n\2\2\u03d8")
        buf.write("\u03fa\b%\1\2\u03d9\u03da\t\36\2\2\u03da\u03db\7n\2\2")
        buf.write("\u03db\u03fa\b%\1\2\u03dc\u03dd\t\35\2\2\u03dd\u03de\t")
        buf.write(" \2\2\u03de\u03fa\b%\1\2\u03df\u03e0\t\36\2\2\u03e0\u03e1")
        buf.write("\t \2\2\u03e1\u03fa\b%\1\2\u03e2\u03e3\7}\2\2\u03e3\u03e4")
        buf.write("\7\177\2\2\u03e4\u03fa\b%\1\2\u03e5\u03e6\7V\2\2\u03e6")
        buf.write("\u03e7\7z\2\2\u03e7\u03fa\b%\1\2\u03e8\u03e9\7\u00aa\2")
        buf.write("\2\u03e9\u03ea\7\u00ab\2\2\u03ea\u03fa\b%\1\2\u03eb\u03ec")
        buf.write("\t!\2\2\u03ec\u03ed\7\u00ad\2\2\u03ed\u03fa\b%\1\2\u03ee")
        buf.write("\u03ef\t!\2\2\u03ef\u03f0\7\u00ae\2\2\u03f0\u03fa\b%\1")
        buf.write("\2\u03f1\u03f2\7\u00af\2\2\u03f2\u03f3\7\u00b0\2\2\u03f3")
        buf.write("\u03fa\b%\1\2\u03f4\u03f5\7\u00b1\2\2\u03f5\u03f6\7\u00b0")
        buf.write("\2\2\u03f6\u03fa\b%\1\2\u03f7\u03f8\t$\2\2\u03f8\u03fa")
        buf.write("\b%\1\2\u03f9\u03b8\3\2\2\2\u03f9\u03bb\3\2\2\2\u03f9")
        buf.write("\u03be\3\2\2\2\u03f9\u03c1\3\2\2\2\u03f9\u03c4\3\2\2\2")
        buf.write("\u03f9\u03c7\3\2\2\2\u03f9\u03ca\3\2\2\2\u03f9\u03cd\3")
        buf.write("\2\2\2\u03f9\u03d0\3\2\2\2\u03f9\u03d3\3\2\2\2\u03f9\u03d6")
        buf.write("\3\2\2\2\u03f9\u03d9\3\2\2\2\u03f9\u03dc\3\2\2\2\u03f9")
        buf.write("\u03df\3\2\2\2\u03f9\u03e2\3\2\2\2\u03f9\u03e5\3\2\2\2")
        buf.write("\u03f9\u03e8\3\2\2\2\u03f9\u03eb\3\2\2\2\u03f9\u03ee\3")
        buf.write("\2\2\2\u03f9\u03f1\3\2\2\2\u03f9\u03f4\3\2\2\2\u03f9\u03f7")
        buf.write("\3\2\2\2\u03faI\3\2\2\2\u03fb\u03fc\7\u00ba\2\2\u03fc")
        buf.write("\u0408\b&\1\2\u03fd\u03fe\7\u00bb\2\2\u03fe\u0408\b&\1")
        buf.write("\2\u03ff\u0400\7\u00bc\2\2\u0400\u0408\b&\1\2\u0401\u0402")
        buf.write("\7\u00bd\2\2\u0402\u0408\b&\1\2\u0403\u0404\7\u00be\2")
        buf.write("\2\u0404\u0408\b&\1\2\u0405\u0406\7\u00bf\2\2\u0406\u0408")
        buf.write("\b&\1\2\u0407\u03fb\3\2\2\2\u0407\u03fd\3\2\2\2\u0407")
        buf.write("\u03ff\3\2\2\2\u0407\u0401\3\2\2\2\u0407\u0403\3\2\2\2")
        buf.write("\u0407\u0405\3\2\2\2\u0408K\3\2\2\2\u0409\u040a\t%\2\2")
        buf.write("\u040a\u040e\b\'\1\2\u040b\u040c\t&\2\2\u040c\u040e\b")
        buf.write("\'\1\2\u040d\u0409\3\2\2\2\u040d\u040b\3\2\2\2\u040eM")
        buf.write("\3\2\2\2\u040f\u0410\5P)\2\u0410\u0411\b(\1\2\u0411\u0418")
        buf.write("\3\2\2\2\u0412\u0413\7\u00ef\2\2\u0413\u0418\b(\1\2\u0414")
        buf.write("\u0415\5R*\2\u0415\u0416\b(\1\2\u0416\u0418\3\2\2\2\u0417")
        buf.write("\u040f\3\2\2\2\u0417\u0412\3\2\2\2\u0417\u0414\3\2\2\2")
        buf.write("\u0418O\3\2\2\2\u0419\u041b\7\u00e6\2\2\u041a\u041c\7")
        buf.write("!\2\2\u041b\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d")
        buf.write("\3\2\2\2\u041d\u041e\7Q\2\2\u041e\u0469\b)\1\2\u041f\u0421")
        buf.write("\7!\2\2\u0420\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421")
        buf.write("\u0422\3\2\2\2\u0422\u0423\7\u00df\2\2\u0423\u0424\7\"")
        buf.write("\2\2\u0424\u0469\b)\1\2\u0425\u0427\7!\2\2\u0426\u0425")
        buf.write("\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\3\2\2\2\u0428")
        buf.write("\u0429\7\u00df\2\2\u0429\u042a\7m\2\2\u042a\u0469\b)\1")
        buf.write("\2\u042b\u042c\7!\2\2\u042c\u042d\7Q\2\2\u042d\u0469\b")
        buf.write(")\1\2\u042e\u0430\7!\2\2\u042f\u042e\3\2\2\2\u042f\u0430")
        buf.write("\3\2\2\2\u0430\u0432\3\2\2\2\u0431\u0433\7\u00b1\2\2\u0432")
        buf.write("\u0431\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434\3\2\2\2")
        buf.write("\u0434\u0435\7\u00cc\2\2\u0435\u0436\7q\2\2\u0436\u0469")
        buf.write("\b)\1\2\u0437\u0439\7!\2\2\u0438\u0437\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043b\3\2\2\2\u043a\u043c\7\u00b1\2\2\u043b")
        buf.write("\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u043e\7\u00cc\2\2\u043e\u043f\7.\2\2\u043f\u0469")
        buf.write("\b)\1\2\u0440\u0442\7\u00cd\2\2\u0441\u0443\7\32\2\2\u0442")
        buf.write("\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444\3\2\2\2")
        buf.write("\u0444\u0445\7.\2\2\u0445\u0469\b)\1\2\u0446\u0447\7\u00ce")
        buf.write("\2\2\u0447\u0448\7t\2\2\u0448\u0469\b)\1\2\u0449\u044a")
        buf.write("\7\u00cf\2\2\u044a\u044b\7\f\2\2\u044b\u0469\b)\1\2\u044c")
        buf.write("\u044d\7\u00cf\2\2\u044d\u044e\7\u00d0\2\2\u044e\u0469")
        buf.write("\b)\1\2\u044f\u0450\7\u00d1\2\2\u0450\u0451\7\r\2\2\u0451")
        buf.write("\u0452\7\u00cd\2\2\u0452\u0469\b)\1\2\u0453\u0459\7\u00d2")
        buf.write("\2\2\u0454\u0456\7\32\2\2\u0455\u0454\3\2\2\2\u0455\u0456")
        buf.write("\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u045a\7b\2\2\u0458")
        buf.write("\u045a\7\u00d3\2\2\u0459\u0455\3\2\2\2\u0459\u0458\3\2")
        buf.write("\2\2\u045a\u045b\3\2\2\2\u045b\u0469\b)\1\2\u045c\u045d")
        buf.write("\7\u00a9\2\2\u045d\u045e\7j\2\2\u045e\u0469\b)\1\2\u045f")
        buf.write("\u0461\7\u00d4\2\2\u0460\u0462\7\r\2\2\u0461\u0460\3\2")
        buf.write("\2\2\u0461\u0462\3\2\2\2\u0462\u0464\3\2\2\2\u0463\u0465")
        buf.write("\7\u00d5\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465")
        buf.write("\u0466\3\2\2\2\u0466\u0467\7\u00d6\2\2\u0467\u0469\b)")
        buf.write("\1\2\u0468\u0419\3\2\2\2\u0468\u0420\3\2\2\2\u0468\u0426")
        buf.write("\3\2\2\2\u0468\u042b\3\2\2\2\u0468\u042f\3\2\2\2\u0468")
        buf.write("\u0438\3\2\2\2\u0468\u0440\3\2\2\2\u0468\u0446\3\2\2\2")
        buf.write("\u0468\u0449\3\2\2\2\u0468\u044c\3\2\2\2\u0468\u044f\3")
        buf.write("\2\2\2\u0468\u0453\3\2\2\2\u0468\u045c\3\2\2\2\u0468\u045f")
        buf.write("\3\2\2\2\u0469Q\3\2\2\2\u046a\u046b\t\'\2\2\u046bS\3\2")
        buf.write("\2\2\u046c\u046d\7\u00f2\2\2\u046dU\3\2\2\2jYflq{\u0081")
        buf.write("\u008d\u0093\u0098\u00a7\u00ac\u00b9\u00bf\u00c7\u00cb")
        buf.write("\u00e0\u00e9\u00eb\u00f8\u00fe\u0106\u010c\u0112\u0128")
        buf.write("\u012c\u012f\u0133\u013e\u0143\u014a\u0151\u0154\u015c")
        buf.write("\u0165\u017a\u0190\u0193\u01b5\u01b8\u01c5\u01ce\u01d3")
        buf.write("\u01f4\u01f6\u020b\u0216\u021c\u022a\u0232\u0242\u0248")
        buf.write("\u024d\u0256\u0259\u025e\u0261\u0277\u0281\u0287\u028a")
        buf.write("\u0297\u02a0\u02af\u02b8\u02dc\u02e4\u02ec\u02fb\u0300")
        buf.write("\u0309\u030c\u0313\u031a\u032d\u033f\u0346\u0350\u0353")
        buf.write("\u0356\u035e\u037b\u0388\u038c\u0390\u0393\u0397\u03b6")
        buf.write("\u03f9\u0407\u040d\u0417\u041b\u0420\u0426\u042f\u0432")
        buf.write("\u0438\u043b\u0442\u0455\u0459\u0461\u0464\u0468")
        return buf.getvalue()


class DMFParser ( Parser ):

    grammarFileName = "DMF.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'{'", "'}'", "'[['", 
                     "']]'", "'times'", "'for'", "'with'", "'in'", "'to'", 
                     "'by'", "'down'", "'['", "'repeat'", "'exit'", "'loop'", 
                     "'return'", "'('", "','", "'#'", "'magnitude'", "'as'", 
                     "'a'", "'string'", "'turned'", "'dir'", "'direction'", 
                     "'per'", "'C'", "'the'", "'reagent'", "'named'", "'of'", 
                     "'an'", "'is'", "'and'", "'or'", "'pause'", "'wait'", 
                     "'user'", "'prompt'", "'print'", "'drop'", "'@'", "'at'", 
                     "'exists'", "'does'", "'exist'", "'doesn't'", "'is missing'", 
                     "'missing'", "'has'", "'have'", "'unknown'", "'waste'", 
                     "'up'", "'north'", "'south'", "'left'", "'west'", "'right'", 
                     "'east'", "'clockwise'", "'counterclockwise'", "'around'", 
                     "'row'", "'rows'", "'col'", "'column'", "'cols'", "'columns'", 
                     "'macro'", "'->'", "'turn'", "'state'", "'remove'", 
                     "'from'", "'board'", "'reset'", "'pads'", "'magnets'", 
                     "'heaters'", "'heating'", "'zones'", "'chillers'", 
                     "'all'", "'sample'", "'binary'", "'delta'", "'motion'", 
                     "'delay'", "'bool'", "'liquid'", "'sensor'", "'reading'", 
                     "'eselog'", "'int'", "'float'", "'temp'", "'temperature'", 
                     "'point'", "'timestamp'", "'time'", "'frequency'", 
                     "'ticks'", "'volume'", "'voltage'", "'diff'", "'difference'", 
                     "'pad'", "'pipetting'", "'target'", "'well'", "'extraction'", 
                     "'port'", "'hole'", "'gate'", "'heater'", "'zone'", 
                     "'chiller'", "'magnet'", "'power'", "'supply'", "'mode'", 
                     "'fan'", "'s'", "'sec'", "'secs'", "'second'", "'seconds'", 
                     "'ms'", "'millisecond'", "'milliseconds'", "'uL'", 
                     "'ul'", "'microliter'", "'microlitre'", "'microliters'", 
                     "'microlitres'", "'mL'", "'ml'", "'milliliter'", "'millilitre'", 
                     "'milliliters'", "'millilitres'", "'tick'", "'drops'", 
                     "'V'", "'volt'", "'volts'", "'Hz'", "'hz'", "'min'", 
                     "'minimum'", "'max'", "'maximum'", "'y'", "'coord'", 
                     "'coordinate'", "'x'", "'remaining'", "'capacity'", 
                     "'fill'", "'level'", "'refill'", "'current'", "'n'", 
                     "'samples'", "'sampling'", "'rate'", "'interval'", 
                     "'first'", "'value'", "'last'", "'arithmetic'", "'harmonic'", 
                     "'geometric'", "'mean'", "'std'", "'standard'", "'dev'", 
                     "'deviation'", "'=='", "'!='", "'<'", "'<='", "'>'", 
                     "'>='", "'True'", "'true'", "'TRUE'", "'Yes'", "'yes'", 
                     "'YES'", "'False'", "'false'", "'FALSE'", "'No'", "'no'", 
                     "'NO'", "'clicked'", "'dispense'", "'enter'", "'transfer'", 
                     "'out'", "'prepare'", "'take'", "'readings'", "'write'", 
                     "'csv'", "'file'", "'index'", "'base'", "'refil'", 
                     "'now'", "'+'", "'='", "<INVALID>", "'/'", "'interactive'", 
                     "':'", "'isn't'", "'local'", "'*'", "'not'", "'off'", 
                     "'on'", "'-'", "';'", "'toggle'", "'until'", "'while'", 
                     "']'", "')'", "'maybe'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ADD", "ASSIGN", "ATTR", "DIV", "INTERACTIVE", 
                      "INJECT", "ISNT", "LOCAL", "MUL", "NOT", "OFF", "ON", 
                      "SUB", "TERMINATOR", "TOGGLE", "UNTIL", "WHILE", "CLOSE_BRACKET", 
                      "CLOSE_PAREN", "MAYBE", "ID", "INT", "FLOAT", "STRING", 
                      "EOL_COMMENT", "COMMENT", "WS" ]

    RULE_macro_file = 0
    RULE_interactive = 1
    RULE_declaration = 2
    RULE_stat = 3
    RULE_compound = 4
    RULE_loop_header = 5
    RULE_step_first_and_dir = 6
    RULE_loop = 7
    RULE_exit = 8
    RULE_ret = 9
    RULE_term_punct = 10
    RULE_expr = 11
    RULE_existence = 12
    RULE_possession = 13
    RULE_reagent = 14
    RULE_direction = 15
    RULE_turn = 16
    RULE_rc = 17
    RULE_axis = 18
    RULE_macro_def = 19
    RULE_macro_header = 20
    RULE_param = 21
    RULE_no_arg_action = 22
    RULE_value_type = 23
    RULE_not_maybe_type = 24
    RULE_atomic_type = 25
    RULE_sampleable_type = 26
    RULE_quantity_type = 27
    RULE_component_type = 28
    RULE_dim_unit = 29
    RULE_numbered_type = 30
    RULE_minimum = 31
    RULE_maximum = 32
    RULE_min_max = 33
    RULE_attr = 34
    RULE_old_attr = 35
    RULE_rel = 36
    RULE_bool_val = 37
    RULE_name = 38
    RULE_multi_word_name = 39
    RULE_kwd_names = 40
    RULE_string = 41

    ruleNames =  [ "macro_file", "interactive", "declaration", "stat", "compound", 
                   "loop_header", "step_first_and_dir", "loop", "exit", 
                   "ret", "term_punct", "expr", "existence", "possession", 
                   "reagent", "direction", "turn", "rc", "axis", "macro_def", 
                   "macro_header", "param", "no_arg_action", "value_type", 
                   "not_maybe_type", "atomic_type", "sampleable_type", "quantity_type", 
                   "component_type", "dim_unit", "numbered_type", "minimum", 
                   "maximum", "min_max", "attr", "old_attr", "rel", "bool_val", 
                   "name", "multi_word_name", "kwd_names", "string" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    ADD=217
    ASSIGN=218
    ATTR=219
    DIV=220
    INTERACTIVE=221
    INJECT=222
    ISNT=223
    LOCAL=224
    MUL=225
    NOT=226
    OFF=227
    ON=228
    SUB=229
    TERMINATOR=230
    TOGGLE=231
    UNTIL=232
    WHILE=233
    CLOSE_BRACKET=234
    CLOSE_PAREN=235
    MAYBE=236
    ID=237
    INT=238
    FLOAT=239
    STRING=240
    EOL_COMMENT=241
    COMMENT=242
    WS=243

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Macro_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_file" ):
                listener.enterMacro_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_file" ):
                listener.exitMacro_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_file" ):
                return visitor.visitMacro_file(self)
            else:
                return visitor.visitChildren(self)




    def macro_file(self):

        localctx = DMFParser.Macro_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_macro_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 87
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__17) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__41) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51) | (1 << DMFParser.T__54) | (1 << DMFParser.T__55) | (1 << DMFParser.T__56) | (1 << DMFParser.T__57) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (DMFParser.T__72 - 73)) | (1 << (DMFParser.T__74 - 73)) | (1 << (DMFParser.T__75 - 73)) | (1 << (DMFParser.T__76 - 73)) | (1 << (DMFParser.T__79 - 73)) | (1 << (DMFParser.T__80 - 73)) | (1 << (DMFParser.T__81 - 73)) | (1 << (DMFParser.T__82 - 73)) | (1 << (DMFParser.T__83 - 73)) | (1 << (DMFParser.T__84 - 73)) | (1 << (DMFParser.T__85 - 73)) | (1 << (DMFParser.T__86 - 73)) | (1 << (DMFParser.T__88 - 73)) | (1 << (DMFParser.T__89 - 73)) | (1 << (DMFParser.T__90 - 73)) | (1 << (DMFParser.T__91 - 73)) | (1 << (DMFParser.T__92 - 73)) | (1 << (DMFParser.T__93 - 73)) | (1 << (DMFParser.T__94 - 73)) | (1 << (DMFParser.T__95 - 73)) | (1 << (DMFParser.T__96 - 73)) | (1 << (DMFParser.T__97 - 73)) | (1 << (DMFParser.T__98 - 73)) | (1 << (DMFParser.T__99 - 73)) | (1 << (DMFParser.T__100 - 73)) | (1 << (DMFParser.T__101 - 73)) | (1 << (DMFParser.T__102 - 73)) | (1 << (DMFParser.T__103 - 73)) | (1 << (DMFParser.T__104 - 73)) | (1 << (DMFParser.T__105 - 73)) | (1 << (DMFParser.T__106 - 73)) | (1 << (DMFParser.T__107 - 73)) | (1 << (DMFParser.T__108 - 73)) | (1 << (DMFParser.T__109 - 73)) | (1 << (DMFParser.T__110 - 73)) | (1 << (DMFParser.T__111 - 73)) | (1 << (DMFParser.T__112 - 73)) | (1 << (DMFParser.T__113 - 73)) | (1 << (DMFParser.T__114 - 73)) | (1 << (DMFParser.T__115 - 73)) | (1 << (DMFParser.T__116 - 73)) | (1 << (DMFParser.T__117 - 73)) | (1 << (DMFParser.T__118 - 73)) | (1 << (DMFParser.T__119 - 73)) | (1 << (DMFParser.T__120 - 73)) | (1 << (DMFParser.T__121 - 73)) | (1 << (DMFParser.T__122 - 73)) | (1 << (DMFParser.T__125 - 73)) | (1 << (DMFParser.T__126 - 73)) | (1 << (DMFParser.T__131 - 73)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__189 - 154)) | (1 << (DMFParser.T__190 - 154)) | (1 << (DMFParser.T__191 - 154)) | (1 << (DMFParser.T__192 - 154)) | (1 << (DMFParser.T__193 - 154)) | (1 << (DMFParser.T__194 - 154)) | (1 << (DMFParser.T__195 - 154)) | (1 << (DMFParser.T__196 - 154)) | (1 << (DMFParser.T__197 - 154)) | (1 << (DMFParser.T__198 - 154)) | (1 << (DMFParser.T__199 - 154)) | (1 << (DMFParser.T__200 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.LOCAL - 221)) | (1 << (DMFParser.NOT - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.SUB - 221)) | (1 << (DMFParser.TOGGLE - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)) | (1 << (DMFParser.INT - 221)) | (1 << (DMFParser.FLOAT - 221)) | (1 << (DMFParser.STRING - 221)))) != 0):
                self.state = 84
                self.stat()
                self.state = 89
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 90
            self.match(DMFParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_interactive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Compound_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_interactive" ):
                listener.enterCompound_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_interactive" ):
                listener.exitCompound_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_interactive" ):
                return visitor.visitCompound_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Decl_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_interactive" ):
                listener.enterDecl_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_interactive" ):
                listener.exitDecl_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_interactive" ):
                return visitor.visitDecl_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Empty_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_interactive" ):
                listener.enterEmpty_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_interactive" ):
                listener.exitEmpty_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_interactive" ):
                return visitor.visitEmpty_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Loop_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_interactive" ):
                listener.enterLoop_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_interactive" ):
                listener.exitLoop_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_interactive" ):
                return visitor.visitLoop_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Expr_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_interactive" ):
                listener.enterExpr_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_interactive" ):
                listener.exitExpr_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_interactive" ):
                return visitor.visitExpr_interactive(self)
            else:
                return visitor.visitChildren(self)



    def interactive(self):

        localctx = DMFParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        self._la = 0 # Token type
        try:
            self.state = 111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Compound_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 92
                self.compound()
                self.state = 93
                self.match(DMFParser.EOF)
                pass

            elif la_ == 2:
                localctx = DMFParser.Loop_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 95
                self.loop()
                self.state = 96
                self.match(DMFParser.EOF)
                pass

            elif la_ == 3:
                localctx = DMFParser.Decl_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 98
                self.declaration()
                self.state = 100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 99
                    self.match(DMFParser.TERMINATOR)


                self.state = 102
                self.match(DMFParser.EOF)
                pass

            elif la_ == 4:
                localctx = DMFParser.Expr_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 104
                self.expr(0)
                self.state = 106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 105
                    self.match(DMFParser.TERMINATOR)


                self.state = 108
                self.match(DMFParser.EOF)
                pass

            elif la_ == 5:
                localctx = DMFParser.Empty_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 110
                self.match(DMFParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self._name = None # NameContext
            self.init = None # ExprContext
            self._value_type = None # Value_typeContext
            self._INT = None # Token

        def LOCAL(self):
            return self.getToken(DMFParser.LOCAL, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = DMFParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 113
                self.match(DMFParser.LOCAL)
                self.state = 114
                localctx._name = self.name()
                self.state = 115
                self.match(DMFParser.ASSIGN)
                self.state = 116
                localctx.init = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=None
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 120
                    self.match(DMFParser.LOCAL)


                self.state = 123
                localctx._value_type = self.value_type()
                self.state = 124
                localctx._INT = self.match(DMFParser.INT)
                self.state = 125
                self.match(DMFParser.ASSIGN)
                self.state = 127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__41) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51) | (1 << DMFParser.T__54) | (1 << DMFParser.T__55) | (1 << DMFParser.T__56) | (1 << DMFParser.T__57) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (DMFParser.T__72 - 73)) | (1 << (DMFParser.T__74 - 73)) | (1 << (DMFParser.T__75 - 73)) | (1 << (DMFParser.T__76 - 73)) | (1 << (DMFParser.T__79 - 73)) | (1 << (DMFParser.T__80 - 73)) | (1 << (DMFParser.T__81 - 73)) | (1 << (DMFParser.T__82 - 73)) | (1 << (DMFParser.T__83 - 73)) | (1 << (DMFParser.T__84 - 73)) | (1 << (DMFParser.T__85 - 73)) | (1 << (DMFParser.T__86 - 73)) | (1 << (DMFParser.T__88 - 73)) | (1 << (DMFParser.T__89 - 73)) | (1 << (DMFParser.T__90 - 73)) | (1 << (DMFParser.T__91 - 73)) | (1 << (DMFParser.T__92 - 73)) | (1 << (DMFParser.T__93 - 73)) | (1 << (DMFParser.T__94 - 73)) | (1 << (DMFParser.T__95 - 73)) | (1 << (DMFParser.T__96 - 73)) | (1 << (DMFParser.T__97 - 73)) | (1 << (DMFParser.T__98 - 73)) | (1 << (DMFParser.T__99 - 73)) | (1 << (DMFParser.T__100 - 73)) | (1 << (DMFParser.T__101 - 73)) | (1 << (DMFParser.T__102 - 73)) | (1 << (DMFParser.T__103 - 73)) | (1 << (DMFParser.T__104 - 73)) | (1 << (DMFParser.T__105 - 73)) | (1 << (DMFParser.T__106 - 73)) | (1 << (DMFParser.T__107 - 73)) | (1 << (DMFParser.T__108 - 73)) | (1 << (DMFParser.T__109 - 73)) | (1 << (DMFParser.T__110 - 73)) | (1 << (DMFParser.T__111 - 73)) | (1 << (DMFParser.T__112 - 73)) | (1 << (DMFParser.T__113 - 73)) | (1 << (DMFParser.T__114 - 73)) | (1 << (DMFParser.T__115 - 73)) | (1 << (DMFParser.T__116 - 73)) | (1 << (DMFParser.T__117 - 73)) | (1 << (DMFParser.T__118 - 73)) | (1 << (DMFParser.T__119 - 73)) | (1 << (DMFParser.T__120 - 73)) | (1 << (DMFParser.T__121 - 73)) | (1 << (DMFParser.T__122 - 73)) | (1 << (DMFParser.T__125 - 73)) | (1 << (DMFParser.T__126 - 73)) | (1 << (DMFParser.T__131 - 73)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__189 - 154)) | (1 << (DMFParser.T__190 - 154)) | (1 << (DMFParser.T__191 - 154)) | (1 << (DMFParser.T__192 - 154)) | (1 << (DMFParser.T__193 - 154)) | (1 << (DMFParser.T__194 - 154)) | (1 << (DMFParser.T__195 - 154)) | (1 << (DMFParser.T__196 - 154)) | (1 << (DMFParser.T__197 - 154)) | (1 << (DMFParser.T__198 - 154)) | (1 << (DMFParser.T__199 - 154)) | (1 << (DMFParser.T__200 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.NOT - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.SUB - 221)) | (1 << (DMFParser.TOGGLE - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)) | (1 << (DMFParser.INT - 221)) | (1 << (DMFParser.FLOAT - 221)) | (1 << (DMFParser.STRING - 221)))) != 0):
                    self.state = 126
                    localctx.init = self.expr(0)


                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 132
                self.match(DMFParser.LOCAL)
                self.state = 133
                localctx._value_type = self.value_type()
                self.state = 134
                localctx._INT = self.match(DMFParser.INT)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 138
                    self.match(DMFParser.LOCAL)


                self.state = 141
                localctx._value_type = self.value_type()
                self.state = 142
                localctx._name = self.name()
                self.state = 145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.ASSIGN:
                    self.state = 143
                    self.match(DMFParser.ASSIGN)
                    self.state = 144
                    localctx.init = self.expr(0)


                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Expr_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stat" ):
                listener.enterExpr_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stat" ):
                listener.exitExpr_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stat" ):
                return visitor.visitExpr_stat(self)
            else:
                return visitor.visitChildren(self)


    class Compound_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stat" ):
                listener.enterCompound_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stat" ):
                listener.exitCompound_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stat" ):
                return visitor.visitCompound_stat(self)
            else:
                return visitor.visitChildren(self)


    class Return_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ret(self):
            return self.getTypedRuleContext(DMFParser.RetContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stat" ):
                listener.enterReturn_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stat" ):
                listener.exitReturn_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stat" ):
                return visitor.visitReturn_stat(self)
            else:
                return visitor.visitChildren(self)


    class If_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.tests = list() # of ExprContexts
            self._compound = None # CompoundContext
            self.bodies = list() # of CompoundContexts
            self.else_body = None # CompoundContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def compound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.CompoundContext)
            else:
                return self.getTypedRuleContext(DMFParser.CompoundContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stat" ):
                listener.enterIf_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stat" ):
                listener.exitIf_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stat" ):
                return visitor.visitIf_stat(self)
            else:
                return visitor.visitChildren(self)


    class Loop_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_stat" ):
                listener.enterLoop_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_stat" ):
                listener.exitLoop_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_stat" ):
                return visitor.visitLoop_stat(self)
            else:
                return visitor.visitChildren(self)


    class Exit_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exit(self):
            return self.getTypedRuleContext(DMFParser.ExitContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_stat" ):
                listener.enterExit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_stat" ):
                listener.exitExit_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_stat" ):
                return visitor.visitExit_stat(self)
            else:
                return visitor.visitChildren(self)


    class Decl_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_stat" ):
                listener.enterDecl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_stat" ):
                listener.exitDecl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_stat" ):
                return visitor.visitDecl_stat(self)
            else:
                return visitor.visitChildren(self)



    def stat(self):

        localctx = DMFParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stat)
        self._la = 0 # Token type
        try:
            self.state = 183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Decl_statContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 152
                self.declaration()
                self.state = 153
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 2:
                localctx = DMFParser.If_statContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 155
                self.match(DMFParser.T__0)
                self.state = 156
                localctx._expr = self.expr(0)
                localctx.tests.append(localctx._expr)
                self.state = 157
                localctx._compound = self.compound()
                localctx.bodies.append(localctx._compound)
                self.state = 165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 158
                        self.match(DMFParser.T__1)
                        self.state = 159
                        self.match(DMFParser.T__0)
                        self.state = 160
                        localctx._expr = self.expr(0)
                        localctx.tests.append(localctx._expr)
                        self.state = 161
                        localctx._compound = self.compound()
                        localctx.bodies.append(localctx._compound) 
                    self.state = 167
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__1:
                    self.state = 168
                    self.match(DMFParser.T__1)
                    self.state = 169
                    localctx.else_body = self.compound()


                pass

            elif la_ == 3:
                localctx = DMFParser.Expr_statContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 172
                self.expr(0)
                self.state = 173
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 4:
                localctx = DMFParser.Loop_statContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 175
                self.loop()
                pass

            elif la_ == 5:
                localctx = DMFParser.Exit_statContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 176
                self.exit()
                self.state = 177
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 6:
                localctx = DMFParser.Return_statContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 179
                self.ret()
                self.state = 180
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 7:
                localctx = DMFParser.Compound_statContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 182
                self.compound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_compound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_blockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_block" ):
                listener.enterPar_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_block" ):
                listener.exitPar_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPar_block" ):
                return visitor.visitPar_block(self)
            else:
                return visitor.visitChildren(self)


    class BlockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)



    def compound(self):

        localctx = DMFParser.CompoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_compound)
        self._la = 0 # Token type
        try:
            self.state = 201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2]:
                localctx = DMFParser.BlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 185
                self.match(DMFParser.T__2)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__17) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__41) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51) | (1 << DMFParser.T__54) | (1 << DMFParser.T__55) | (1 << DMFParser.T__56) | (1 << DMFParser.T__57) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (DMFParser.T__72 - 73)) | (1 << (DMFParser.T__74 - 73)) | (1 << (DMFParser.T__75 - 73)) | (1 << (DMFParser.T__76 - 73)) | (1 << (DMFParser.T__79 - 73)) | (1 << (DMFParser.T__80 - 73)) | (1 << (DMFParser.T__81 - 73)) | (1 << (DMFParser.T__82 - 73)) | (1 << (DMFParser.T__83 - 73)) | (1 << (DMFParser.T__84 - 73)) | (1 << (DMFParser.T__85 - 73)) | (1 << (DMFParser.T__86 - 73)) | (1 << (DMFParser.T__88 - 73)) | (1 << (DMFParser.T__89 - 73)) | (1 << (DMFParser.T__90 - 73)) | (1 << (DMFParser.T__91 - 73)) | (1 << (DMFParser.T__92 - 73)) | (1 << (DMFParser.T__93 - 73)) | (1 << (DMFParser.T__94 - 73)) | (1 << (DMFParser.T__95 - 73)) | (1 << (DMFParser.T__96 - 73)) | (1 << (DMFParser.T__97 - 73)) | (1 << (DMFParser.T__98 - 73)) | (1 << (DMFParser.T__99 - 73)) | (1 << (DMFParser.T__100 - 73)) | (1 << (DMFParser.T__101 - 73)) | (1 << (DMFParser.T__102 - 73)) | (1 << (DMFParser.T__103 - 73)) | (1 << (DMFParser.T__104 - 73)) | (1 << (DMFParser.T__105 - 73)) | (1 << (DMFParser.T__106 - 73)) | (1 << (DMFParser.T__107 - 73)) | (1 << (DMFParser.T__108 - 73)) | (1 << (DMFParser.T__109 - 73)) | (1 << (DMFParser.T__110 - 73)) | (1 << (DMFParser.T__111 - 73)) | (1 << (DMFParser.T__112 - 73)) | (1 << (DMFParser.T__113 - 73)) | (1 << (DMFParser.T__114 - 73)) | (1 << (DMFParser.T__115 - 73)) | (1 << (DMFParser.T__116 - 73)) | (1 << (DMFParser.T__117 - 73)) | (1 << (DMFParser.T__118 - 73)) | (1 << (DMFParser.T__119 - 73)) | (1 << (DMFParser.T__120 - 73)) | (1 << (DMFParser.T__121 - 73)) | (1 << (DMFParser.T__122 - 73)) | (1 << (DMFParser.T__125 - 73)) | (1 << (DMFParser.T__126 - 73)) | (1 << (DMFParser.T__131 - 73)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__189 - 154)) | (1 << (DMFParser.T__190 - 154)) | (1 << (DMFParser.T__191 - 154)) | (1 << (DMFParser.T__192 - 154)) | (1 << (DMFParser.T__193 - 154)) | (1 << (DMFParser.T__194 - 154)) | (1 << (DMFParser.T__195 - 154)) | (1 << (DMFParser.T__196 - 154)) | (1 << (DMFParser.T__197 - 154)) | (1 << (DMFParser.T__198 - 154)) | (1 << (DMFParser.T__199 - 154)) | (1 << (DMFParser.T__200 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.LOCAL - 221)) | (1 << (DMFParser.NOT - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.SUB - 221)) | (1 << (DMFParser.TOGGLE - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)) | (1 << (DMFParser.INT - 221)) | (1 << (DMFParser.FLOAT - 221)) | (1 << (DMFParser.STRING - 221)))) != 0):
                    self.state = 186
                    self.stat()
                    self.state = 191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 192
                self.match(DMFParser.T__3)
                pass
            elif token in [DMFParser.T__4]:
                localctx = DMFParser.Par_blockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.match(DMFParser.T__4)
                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__17) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__41) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51) | (1 << DMFParser.T__54) | (1 << DMFParser.T__55) | (1 << DMFParser.T__56) | (1 << DMFParser.T__57) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (DMFParser.T__72 - 73)) | (1 << (DMFParser.T__74 - 73)) | (1 << (DMFParser.T__75 - 73)) | (1 << (DMFParser.T__76 - 73)) | (1 << (DMFParser.T__79 - 73)) | (1 << (DMFParser.T__80 - 73)) | (1 << (DMFParser.T__81 - 73)) | (1 << (DMFParser.T__82 - 73)) | (1 << (DMFParser.T__83 - 73)) | (1 << (DMFParser.T__84 - 73)) | (1 << (DMFParser.T__85 - 73)) | (1 << (DMFParser.T__86 - 73)) | (1 << (DMFParser.T__88 - 73)) | (1 << (DMFParser.T__89 - 73)) | (1 << (DMFParser.T__90 - 73)) | (1 << (DMFParser.T__91 - 73)) | (1 << (DMFParser.T__92 - 73)) | (1 << (DMFParser.T__93 - 73)) | (1 << (DMFParser.T__94 - 73)) | (1 << (DMFParser.T__95 - 73)) | (1 << (DMFParser.T__96 - 73)) | (1 << (DMFParser.T__97 - 73)) | (1 << (DMFParser.T__98 - 73)) | (1 << (DMFParser.T__99 - 73)) | (1 << (DMFParser.T__100 - 73)) | (1 << (DMFParser.T__101 - 73)) | (1 << (DMFParser.T__102 - 73)) | (1 << (DMFParser.T__103 - 73)) | (1 << (DMFParser.T__104 - 73)) | (1 << (DMFParser.T__105 - 73)) | (1 << (DMFParser.T__106 - 73)) | (1 << (DMFParser.T__107 - 73)) | (1 << (DMFParser.T__108 - 73)) | (1 << (DMFParser.T__109 - 73)) | (1 << (DMFParser.T__110 - 73)) | (1 << (DMFParser.T__111 - 73)) | (1 << (DMFParser.T__112 - 73)) | (1 << (DMFParser.T__113 - 73)) | (1 << (DMFParser.T__114 - 73)) | (1 << (DMFParser.T__115 - 73)) | (1 << (DMFParser.T__116 - 73)) | (1 << (DMFParser.T__117 - 73)) | (1 << (DMFParser.T__118 - 73)) | (1 << (DMFParser.T__119 - 73)) | (1 << (DMFParser.T__120 - 73)) | (1 << (DMFParser.T__121 - 73)) | (1 << (DMFParser.T__122 - 73)) | (1 << (DMFParser.T__125 - 73)) | (1 << (DMFParser.T__126 - 73)) | (1 << (DMFParser.T__131 - 73)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__189 - 154)) | (1 << (DMFParser.T__190 - 154)) | (1 << (DMFParser.T__191 - 154)) | (1 << (DMFParser.T__192 - 154)) | (1 << (DMFParser.T__193 - 154)) | (1 << (DMFParser.T__194 - 154)) | (1 << (DMFParser.T__195 - 154)) | (1 << (DMFParser.T__196 - 154)) | (1 << (DMFParser.T__197 - 154)) | (1 << (DMFParser.T__198 - 154)) | (1 << (DMFParser.T__199 - 154)) | (1 << (DMFParser.T__200 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.LOCAL - 221)) | (1 << (DMFParser.NOT - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.SUB - 221)) | (1 << (DMFParser.TOGGLE - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)) | (1 << (DMFParser.INT - 221)) | (1 << (DMFParser.FLOAT - 221)) | (1 << (DMFParser.STRING - 221)))) != 0):
                    self.state = 194
                    self.stat()
                    self.state = 199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 200
                self.match(DMFParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_loop_header

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Duration_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration_loop_header" ):
                listener.enterDuration_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration_loop_header" ):
                listener.exitDuration_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuration_loop_header" ):
                return visitor.visitDuration_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Test_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.cond = None # ExprContext
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(DMFParser.WHILE, 0)
        def UNTIL(self):
            return self.getToken(DMFParser.UNTIL, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_loop_header" ):
                listener.enterTest_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_loop_header" ):
                listener.exitTest_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_loop_header" ):
                return visitor.visitTest_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Seq_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.seq = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_iter_loop_header" ):
                listener.enterSeq_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_iter_loop_header" ):
                listener.exitSeq_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_iter_loop_header" ):
                return visitor.visitSeq_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Step_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.first = None # Step_first_and_dirContext
            self.bound = None # ExprContext
            self.step = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def step_first_and_dir(self):
            return self.getTypedRuleContext(DMFParser.Step_first_and_dirContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def param(self):
            return self.getTypedRuleContext(DMFParser.ParamContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_iter_loop_header" ):
                listener.enterStep_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_iter_loop_header" ):
                listener.exitStep_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_iter_loop_header" ):
                return visitor.visitStep_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class N_times_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.n = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_times_loop_header" ):
                listener.enterN_times_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_times_loop_header" ):
                listener.exitN_times_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_times_loop_header" ):
                return visitor.visitN_times_loop_header(self)
            else:
                return visitor.visitChildren(self)



    def loop_header(self):

        localctx = DMFParser.Loop_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_loop_header)
        self._la = 0 # Token type
        try:
            self.state = 233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = DMFParser.N_times_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                localctx.n = self.expr(0)
                self.state = 204
                self.match(DMFParser.T__6)
                pass

            elif la_ == 2:
                localctx = DMFParser.Duration_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(DMFParser.T__7)
                self.state = 207
                localctx.duration = self.expr(0)
                pass

            elif la_ == 3:
                localctx = DMFParser.Test_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 208
                _la = self._input.LA(1)
                if not(_la==DMFParser.UNTIL or _la==DMFParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 209
                localctx.cond = self.expr(0)
                pass

            elif la_ == 4:
                localctx = DMFParser.Seq_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 210
                self.match(DMFParser.T__8)
                self.state = 211
                localctx.var = self.name()
                self.state = 212
                self.match(DMFParser.T__9)
                self.state = 213
                localctx.seq = self.expr(0)
                pass

            elif la_ == 5:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 215
                self.match(DMFParser.T__8)
                self.state = 216
                localctx.var = self.name()
                self.state = 217
                localctx.first = self.step_first_and_dir()
                self.state = 218
                self.match(DMFParser.T__10)
                self.state = 219
                localctx.bound = self.expr(0)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 220
                    self.match(DMFParser.T__11)
                    self.state = 221
                    localctx.step = self.expr(0)


                pass

            elif la_ == 6:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 224
                self.match(DMFParser.T__8)
                self.state = 225
                localctx.var = self.param()
                self.state = 226
                localctx.first = self.step_first_and_dir()
                self.state = 227
                self.match(DMFParser.T__10)
                self.state = 228
                localctx.bound = self.expr(0)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 229
                    self.match(DMFParser.T__11)
                    self.state = 230
                    localctx.step = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Step_first_and_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_down = None

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_step_first_and_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_first_and_dir" ):
                listener.enterStep_first_and_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_first_and_dir" ):
                listener.exitStep_first_and_dir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_first_and_dir" ):
                return visitor.visitStep_first_and_dir(self)
            else:
                return visitor.visitChildren(self)




    def step_first_and_dir(self):

        localctx = DMFParser.Step_first_and_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_step_first_and_dir)
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.match(DMFParser.ASSIGN)
                self.state = 236
                self.expr(0)
                self.state = 237
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 240
                self.match(DMFParser.ASSIGN)
                self.state = 241
                self.expr(0)
                localctx.is_down=False
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 244
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext
            self.header = None # Loop_headerContext
            self.body = None # CompoundContext

        def loop_header(self):
            return self.getTypedRuleContext(DMFParser.Loop_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = DMFParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DMFParser.T__13:
                self.state = 248
                self.match(DMFParser.T__13)
                self.state = 249
                localctx.loop_name = self.name()
                self.state = 250
                self.match(DMFParser.CLOSE_BRACKET)


            self.state = 254
            self.match(DMFParser.T__14)
            self.state = 255
            localctx.header = self.loop_header()
            self.state = 256
            localctx.body = self.compound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit" ):
                return visitor.visitExit(self)
            else:
                return visitor.visitChildren(self)




    def exit(self):

        localctx = DMFParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(DMFParser.T__15)
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__23) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__34) | (1 << DMFParser.T__51))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (DMFParser.T__79 - 80)) | (1 << (DMFParser.T__80 - 80)) | (1 << (DMFParser.T__81 - 80)) | (1 << (DMFParser.T__82 - 80)) | (1 << (DMFParser.T__83 - 80)) | (1 << (DMFParser.T__84 - 80)) | (1 << (DMFParser.T__85 - 80)) | (1 << (DMFParser.T__86 - 80)) | (1 << (DMFParser.T__89 - 80)) | (1 << (DMFParser.T__95 - 80)) | (1 << (DMFParser.T__101 - 80)) | (1 << (DMFParser.T__108 - 80)) | (1 << (DMFParser.T__109 - 80)) | (1 << (DMFParser.T__112 - 80)) | (1 << (DMFParser.T__115 - 80)) | (1 << (DMFParser.T__119 - 80)) | (1 << (DMFParser.T__126 - 80)) | (1 << (DMFParser.T__131 - 80)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.ID - 221)))) != 0):
                self.state = 259
                localctx.loop_name = self.name()


            self.state = 262
            self.match(DMFParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_ret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRet" ):
                listener.enterRet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRet" ):
                listener.exitRet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRet" ):
                return visitor.visitRet(self)
            else:
                return visitor.visitChildren(self)




    def ret(self):

        localctx = DMFParser.RetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(DMFParser.T__17)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__41) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51) | (1 << DMFParser.T__54) | (1 << DMFParser.T__55) | (1 << DMFParser.T__56) | (1 << DMFParser.T__57) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (DMFParser.T__72 - 73)) | (1 << (DMFParser.T__74 - 73)) | (1 << (DMFParser.T__75 - 73)) | (1 << (DMFParser.T__76 - 73)) | (1 << (DMFParser.T__79 - 73)) | (1 << (DMFParser.T__80 - 73)) | (1 << (DMFParser.T__81 - 73)) | (1 << (DMFParser.T__82 - 73)) | (1 << (DMFParser.T__83 - 73)) | (1 << (DMFParser.T__84 - 73)) | (1 << (DMFParser.T__85 - 73)) | (1 << (DMFParser.T__86 - 73)) | (1 << (DMFParser.T__88 - 73)) | (1 << (DMFParser.T__89 - 73)) | (1 << (DMFParser.T__90 - 73)) | (1 << (DMFParser.T__91 - 73)) | (1 << (DMFParser.T__92 - 73)) | (1 << (DMFParser.T__93 - 73)) | (1 << (DMFParser.T__94 - 73)) | (1 << (DMFParser.T__95 - 73)) | (1 << (DMFParser.T__96 - 73)) | (1 << (DMFParser.T__97 - 73)) | (1 << (DMFParser.T__98 - 73)) | (1 << (DMFParser.T__99 - 73)) | (1 << (DMFParser.T__100 - 73)) | (1 << (DMFParser.T__101 - 73)) | (1 << (DMFParser.T__102 - 73)) | (1 << (DMFParser.T__103 - 73)) | (1 << (DMFParser.T__104 - 73)) | (1 << (DMFParser.T__105 - 73)) | (1 << (DMFParser.T__106 - 73)) | (1 << (DMFParser.T__107 - 73)) | (1 << (DMFParser.T__108 - 73)) | (1 << (DMFParser.T__109 - 73)) | (1 << (DMFParser.T__110 - 73)) | (1 << (DMFParser.T__111 - 73)) | (1 << (DMFParser.T__112 - 73)) | (1 << (DMFParser.T__113 - 73)) | (1 << (DMFParser.T__114 - 73)) | (1 << (DMFParser.T__115 - 73)) | (1 << (DMFParser.T__116 - 73)) | (1 << (DMFParser.T__117 - 73)) | (1 << (DMFParser.T__118 - 73)) | (1 << (DMFParser.T__119 - 73)) | (1 << (DMFParser.T__120 - 73)) | (1 << (DMFParser.T__121 - 73)) | (1 << (DMFParser.T__122 - 73)) | (1 << (DMFParser.T__125 - 73)) | (1 << (DMFParser.T__126 - 73)) | (1 << (DMFParser.T__131 - 73)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__189 - 154)) | (1 << (DMFParser.T__190 - 154)) | (1 << (DMFParser.T__191 - 154)) | (1 << (DMFParser.T__192 - 154)) | (1 << (DMFParser.T__193 - 154)) | (1 << (DMFParser.T__194 - 154)) | (1 << (DMFParser.T__195 - 154)) | (1 << (DMFParser.T__196 - 154)) | (1 << (DMFParser.T__197 - 154)) | (1 << (DMFParser.T__198 - 154)) | (1 << (DMFParser.T__199 - 154)) | (1 << (DMFParser.T__200 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.NOT - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.SUB - 221)) | (1 << (DMFParser.TOGGLE - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)) | (1 << (DMFParser.INT - 221)) | (1 << (DMFParser.FLOAT - 221)) | (1 << (DMFParser.STRING - 221)))) != 0):
                self.state = 265
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_punctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_closed = None

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_term_punct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_punct" ):
                listener.enterTerm_punct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_punct" ):
                listener.exitTerm_punct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm_punct" ):
                return visitor.visitTerm_punct(self)
            else:
                return visitor.visitChildren(self)




    def term_punct(self):

        localctx = DMFParser.Term_punctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_term_punct)
        try:
            self.state = 272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.CLOSE_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.match(DMFParser.CLOSE_BRACKET)
                localctx.is_closed=True
                pass
            elif token in [DMFParser.CLOSE_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                self.match(DMFParser.CLOSE_PAREN)
                localctx.is_closed=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Paren_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParen_expr" ):
                listener.enterParen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParen_expr" ):
                listener.exitParen_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParen_expr" ):
                return visitor.visitParen_expr(self)
            else:
                return visitor.visitChildren(self)


    class Neg_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeg_expr" ):
                listener.enterNeg_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeg_expr" ):
                listener.exitNeg_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeg_expr" ):
                return visitor.visitNeg_expr(self)
            else:
                return visitor.visitChildren(self)


    class Const_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)
        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_rc_expr" ):
                listener.enterConst_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_rc_expr" ):
                listener.exitConst_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_rc_expr" ):
                return visitor.visitConst_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_string_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_string_expr" ):
                listener.enterUnit_string_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_string_expr" ):
                listener.exitUnit_string_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_string_expr" ):
                return visitor.visitUnit_string_expr(self)
            else:
                return visitor.visitChildren(self)


    class Action_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def no_arg_action(self):
            return self.getTypedRuleContext(DMFParser.No_arg_actionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_expr" ):
                listener.enterAction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_expr" ):
                listener.exitAction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_expr" ):
                return visitor.visitAction_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_assign_expr" ):
                listener.enterAttr_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_assign_expr" ):
                listener.exitAttr_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_assign_expr" ):
                return visitor.visitAttr_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class Type_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.n = None # Token
            self.copyFrom(ctx)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_expr" ):
                listener.enterType_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_expr" ):
                listener.exitType_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name_expr" ):
                return visitor.visitType_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_expr" ):
                listener.enterUnit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_expr" ):
                listener.exitUnit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_expr" ):
                return visitor.visitUnit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Temperature_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemperature_expr" ):
                listener.enterTemperature_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemperature_expr" ):
                listener.exitTemperature_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemperature_expr" ):
                return visitor.visitTemperature_expr(self)
            else:
                return visitor.visitChildren(self)


    class Index_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_expr" ):
                listener.enterIndex_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_expr" ):
                listener.exitIndex_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_expr" ):
                return visitor.visitIndex_expr(self)
            else:
                return visitor.visitChildren(self)


    class Print_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_expr" ):
                listener.enterPrint_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_expr" ):
                listener.exitPrint_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_expr" ):
                return visitor.visitPrint_expr(self)
            else:
                return visitor.visitChildren(self)


    class Numbered_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.kind = None # Numbered_typeContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def numbered_type(self):
            return self.getTypedRuleContext(DMFParser.Numbered_typeContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_expr" ):
                listener.enterNumbered_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_expr" ):
                listener.exitNumbered_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_expr" ):
                return visitor.visitNumbered_expr(self)
            else:
                return visitor.visitChildren(self)


    class Rel_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def rel(self):
            return self.getTypedRuleContext(DMFParser.RelContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_expr" ):
                listener.enterRel_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_expr" ):
                listener.exitRel_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel_expr" ):
                return visitor.visitRel_expr(self)
            else:
                return visitor.visitChildren(self)


    class Existence_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # ExprContext
            self.copyFrom(ctx)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence_expr" ):
                listener.enterExistence_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence_expr" ):
                listener.exitExistence_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence_expr" ):
                return visitor.visitExistence_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # NameContext
            self.what = None # ExprContext
            self.ptype = None # Value_typeContext
            self.n = None # Token
            self.copyFrom(ctx)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_assign_expr" ):
                listener.enterName_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_assign_expr" ):
                listener.exitName_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_assign_expr" ):
                return visitor.visitName_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class String_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(DMFParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_lit_expr" ):
                listener.enterString_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_lit_expr" ):
                listener.exitString_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_lit_expr" ):
                return visitor.visitString_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Not_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_expr" ):
                listener.enterNot_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_expr" ):
                listener.exitNot_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_expr" ):
                return visitor.visitNot_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reagent(self):
            return self.getTypedRuleContext(DMFParser.ReagentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_lit_expr" ):
                listener.enterReagent_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_lit_expr" ):
                listener.exitReagent_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_lit_expr" ):
                return visitor.visitReagent_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class And_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)


    class Magnitude_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagnitude_expr" ):
                listener.enterMagnitude_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagnitude_expr" ):
                listener.exitMagnitude_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMagnitude_expr" ):
                return visitor.visitMagnitude_expr(self)
            else:
                return visitor.visitChildren(self)


    class Prompt_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_expr" ):
                listener.enterPrompt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_expr" ):
                listener.exitPrompt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_expr" ):
                return visitor.visitPrompt_expr(self)
            else:
                return visitor.visitChildren(self)


    class In_dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.d = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_dir_expr" ):
                listener.enterIn_dir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_dir_expr" ):
                listener.exitIn_dir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_dir_expr" ):
                return visitor.visitIn_dir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Or_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expr" ):
                listener.enterOr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expr" ):
                listener.exitOr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_expr" ):
                return visitor.visitOr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Injection_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInjection_expr" ):
                listener.enterInjection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInjection_expr" ):
                listener.exitInjection_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInjection_expr" ):
                return visitor.visitInjection_expr(self)
            else:
                return visitor.visitChildren(self)


    class Drop_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.loc = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_expr" ):
                listener.enterDrop_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_expr" ):
                listener.exitDrop_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_expr" ):
                return visitor.visitDrop_expr(self)
            else:
                return visitor.visitChildren(self)


    class Function_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.func = None # ExprContext
            self._expr = None # ExprContext
            self.args = list() # of ExprContexts
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_expr" ):
                listener.enterFunction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_expr" ):
                listener.exitFunction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_expr" ):
                return visitor.visitFunction_expr(self)
            else:
                return visitor.visitChildren(self)


    class To_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def axis(self):
            return self.getTypedRuleContext(DMFParser.AxisContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTo_expr" ):
                listener.enterTo_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTo_expr" ):
                listener.exitTo_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTo_expr" ):
                return visitor.visitTo_expr(self)
            else:
                return visitor.visitChildren(self)


    class Muldiv_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def MUL(self):
            return self.getToken(DMFParser.MUL, 0)
        def DIV(self):
            return self.getToken(DMFParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMuldiv_expr" ):
                listener.enterMuldiv_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMuldiv_expr" ):
                listener.exitMuldiv_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMuldiv_expr" ):
                return visitor.visitMuldiv_expr(self)
            else:
                return visitor.visitChildren(self)


    class Bool_const_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # Bool_valContext
            self.copyFrom(ctx)

        def bool_val(self):
            return self.getTypedRuleContext(DMFParser.Bool_valContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_const_expr" ):
                listener.enterBool_const_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_const_expr" ):
                listener.exitBool_const_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_const_expr" ):
                return visitor.visitBool_const_expr(self)
            else:
                return visitor.visitChildren(self)


    class Int_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_expr" ):
                listener.enterInt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_expr" ):
                listener.exitInt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt_expr" ):
                return visitor.visitInt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Has_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def possession(self):
            return self.getTypedRuleContext(DMFParser.PossessionContext,0)

        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_expr" ):
                listener.enterHas_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_expr" ):
                listener.exitHas_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHas_expr" ):
                return visitor.visitHas_expr(self)
            else:
                return visitor.visitChildren(self)


    class Float_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT(self):
            return self.getToken(DMFParser.FLOAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_expr" ):
                listener.enterFloat_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_expr" ):
                listener.exitFloat_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_expr" ):
                return visitor.visitFloat_expr(self)
            else:
                return visitor.visitChildren(self)


    class N_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_rc_expr" ):
                listener.enterN_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_rc_expr" ):
                listener.exitN_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_rc_expr" ):
                return visitor.visitN_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Turn_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.start_dir = None # ExprContext
            self.copyFrom(ctx)

        def turn(self):
            return self.getTypedRuleContext(DMFParser.TurnContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn_expr" ):
                listener.enterTurn_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn_expr" ):
                listener.exitTurn_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn_expr" ):
                return visitor.visitTurn_expr(self)
            else:
                return visitor.visitChildren(self)


    class Cond_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.first = None # ExprContext
            self.cond = None # ExprContext
            self.second = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_expr" ):
                listener.enterCond_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_expr" ):
                listener.exitCond_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond_expr" ):
                return visitor.visitCond_expr(self)
            else:
                return visitor.visitChildren(self)


    class Macro_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_def(self):
            return self.getTypedRuleContext(DMFParser.Macro_defContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_expr" ):
                listener.enterMacro_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_expr" ):
                listener.exitMacro_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_expr" ):
                return visitor.visitMacro_expr(self)
            else:
                return visitor.visitChildren(self)


    class Mw_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMw_name_expr" ):
                listener.enterMw_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMw_name_expr" ):
                listener.exitMw_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMw_name_expr" ):
                return visitor.visitMw_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_expr" ):
                listener.enterName_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_expr" ):
                listener.exitName_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_expr" ):
                return visitor.visitName_expr(self)
            else:
                return visitor.visitChildren(self)


    class Addsub_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ADD(self):
            return self.getToken(DMFParser.ADD, 0)
        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddsub_expr" ):
                listener.enterAddsub_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddsub_expr" ):
                listener.exitAddsub_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddsub_expr" ):
                return visitor.visitAddsub_expr(self)
            else:
                return visitor.visitChildren(self)


    class Delta_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelta_expr" ):
                listener.enterDelta_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelta_expr" ):
                listener.exitDelta_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelta_expr" ):
                return visitor.visitDelta_expr(self)
            else:
                return visitor.visitChildren(self)


    class Liquid_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiquid_expr" ):
                listener.enterLiquid_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiquid_expr" ):
                listener.exitLiquid_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiquid_expr" ):
                return visitor.visitLiquid_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_expr" ):
                listener.enterReagent_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_expr" ):
                listener.exitReagent_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_expr" ):
                return visitor.visitReagent_expr(self)
            else:
                return visitor.visitChildren(self)


    class Dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDir_expr" ):
                listener.enterDir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDir_expr" ):
                listener.exitDir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDir_expr" ):
                return visitor.visitDir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Coord_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.x = None # ExprContext
            self.y = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_expr" ):
                listener.enterCoord_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_expr" ):
                listener.exitCoord_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_expr" ):
                return visitor.visitCoord_expr(self)
            else:
                return visitor.visitChildren(self)


    class Pause_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPause_expr" ):
                listener.enterPause_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPause_expr" ):
                listener.exitPause_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPause_expr" ):
                return visitor.visitPause_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_recip_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_recip_expr" ):
                listener.enterUnit_recip_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_recip_expr" ):
                listener.exitUnit_recip_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_recip_expr" ):
                return visitor.visitUnit_recip_expr(self)
            else:
                return visitor.visitChildren(self)


    class Is_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.pred = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)
        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_expr" ):
                listener.enterIs_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_expr" ):
                listener.exitIs_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_expr" ):
                return visitor.visitIs_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)
        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_expr" ):
                listener.enterAttr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_expr" ):
                listener.exitAttr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_expr" ):
                return visitor.visitAttr_expr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = DMFParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Paren_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 275
                self.match(DMFParser.T__18)
                self.state = 276
                self.expr(0)
                self.state = 277
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = DMFParser.Coord_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 279
                self.match(DMFParser.T__18)
                self.state = 280
                localctx.x = self.expr(0)
                self.state = 281
                self.match(DMFParser.T__19)
                self.state = 282
                localctx.y = self.expr(0)
                self.state = 283
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                localctx = DMFParser.Neg_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 285
                self.match(DMFParser.SUB)
                self.state = 286
                localctx.rhs = self.expr(51)
                pass

            elif la_ == 4:
                localctx = DMFParser.Numbered_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 287
                localctx.kind = self.numbered_type()
                self.state = 288
                self.match(DMFParser.T__20)
                self.state = 289
                localctx.which = self.expr(49)
                pass

            elif la_ == 5:
                localctx = DMFParser.Const_rc_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 291
                localctx._INT = self.match(DMFParser.INT)
                self.state = 292
                self.rc((0 if localctx._INT is None else int(localctx._INT.text)))
                pass

            elif la_ == 6:
                localctx = DMFParser.Reagent_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 293
                    self.match(DMFParser.T__30)


                self.state = 296
                self.reagent()
                self.state = 298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 297
                    self.match(DMFParser.T__31)


                pass

            elif la_ == 7:
                localctx = DMFParser.Reagent_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__23 or _la==DMFParser.T__30:
                    self.state = 300
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__23 or _la==DMFParser.T__30):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 303
                self.match(DMFParser.T__31)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__32:
                    self.state = 304
                    self.match(DMFParser.T__32)


                self.state = 307
                localctx.which = self.expr(34)
                pass

            elif la_ == 8:
                localctx = DMFParser.Not_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 308
                self.match(DMFParser.NOT)
                self.state = 309
                self.expr(27)
                pass

            elif la_ == 9:
                localctx = DMFParser.Delta_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 310
                self.direction()
                self.state = 311
                localctx.dist = self.expr(24)
                pass

            elif la_ == 10:
                localctx = DMFParser.Dir_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 313
                self.direction()
                pass

            elif la_ == 11:
                localctx = DMFParser.To_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 314
                self.match(DMFParser.T__10)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (DMFParser.T__66 - 67)) | (1 << (DMFParser.T__68 - 67)) | (1 << (DMFParser.T__69 - 67)))) != 0):
                    self.state = 315
                    self.axis()


                self.state = 318
                localctx.which = self.expr(22)
                pass

            elif la_ == 12:
                localctx = DMFParser.Pause_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 319
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__39):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__7:
                    self.state = 320
                    self.match(DMFParser.T__7)


                self.state = 323
                localctx.duration = self.expr(21)
                pass

            elif la_ == 13:
                localctx = DMFParser.Prompt_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 328
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__38, DMFParser.T__39]:
                    self.state = 324
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__38 or _la==DMFParser.T__39):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 325
                    self.match(DMFParser.T__7)
                    self.state = 326
                    self.match(DMFParser.T__40)
                    pass
                elif token in [DMFParser.T__41]:
                    self.state = 327
                    self.match(DMFParser.T__41)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 330
                    localctx._expr = self.expr(0)
                    localctx.vals.append(localctx._expr)
                    self.state = 335
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 331
                            self.match(DMFParser.T__19)
                            self.state = 332
                            localctx._expr = self.expr(0)
                            localctx.vals.append(localctx._expr) 
                        self.state = 337
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)



                pass

            elif la_ == 14:
                localctx = DMFParser.Print_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 340
                self.match(DMFParser.T__42)
                self.state = 341
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 342
                        self.match(DMFParser.T__19)
                        self.state = 343
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 348
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass

            elif la_ == 15:
                localctx = DMFParser.Drop_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 349
                self.match(DMFParser.T__43)
                self.state = 350
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__44 or _la==DMFParser.T__45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 351
                localctx.loc = self.expr(17)
                pass

            elif la_ == 16:
                localctx = DMFParser.Macro_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 352
                self.macro_def()
                pass

            elif la_ == 17:
                localctx = DMFParser.Action_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 353
                self.no_arg_action()
                pass

            elif la_ == 18:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 354
                    self.match(DMFParser.T__30)


                self.state = 357
                self.value_type()
                pass

            elif la_ == 19:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 358
                self.value_type()
                self.state = 359
                localctx.n = self.match(DMFParser.INT)
                pass

            elif la_ == 20:
                localctx = DMFParser.Bool_const_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 361
                localctx.val = self.bool_val()
                pass

            elif la_ == 21:
                localctx = DMFParser.Name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 362
                self.name()
                pass

            elif la_ == 22:
                localctx = DMFParser.Mw_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 363
                self.multi_word_name()
                pass

            elif la_ == 23:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 364
                localctx.which = self.name()
                self.state = 365
                self.match(DMFParser.ASSIGN)
                self.state = 366
                localctx.what = self.expr(6)
                pass

            elif la_ == 24:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 368
                localctx.ptype = self.value_type()
                self.state = 369
                localctx.n = self.match(DMFParser.INT)
                self.state = 370
                self.match(DMFParser.ASSIGN)
                self.state = 371
                localctx.what = self.expr(4)
                pass

            elif la_ == 25:
                localctx = DMFParser.String_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 373
                self.string()
                pass

            elif la_ == 26:
                localctx = DMFParser.Int_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 374
                localctx._INT = self.match(DMFParser.INT)
                pass

            elif la_ == 27:
                localctx = DMFParser.Float_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 375
                self.match(DMFParser.FLOAT)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 498
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        localctx = DMFParser.In_dir_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 378
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 379
                        self.match(DMFParser.T__9)
                        self.state = 380
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__26 or _la==DMFParser.T__27):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 381
                        localctx.d = self.expr(42)
                        pass

                    elif la_ == 2:
                        localctx = DMFParser.Liquid_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 382
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 383
                        self.match(DMFParser.T__33)
                        self.state = 384
                        localctx.which = self.expr(34)
                        pass

                    elif la_ == 3:
                        localctx = DMFParser.Muldiv_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 385
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 386
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.DIV or _la==DMFParser.MUL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 387
                        localctx.rhs = self.expr(33)
                        pass

                    elif la_ == 4:
                        localctx = DMFParser.Addsub_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 388
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 389
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.ADD or _la==DMFParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 390
                        localctx.rhs = self.expr(32)
                        pass

                    elif la_ == 5:
                        localctx = DMFParser.Rel_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 391
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 392
                        self.rel()
                        self.state = 393
                        localctx.rhs = self.expr(31)
                        pass

                    elif la_ == 6:
                        localctx = DMFParser.Is_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 395
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 401
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [DMFParser.T__35]:
                            self.state = 396
                            self.match(DMFParser.T__35)
                            self.state = 398
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                            if la_ == 1:
                                self.state = 397
                                self.match(DMFParser.NOT)


                            pass
                        elif token in [DMFParser.ISNT]:
                            self.state = 400
                            self.match(DMFParser.ISNT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 403
                        localctx.pred = self.expr(29)
                        pass

                    elif la_ == 7:
                        localctx = DMFParser.And_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 404
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 405
                        self.match(DMFParser.T__36)
                        self.state = 406
                        localctx.rhs = self.expr(27)
                        pass

                    elif la_ == 8:
                        localctx = DMFParser.Or_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 407
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 408
                        self.match(DMFParser.T__37)
                        self.state = 409
                        localctx.rhs = self.expr(26)
                        pass

                    elif la_ == 9:
                        localctx = DMFParser.Drop_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 410
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 411
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__44 or _la==DMFParser.T__45):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 412
                        localctx.loc = self.expr(17)
                        pass

                    elif la_ == 10:
                        localctx = DMFParser.Injection_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 413
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 414
                        self.match(DMFParser.INJECT)
                        self.state = 415
                        localctx.what = self.expr(16)
                        pass

                    elif la_ == 11:
                        localctx = DMFParser.Cond_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.first = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 416
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 417
                        self.match(DMFParser.T__0)
                        self.state = 418
                        localctx.cond = self.expr(0)
                        self.state = 419
                        self.match(DMFParser.T__1)
                        self.state = 420
                        localctx.second = self.expr(15)
                        pass

                    elif la_ == 12:
                        localctx = DMFParser.Attr_assign_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 422
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 423
                        self.match(DMFParser.ATTR)
                        self.state = 424
                        self.attr()
                        self.state = 425
                        self.match(DMFParser.ASSIGN)
                        self.state = 426
                        localctx.what = self.expr(6)
                        pass

                    elif la_ == 13:
                        localctx = DMFParser.Function_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.func = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 428
                        if not self.precpred(self._ctx, 53):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 53)")
                        self.state = 429
                        self.match(DMFParser.T__18)
                        self.state = 438
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__41) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51) | (1 << DMFParser.T__54) | (1 << DMFParser.T__55) | (1 << DMFParser.T__56) | (1 << DMFParser.T__57) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (DMFParser.T__72 - 73)) | (1 << (DMFParser.T__74 - 73)) | (1 << (DMFParser.T__75 - 73)) | (1 << (DMFParser.T__76 - 73)) | (1 << (DMFParser.T__79 - 73)) | (1 << (DMFParser.T__80 - 73)) | (1 << (DMFParser.T__81 - 73)) | (1 << (DMFParser.T__82 - 73)) | (1 << (DMFParser.T__83 - 73)) | (1 << (DMFParser.T__84 - 73)) | (1 << (DMFParser.T__85 - 73)) | (1 << (DMFParser.T__86 - 73)) | (1 << (DMFParser.T__88 - 73)) | (1 << (DMFParser.T__89 - 73)) | (1 << (DMFParser.T__90 - 73)) | (1 << (DMFParser.T__91 - 73)) | (1 << (DMFParser.T__92 - 73)) | (1 << (DMFParser.T__93 - 73)) | (1 << (DMFParser.T__94 - 73)) | (1 << (DMFParser.T__95 - 73)) | (1 << (DMFParser.T__96 - 73)) | (1 << (DMFParser.T__97 - 73)) | (1 << (DMFParser.T__98 - 73)) | (1 << (DMFParser.T__99 - 73)) | (1 << (DMFParser.T__100 - 73)) | (1 << (DMFParser.T__101 - 73)) | (1 << (DMFParser.T__102 - 73)) | (1 << (DMFParser.T__103 - 73)) | (1 << (DMFParser.T__104 - 73)) | (1 << (DMFParser.T__105 - 73)) | (1 << (DMFParser.T__106 - 73)) | (1 << (DMFParser.T__107 - 73)) | (1 << (DMFParser.T__108 - 73)) | (1 << (DMFParser.T__109 - 73)) | (1 << (DMFParser.T__110 - 73)) | (1 << (DMFParser.T__111 - 73)) | (1 << (DMFParser.T__112 - 73)) | (1 << (DMFParser.T__113 - 73)) | (1 << (DMFParser.T__114 - 73)) | (1 << (DMFParser.T__115 - 73)) | (1 << (DMFParser.T__116 - 73)) | (1 << (DMFParser.T__117 - 73)) | (1 << (DMFParser.T__118 - 73)) | (1 << (DMFParser.T__119 - 73)) | (1 << (DMFParser.T__120 - 73)) | (1 << (DMFParser.T__121 - 73)) | (1 << (DMFParser.T__122 - 73)) | (1 << (DMFParser.T__125 - 73)) | (1 << (DMFParser.T__126 - 73)) | (1 << (DMFParser.T__131 - 73)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__189 - 154)) | (1 << (DMFParser.T__190 - 154)) | (1 << (DMFParser.T__191 - 154)) | (1 << (DMFParser.T__192 - 154)) | (1 << (DMFParser.T__193 - 154)) | (1 << (DMFParser.T__194 - 154)) | (1 << (DMFParser.T__195 - 154)) | (1 << (DMFParser.T__196 - 154)) | (1 << (DMFParser.T__197 - 154)) | (1 << (DMFParser.T__198 - 154)) | (1 << (DMFParser.T__199 - 154)) | (1 << (DMFParser.T__200 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.NOT - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.SUB - 221)) | (1 << (DMFParser.TOGGLE - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)) | (1 << (DMFParser.INT - 221)) | (1 << (DMFParser.FLOAT - 221)) | (1 << (DMFParser.STRING - 221)))) != 0):
                            self.state = 430
                            localctx._expr = self.expr(0)
                            localctx.args.append(localctx._expr)
                            self.state = 435
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==DMFParser.T__19:
                                self.state = 431
                                self.match(DMFParser.T__19)
                                self.state = 432
                                localctx._expr = self.expr(0)
                                localctx.args.append(localctx._expr)
                                self.state = 437
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 440
                        self.match(DMFParser.CLOSE_PAREN)
                        pass

                    elif la_ == 14:
                        localctx = DMFParser.Delta_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 441
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 442
                        self.direction()
                        pass

                    elif la_ == 15:
                        localctx = DMFParser.Magnitude_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 443
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 444
                        self.match(DMFParser.ATTR)
                        self.state = 445
                        self.match(DMFParser.T__21)
                        self.state = 446
                        self.match(DMFParser.T__9)
                        self.state = 447
                        self.dim_unit()
                        pass

                    elif la_ == 16:
                        localctx = DMFParser.Unit_string_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 448
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 449
                        self.match(DMFParser.T__22)
                        self.state = 451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.T__23:
                            self.state = 450
                            self.match(DMFParser.T__23)


                        self.state = 453
                        self.match(DMFParser.T__24)
                        self.state = 454
                        self.match(DMFParser.T__9)
                        self.state = 455
                        self.dim_unit()
                        pass

                    elif la_ == 17:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 456
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 457
                        self.match(DMFParser.ATTR)
                        self.state = 458
                        self.attr()
                        self.state = 460
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                        if la_ == 1:
                            self.state = 459
                            self.existence()


                        pass

                    elif la_ == 18:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 462
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 463
                        self.match(DMFParser.ATTR)
                        self.state = 465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.MAYBE:
                            self.state = 464
                            self.match(DMFParser.MAYBE)


                        self.state = 467
                        self.attr()
                        pass

                    elif la_ == 19:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 468
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 469
                        self.match(DMFParser.ATTR)
                        self.state = 470
                        self.match(DMFParser.T__18)
                        self.state = 471
                        self.match(DMFParser.MAYBE)
                        self.state = 472
                        self.match(DMFParser.CLOSE_PAREN)
                        self.state = 473
                        self.attr()
                        pass

                    elif la_ == 20:
                        localctx = DMFParser.Existence_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.val = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 474
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 475
                        self.existence()
                        pass

                    elif la_ == 21:
                        localctx = DMFParser.Turn_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.start_dir = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 476
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 477
                        self.match(DMFParser.T__25)
                        self.state = 478
                        self.turn()
                        pass

                    elif la_ == 22:
                        localctx = DMFParser.N_rc_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 479
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 480
                        self.rc(0)
                        pass

                    elif la_ == 23:
                        localctx = DMFParser.Unit_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 481
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 482
                        self.dim_unit()
                        pass

                    elif la_ == 24:
                        localctx = DMFParser.Unit_recip_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 483
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 484
                        self.match(DMFParser.T__28)
                        self.state = 485
                        self.dim_unit()
                        pass

                    elif la_ == 25:
                        localctx = DMFParser.Temperature_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 486
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 487
                        self.match(DMFParser.T__29)
                        pass

                    elif la_ == 26:
                        localctx = DMFParser.Has_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 488
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 489
                        self.possession()
                        self.state = 490
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__23 or _la==DMFParser.T__34):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 491
                        self.attr()
                        pass

                    elif la_ == 27:
                        localctx = DMFParser.Index_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 493
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 494
                        self.match(DMFParser.T__13)
                        self.state = 495
                        localctx.which = self.expr(0)
                        self.state = 496
                        self.match(DMFParser.CLOSE_BRACKET)
                        pass

             
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExistenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_existence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence" ):
                listener.enterExistence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence" ):
                listener.exitExistence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence" ):
                return visitor.visitExistence(self)
            else:
                return visitor.visitChildren(self)




    def existence(self):

        localctx = DMFParser.ExistenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_existence)
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(DMFParser.T__46)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(DMFParser.T__47)
                self.state = 506
                self.match(DMFParser.NOT)
                self.state = 507
                self.match(DMFParser.T__48)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 509
                self.match(DMFParser.T__49)
                self.state = 510
                self.match(DMFParser.T__48)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 512
                self.match(DMFParser.T__50)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__35]:
                self.enterOuterAlt(localctx, 5)
                self.state = 514
                self.match(DMFParser.T__35)
                self.state = 515
                self.match(DMFParser.NOT)
                self.state = 516
                self.match(DMFParser.T__51)
                localctx.polarity=True
                pass
            elif token in [DMFParser.ISNT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 518
                self.match(DMFParser.ISNT)
                self.state = 519
                self.match(DMFParser.T__51)
                localctx.polarity=True
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_possession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossession" ):
                listener.enterPossession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossession" ):
                listener.exitPossession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPossession" ):
                return visitor.visitPossession(self)
            else:
                return visitor.visitChildren(self)




    def possession(self):

        localctx = DMFParser.PossessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_possession)
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.match(DMFParser.T__52)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(DMFParser.T__47)
                self.state = 526
                self.match(DMFParser.NOT)
                self.state = 527
                self.match(DMFParser.T__53)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 529
                self.match(DMFParser.T__49)
                self.state = 530
                self.match(DMFParser.T__53)
                localctx.polarity=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReagentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None


        def getRuleIndex(self):
            return DMFParser.RULE_reagent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent" ):
                listener.enterReagent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent" ):
                listener.exitReagent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent" ):
                return visitor.visitReagent(self)
            else:
                return visitor.visitChildren(self)




    def reagent(self):

        localctx = DMFParser.ReagentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reagent)
        try:
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.match(DMFParser.T__54)
                localctx.r = unknown_reagent
                pass
            elif token in [DMFParser.T__55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.match(DMFParser.T__55)
                localctx.r = waste_reagent
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = DMFParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__56, DMFParser.T__57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__56 or _la==DMFParser.T__57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__12, DMFParser.T__58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__12 or _la==DMFParser.T__58):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.DOWN
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__59, DMFParser.T__60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 546
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__59 or _la==DMFParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.LEFT
                localctx.verticalp=False
                pass
            elif token in [DMFParser.T__61, DMFParser.T__62]:
                self.enterOuterAlt(localctx, 4)
                self.state = 549
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__61 or _la==DMFParser.T__62):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TurnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None


        def getRuleIndex(self):
            return DMFParser.RULE_turn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn" ):
                listener.enterTurn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn" ):
                listener.exitTurn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn" ):
                return visitor.visitTurn(self)
            else:
                return visitor.visitChildren(self)




    def turn(self):

        localctx = DMFParser.TurnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_turn)
        self._la = 0 # Token type
        try:
            self.state = 560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__61, DMFParser.T__63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__61 or _la==DMFParser.T__63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.RIGHT
                pass
            elif token in [DMFParser.T__59, DMFParser.T__64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__59 or _la==DMFParser.T__64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.LEFT
                pass
            elif token in [DMFParser.T__65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 558
                self.match(DMFParser.T__65)
                localctx.t = Turn.AROUND
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, n:int=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None
            self.d = None
            self.verticalp = None
            self.n = n


        def getRuleIndex(self):
            return DMFParser.RULE_rc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRc" ):
                listener.enterRc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRc" ):
                listener.exitRc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRc" ):
                return visitor.visitRc(self)
            else:
                return visitor.visitChildren(self)




    def rc(self, n:int):

        localctx = DMFParser.RcContext(self, self._ctx, self.state, n)
        self.enterRule(localctx, 34, self.RULE_rc)
        self._la = 0 # Token type
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 563
                self.match(DMFParser.T__66)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.match(DMFParser.T__67)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 570
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__68 or _la==DMFParser.T__69):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 573
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__70 or _la==DMFParser.T__71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AxisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_axis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxis" ):
                listener.enterAxis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxis" ):
                listener.exitAxis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAxis" ):
                return visitor.visitAxis(self)
            else:
                return visitor.visitChildren(self)




    def axis(self):

        localctx = DMFParser.AxisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_axis)
        self._la = 0 # Token type
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.match(DMFParser.T__66)
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__68, DMFParser.T__69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__68 or _la==DMFParser.T__69):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_header(self):
            return self.getTypedRuleContext(DMFParser.Macro_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def" ):
                listener.enterMacro_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def" ):
                listener.exitMacro_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def" ):
                return visitor.visitMacro_def(self)
            else:
                return visitor.visitChildren(self)




    def macro_def(self):

        localctx = DMFParser.Macro_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_macro_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.macro_header()
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2, DMFParser.T__4]:
                self.state = 585
                self.compound()
                pass
            elif token in [DMFParser.T__9, DMFParser.T__10, DMFParser.T__12, DMFParser.T__18, DMFParser.T__23, DMFParser.T__24, DMFParser.T__26, DMFParser.T__27, DMFParser.T__28, DMFParser.T__30, DMFParser.T__31, DMFParser.T__34, DMFParser.T__38, DMFParser.T__39, DMFParser.T__41, DMFParser.T__42, DMFParser.T__43, DMFParser.T__51, DMFParser.T__54, DMFParser.T__55, DMFParser.T__56, DMFParser.T__57, DMFParser.T__58, DMFParser.T__59, DMFParser.T__60, DMFParser.T__61, DMFParser.T__62, DMFParser.T__72, DMFParser.T__74, DMFParser.T__75, DMFParser.T__76, DMFParser.T__79, DMFParser.T__80, DMFParser.T__81, DMFParser.T__82, DMFParser.T__83, DMFParser.T__84, DMFParser.T__85, DMFParser.T__86, DMFParser.T__88, DMFParser.T__89, DMFParser.T__90, DMFParser.T__91, DMFParser.T__92, DMFParser.T__93, DMFParser.T__94, DMFParser.T__95, DMFParser.T__96, DMFParser.T__97, DMFParser.T__98, DMFParser.T__99, DMFParser.T__100, DMFParser.T__101, DMFParser.T__102, DMFParser.T__103, DMFParser.T__104, DMFParser.T__105, DMFParser.T__106, DMFParser.T__107, DMFParser.T__108, DMFParser.T__109, DMFParser.T__110, DMFParser.T__111, DMFParser.T__112, DMFParser.T__113, DMFParser.T__114, DMFParser.T__115, DMFParser.T__116, DMFParser.T__117, DMFParser.T__118, DMFParser.T__119, DMFParser.T__120, DMFParser.T__121, DMFParser.T__122, DMFParser.T__125, DMFParser.T__126, DMFParser.T__131, DMFParser.T__153, DMFParser.T__154, DMFParser.T__155, DMFParser.T__156, DMFParser.T__157, DMFParser.T__160, DMFParser.T__163, DMFParser.T__164, DMFParser.T__166, DMFParser.T__167, DMFParser.T__168, DMFParser.T__169, DMFParser.T__170, DMFParser.T__171, DMFParser.T__172, DMFParser.T__173, DMFParser.T__174, DMFParser.T__189, DMFParser.T__190, DMFParser.T__191, DMFParser.T__192, DMFParser.T__193, DMFParser.T__194, DMFParser.T__195, DMFParser.T__196, DMFParser.T__197, DMFParser.T__198, DMFParser.T__199, DMFParser.T__200, DMFParser.T__201, DMFParser.T__202, DMFParser.T__203, DMFParser.T__204, DMFParser.T__205, DMFParser.T__206, DMFParser.T__207, DMFParser.T__209, DMFParser.T__212, DMFParser.T__213, DMFParser.T__214, DMFParser.T__215, DMFParser.INTERACTIVE, DMFParser.NOT, DMFParser.OFF, DMFParser.ON, DMFParser.SUB, DMFParser.TOGGLE, DMFParser.MAYBE, DMFParser.ID, DMFParser.INT, DMFParser.FLOAT, DMFParser.STRING]:
                self.state = 586
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_type = None # Value_typeContext

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ParamContext)
            else:
                return self.getTypedRuleContext(DMFParser.ParamContext,i)


        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_header" ):
                listener.enterMacro_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_header" ):
                listener.exitMacro_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_header" ):
                return visitor.visitMacro_header(self)
            else:
                return visitor.visitChildren(self)




    def macro_header(self):

        localctx = DMFParser.Macro_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_macro_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(DMFParser.T__72)
            self.state = 590
            self.match(DMFParser.T__18)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__18) | (1 << DMFParser.T__23) | (1 << DMFParser.T__24) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__28) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__34) | (1 << DMFParser.T__43) | (1 << DMFParser.T__51))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (DMFParser.T__75 - 76)) | (1 << (DMFParser.T__79 - 76)) | (1 << (DMFParser.T__80 - 76)) | (1 << (DMFParser.T__81 - 76)) | (1 << (DMFParser.T__82 - 76)) | (1 << (DMFParser.T__83 - 76)) | (1 << (DMFParser.T__84 - 76)) | (1 << (DMFParser.T__85 - 76)) | (1 << (DMFParser.T__86 - 76)) | (1 << (DMFParser.T__88 - 76)) | (1 << (DMFParser.T__89 - 76)) | (1 << (DMFParser.T__90 - 76)) | (1 << (DMFParser.T__91 - 76)) | (1 << (DMFParser.T__92 - 76)) | (1 << (DMFParser.T__93 - 76)) | (1 << (DMFParser.T__94 - 76)) | (1 << (DMFParser.T__95 - 76)) | (1 << (DMFParser.T__96 - 76)) | (1 << (DMFParser.T__97 - 76)) | (1 << (DMFParser.T__98 - 76)) | (1 << (DMFParser.T__99 - 76)) | (1 << (DMFParser.T__100 - 76)) | (1 << (DMFParser.T__101 - 76)) | (1 << (DMFParser.T__102 - 76)) | (1 << (DMFParser.T__103 - 76)) | (1 << (DMFParser.T__104 - 76)) | (1 << (DMFParser.T__105 - 76)) | (1 << (DMFParser.T__106 - 76)) | (1 << (DMFParser.T__107 - 76)) | (1 << (DMFParser.T__108 - 76)) | (1 << (DMFParser.T__109 - 76)) | (1 << (DMFParser.T__110 - 76)) | (1 << (DMFParser.T__111 - 76)) | (1 << (DMFParser.T__112 - 76)) | (1 << (DMFParser.T__113 - 76)) | (1 << (DMFParser.T__114 - 76)) | (1 << (DMFParser.T__115 - 76)) | (1 << (DMFParser.T__116 - 76)) | (1 << (DMFParser.T__117 - 76)) | (1 << (DMFParser.T__118 - 76)) | (1 << (DMFParser.T__119 - 76)) | (1 << (DMFParser.T__120 - 76)) | (1 << (DMFParser.T__121 - 76)) | (1 << (DMFParser.T__122 - 76)) | (1 << (DMFParser.T__125 - 76)) | (1 << (DMFParser.T__126 - 76)) | (1 << (DMFParser.T__131 - 76)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__207 - 154)) | (1 << (DMFParser.T__209 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (DMFParser.INTERACTIVE - 221)) | (1 << (DMFParser.OFF - 221)) | (1 << (DMFParser.ON - 221)) | (1 << (DMFParser.MAYBE - 221)) | (1 << (DMFParser.ID - 221)))) != 0):
                self.state = 591
                self.param()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DMFParser.T__19:
                    self.state = 592
                    self.match(DMFParser.T__19)
                    self.state = 593
                    self.param()
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 601
            self.match(DMFParser.CLOSE_PAREN)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DMFParser.T__73:
                self.state = 602
                self.match(DMFParser.T__73)
                self.state = 603
                localctx.ret_type = self.value_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self.deprecated = None
            self._value_type = None # Value_typeContext
            self._INT = None # Token
            self._name = None # NameContext

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = DMFParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__23 or _la==DMFParser.T__34:
                    self.state = 606
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__23 or _la==DMFParser.T__34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 609
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                self.state = 614
                localctx._INT = self.match(DMFParser.INT)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 617
                localctx._value_type = self.value_type()
                self.state = 618
                localctx._name = self.name()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                localctx._name = self.name()
                self.state = 623
                self.match(DMFParser.INJECT)
                self.state = 624
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.deprecated=True
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_arg_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def TOGGLE(self):
            return self.getToken(DMFParser.TOGGLE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_no_arg_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_arg_action" ):
                listener.enterNo_arg_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_arg_action" ):
                listener.exitNo_arg_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_arg_action" ):
                return visitor.visitNo_arg_action(self)
            else:
                return visitor.visitChildren(self)




    def no_arg_action(self):

        localctx = DMFParser.No_arg_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_no_arg_action)
        self._la = 0 # Token type
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.match(DMFParser.T__74)
                self.state = 632
                self.match(DMFParser.ON)
                localctx.which="TURN-ON"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(DMFParser.T__74)
                self.state = 635
                self.match(DMFParser.OFF)
                localctx.which="TURN-OFF"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 637
                self.match(DMFParser.TOGGLE)
                self.state = 639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self.match(DMFParser.T__75)


                localctx.which="TOGGLE"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 642
                self.match(DMFParser.T__76)
                self.state = 648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.match(DMFParser.T__77)
                    self.state = 645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__30:
                        self.state = 644
                        self.match(DMFParser.T__30)


                    self.state = 647
                    self.match(DMFParser.T__78)


                localctx.which="REMOVE-FROM-BOARD"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 651
                self.match(DMFParser.T__79)
                self.state = 652
                self.match(DMFParser.T__80)
                localctx.which="RESET PADS"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 654
                self.match(DMFParser.T__79)
                self.state = 655
                self.match(DMFParser.T__81)
                localctx.which="RESET MAGNETS"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 657
                self.match(DMFParser.T__79)
                self.state = 661
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__82]:
                    self.state = 658
                    self.match(DMFParser.T__82)
                    pass
                elif token in [DMFParser.T__83]:
                    self.state = 659
                    self.match(DMFParser.T__83)
                    self.state = 660
                    self.match(DMFParser.T__84)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.which="RESET HEATERS"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 664
                self.match(DMFParser.T__79)
                self.state = 665
                self.match(DMFParser.T__85)
                localctx.which="RESET CHILLERS"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 667
                self.match(DMFParser.T__79)
                self.state = 668
                self.match(DMFParser.T__86)
                localctx.which="RESET ALL"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_maybe_type = None # Not_maybe_typeContext

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)

        def not_maybe_type(self):
            return self.getTypedRuleContext(DMFParser.Not_maybe_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_type" ):
                listener.enterValue_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_type" ):
                listener.exitValue_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_type" ):
                return visitor.visitValue_type(self)
            else:
                return visitor.visitChildren(self)




    def value_type(self):

        localctx = DMFParser.Value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_value_type)
        try:
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.MAYBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.match(DMFParser.MAYBE)
                self.state = 673
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.match(DMFParser.T__18)
                self.state = 677
                self.match(DMFParser.MAYBE)
                self.state = 678
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 679
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__24, DMFParser.T__26, DMFParser.T__27, DMFParser.T__31, DMFParser.T__43, DMFParser.T__75, DMFParser.T__83, DMFParser.T__88, DMFParser.T__89, DMFParser.T__90, DMFParser.T__91, DMFParser.T__92, DMFParser.T__93, DMFParser.T__94, DMFParser.T__96, DMFParser.T__97, DMFParser.T__98, DMFParser.T__99, DMFParser.T__100, DMFParser.T__102, DMFParser.T__103, DMFParser.T__104, DMFParser.T__105, DMFParser.T__106, DMFParser.T__107, DMFParser.T__110, DMFParser.T__111, DMFParser.T__112, DMFParser.T__113, DMFParser.T__114, DMFParser.T__116, DMFParser.T__117, DMFParser.T__118, DMFParser.T__120, DMFParser.T__121, DMFParser.T__122, DMFParser.T__125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_maybe_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sampleable_type = None # Sampleable_typeContext
            self._atomic_type = None # Atomic_typeContext

        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def atomic_type(self):
            return self.getTypedRuleContext(DMFParser.Atomic_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_not_maybe_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_maybe_type" ):
                listener.enterNot_maybe_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_maybe_type" ):
                listener.exitNot_maybe_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_maybe_type" ):
                return visitor.visitNot_maybe_type(self)
            else:
                return visitor.visitChildren(self)




    def not_maybe_type(self):

        localctx = DMFParser.Not_maybe_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_not_maybe_type)
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                localctx._sampleable_type = self.sampleable_type()
                self.state = 688
                self.match(DMFParser.T__87)
                localctx.type=localctx._sampleable_type.type.sample
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                localctx._atomic_type = self.atomic_type()
                localctx.type=localctx._atomic_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._component_type = None # Component_typeContext
            self._sampleable_type = None # Sampleable_typeContext

        def component_type(self):
            return self.getTypedRuleContext(DMFParser.Component_typeContext,0)


        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_atomic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_type" ):
                listener.enterAtomic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_type" ):
                listener.exitAtomic_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_type" ):
                return visitor.visitAtomic_type(self)
            else:
                return visitor.visitChildren(self)




    def atomic_type(self):

        localctx = DMFParser.Atomic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_atomic_type)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.match(DMFParser.T__43)
                localctx.type=Type.DROP
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.match(DMFParser.T__24)
                localctx.type=Type.STRING
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 700
                self.match(DMFParser.T__75)
                localctx.type=Type.BINARY_STATE
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 702
                self.match(DMFParser.T__88)
                localctx.type=Type.BINARY_CPT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 704
                self.match(DMFParser.T__89)
                localctx.type=Type.DELTA
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 706
                self.match(DMFParser.T__90)
                localctx.type=Type.MOTION
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 708
                self.match(DMFParser.T__91)
                localctx.type=Type.DELAY
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 710
                self.match(DMFParser.T__92)
                localctx.type=Type.BOOL
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 712
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__26 or _la==DMFParser.T__27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.DIR
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 714
                self.match(DMFParser.T__31)
                localctx.type=Type.REAGENT
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 716
                self.match(DMFParser.T__93)
                localctx.type=Type.LIQUID
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 718
                self.match(DMFParser.T__94)
                self.state = 719
                self.match(DMFParser.T__95)
                localctx.type=Type.SENSOR_READING
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 721
                self.match(DMFParser.T__96)
                self.state = 722
                self.match(DMFParser.T__95)
                localctx.type=Type.ESELOG_READING
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 724
                localctx._component_type = self.component_type()
                localctx.type=localctx._component_type.type
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 727
                localctx._sampleable_type = self.sampleable_type()
                localctx.type=localctx._sampleable_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sampleable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._quantity_type = None # Quantity_typeContext

        def quantity_type(self):
            return self.getTypedRuleContext(DMFParser.Quantity_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sampleable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleable_type" ):
                listener.enterSampleable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleable_type" ):
                listener.exitSampleable_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleable_type" ):
                return visitor.visitSampleable_type(self)
            else:
                return visitor.visitChildren(self)




    def sampleable_type(self):

        localctx = DMFParser.Sampleable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sampleable_type)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(DMFParser.T__97)
                localctx.type=Type.INT
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 734
                self.match(DMFParser.T__98)
                localctx.type=Type.FLOAT
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 736
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__99 or _la==DMFParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self.match(DMFParser.T__101)


                localctx.type=Type.ABS_TEMP
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 741
                self.match(DMFParser.T__102)
                localctx.type=Type.TIMESTAMP
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 743
                localctx._quantity_type = self.quantity_type()
                localctx.type=localctx._quantity_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantity_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_quantity_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantity_type" ):
                listener.enterQuantity_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantity_type" ):
                listener.exitQuantity_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantity_type" ):
                return visitor.visitQuantity_type(self)
            else:
                return visitor.visitChildren(self)




    def quantity_type(self):

        localctx = DMFParser.Quantity_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_quantity_type)
        self._la = 0 # Token type
        try:
            self.state = 761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.match(DMFParser.T__103)
                localctx.type=Type.TIME
                pass
            elif token in [DMFParser.T__104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.match(DMFParser.T__104)
                localctx.type=Time.FREQUENCY
                pass
            elif token in [DMFParser.T__105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.match(DMFParser.T__105)
                localctx.type=Type.TICKS
                pass
            elif token in [DMFParser.T__106]:
                self.enterOuterAlt(localctx, 4)
                self.state = 754
                self.match(DMFParser.T__106)
                localctx.type=Type.VOLUME
                pass
            elif token in [DMFParser.T__107]:
                self.enterOuterAlt(localctx, 5)
                self.state = 756
                self.match(DMFParser.T__107)
                localctx.type=Type.VOLTAGE
                pass
            elif token in [DMFParser.T__99, DMFParser.T__100]:
                self.enterOuterAlt(localctx, 6)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__99 or _la==DMFParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 759
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (DMFParser.T__89 - 90)) | (1 << (DMFParser.T__108 - 90)) | (1 << (DMFParser.T__109 - 90)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.REL_TEMP
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_component_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_type" ):
                listener.enterComponent_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_type" ):
                listener.exitComponent_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponent_type" ):
                return visitor.visitComponent_type(self)
            else:
                return visitor.visitChildren(self)




    def component_type(self):

        localctx = DMFParser.Component_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_component_type)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.match(DMFParser.T__110)
                localctx.type=Type.PAD
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__111:
                    self.state = 765
                    self.match(DMFParser.T__111)


                self.state = 768
                self.match(DMFParser.T__112)
                localctx.type=Type.PIPETTING_TARGET
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                self.match(DMFParser.T__113)
                localctx.type=Type.WELL
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 772
                    self.match(DMFParser.T__114)
                    self.state = 773
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__101 or _la==DMFParser.T__115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__114:
                        self.state = 774
                        self.match(DMFParser.T__114)


                    self.state = 777
                    self.match(DMFParser.T__116)
                    pass


                localctx.type=Type.EXTRACTION_POINT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 781
                self.match(DMFParser.T__113)
                self.state = 782
                self.match(DMFParser.T__110)
                localctx.type=Type.WELL_PAD
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__113:
                    self.state = 784
                    self.match(DMFParser.T__113)


                self.state = 787
                self.match(DMFParser.T__117)
                localctx.type=Type.WELL_GATE
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 792
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__118]:
                    self.state = 789
                    self.match(DMFParser.T__118)
                    pass
                elif token in [DMFParser.T__83]:
                    self.state = 790
                    self.match(DMFParser.T__83)
                    self.state = 791
                    self.match(DMFParser.T__119)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.type=Type.HEATER
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 795
                self.match(DMFParser.T__120)
                localctx.type=Type.CHILLER
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 797
                self.match(DMFParser.T__121)
                localctx.type=Type.MAGNET
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 799
                self.match(DMFParser.T__122)
                self.state = 800
                self.match(DMFParser.T__123)
                localctx.type=Type.POWER_SUPPLY
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 802
                self.match(DMFParser.T__122)
                self.state = 803
                self.match(DMFParser.T__124)
                localctx.type=Type.POWER_MODE
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 805
                self.match(DMFParser.T__125)
                localctx.type=Type.FAN
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 807
                self.match(DMFParser.T__94)
                localctx.type=Type.SENSOR
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 809
                self.match(DMFParser.T__96)
                localctx.type=Type.ESELOG
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dim_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unit = None


        def getRuleIndex(self):
            return DMFParser.RULE_dim_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDim_unit" ):
                listener.enterDim_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDim_unit" ):
                listener.exitDim_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDim_unit" ):
                return visitor.visitDim_unit(self)
            else:
                return visitor.visitChildren(self)




    def dim_unit(self):

        localctx = DMFParser.Dim_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dim_unit)
        self._la = 0 # Token type
        try:
            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__126, DMFParser.T__127, DMFParser.T__128, DMFParser.T__129, DMFParser.T__130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                _la = self._input.LA(1)
                if not(((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (DMFParser.T__126 - 127)) | (1 << (DMFParser.T__127 - 127)) | (1 << (DMFParser.T__128 - 127)) | (1 << (DMFParser.T__129 - 127)) | (1 << (DMFParser.T__130 - 127)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.sec
                pass
            elif token in [DMFParser.T__131, DMFParser.T__132, DMFParser.T__133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                _la = self._input.LA(1)
                if not(((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (DMFParser.T__131 - 132)) | (1 << (DMFParser.T__132 - 132)) | (1 << (DMFParser.T__133 - 132)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.ms
                pass
            elif token in [DMFParser.T__134, DMFParser.T__135, DMFParser.T__136, DMFParser.T__137, DMFParser.T__138, DMFParser.T__139]:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                _la = self._input.LA(1)
                if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (DMFParser.T__134 - 135)) | (1 << (DMFParser.T__135 - 135)) | (1 << (DMFParser.T__136 - 135)) | (1 << (DMFParser.T__137 - 135)) | (1 << (DMFParser.T__138 - 135)) | (1 << (DMFParser.T__139 - 135)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.uL
                pass
            elif token in [DMFParser.T__140, DMFParser.T__141, DMFParser.T__142, DMFParser.T__143, DMFParser.T__144, DMFParser.T__145]:
                self.enterOuterAlt(localctx, 4)
                self.state = 819
                _la = self._input.LA(1)
                if not(((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (DMFParser.T__140 - 141)) | (1 << (DMFParser.T__141 - 141)) | (1 << (DMFParser.T__142 - 141)) | (1 << (DMFParser.T__143 - 141)) | (1 << (DMFParser.T__144 - 141)) | (1 << (DMFParser.T__145 - 141)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.mL
                pass
            elif token in [DMFParser.T__105, DMFParser.T__146]:
                self.enterOuterAlt(localctx, 5)
                self.state = 821
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__105 or _la==DMFParser.T__146):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=ticks
                pass
            elif token in [DMFParser.T__43, DMFParser.T__147]:
                self.enterOuterAlt(localctx, 6)
                self.state = 823
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__43 or _la==DMFParser.T__147):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=EnvRelativeUnit.DROP
                pass
            elif token in [DMFParser.T__148, DMFParser.T__149, DMFParser.T__150]:
                self.enterOuterAlt(localctx, 7)
                self.state = 825
                _la = self._input.LA(1)
                if not(((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (DMFParser.T__148 - 149)) | (1 << (DMFParser.T__149 - 149)) | (1 << (DMFParser.T__150 - 149)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.volts
                pass
            elif token in [DMFParser.T__151, DMFParser.T__152]:
                self.enterOuterAlt(localctx, 8)
                self.state = 827
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__151 or _la==DMFParser.T__152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.hertz
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numbered_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None


        def getRuleIndex(self):
            return DMFParser.RULE_numbered_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_type" ):
                listener.enterNumbered_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_type" ):
                listener.exitNumbered_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_type" ):
                return visitor.visitNumbered_type(self)
            else:
                return visitor.visitChildren(self)




    def numbered_type(self):

        localctx = DMFParser.Numbered_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_numbered_type)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.match(DMFParser.T__113)
                localctx.kind=NumberedItem.WELL
                pass
            elif token in [DMFParser.T__83, DMFParser.T__118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__118]:
                    self.state = 833
                    self.match(DMFParser.T__118)
                    pass
                elif token in [DMFParser.T__83]:
                    self.state = 834
                    self.match(DMFParser.T__83)
                    self.state = 835
                    self.match(DMFParser.T__119)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.kind=NumberedItem.HEATER
                pass
            elif token in [DMFParser.T__120]:
                self.enterOuterAlt(localctx, 3)
                self.state = 839
                self.match(DMFParser.T__120)
                localctx.kind=NumberedItem.CHILLER
                pass
            elif token in [DMFParser.T__121]:
                self.enterOuterAlt(localctx, 4)
                self.state = 841
                self.match(DMFParser.T__121)
                localctx.kind=NumberedItem.MAGNET
                pass
            elif token in [DMFParser.T__114, DMFParser.T__116]:
                self.enterOuterAlt(localctx, 5)
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 843
                    self.match(DMFParser.T__114)
                    self.state = 844
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__101 or _la==DMFParser.T__115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__114:
                        self.state = 845
                        self.match(DMFParser.T__114)


                    self.state = 848
                    self.match(DMFParser.T__116)
                    pass


                localctx.kind=NumberedItem.EXTRACTION_POINT
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinimumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_minimum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinimum" ):
                listener.enterMinimum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinimum" ):
                listener.exitMinimum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinimum" ):
                return visitor.visitMinimum(self)
            else:
                return visitor.visitChildren(self)




    def minimum(self):

        localctx = DMFParser.MinimumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_minimum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__153 or _la==DMFParser.T__154):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaximumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_maximum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaximum" ):
                listener.enterMaximum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaximum" ):
                listener.exitMaximum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaximum" ):
                return visitor.visitMaximum(self)
            else:
                return visitor.visitChildren(self)




    def maximum(self):

        localctx = DMFParser.MaximumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_maximum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__155 or _la==DMFParser.T__156):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Min_maxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minimum(self):
            return self.getTypedRuleContext(DMFParser.MinimumContext,0)


        def maximum(self):
            return self.getTypedRuleContext(DMFParser.MaximumContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_min_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMin_max" ):
                listener.enterMin_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMin_max" ):
                listener.exitMin_max(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMin_max" ):
                return visitor.visitMin_max(self)
            else:
                return visitor.visitChildren(self)




    def min_max(self):

        localctx = DMFParser.Min_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_min_max)
        try:
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__153, DMFParser.T__154]:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.minimum()
                pass
            elif token in [DMFParser.T__155, DMFParser.T__156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.maximum()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = DMFParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self.match(DMFParser.T__15)
                self.state = 863
                self.match(DMFParser.T__110)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.match(DMFParser.T__157)
                self.state = 865
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.match(DMFParser.T__160)
                self.state = 867
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 868
                self.match(DMFParser.T__15)
                self.state = 869
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__26 or _la==DMFParser.T__27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 870
                self.match(DMFParser.T__161)
                self.state = 871
                self.match(DMFParser.T__162)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 872
                self.match(DMFParser.T__163)
                self.state = 873
                self.match(DMFParser.T__164)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 874
                self.match(DMFParser.T__165)
                self.state = 875
                self.match(DMFParser.T__164)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 876
                self.match(DMFParser.T__112)
                self.state = 877
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__99 or _la==DMFParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 878
                self.match(DMFParser.T__166)
                self.state = 879
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__99 or _la==DMFParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 880
                self.match(DMFParser.T__122)
                self.state = 881
                self.match(DMFParser.T__123)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 882
                self.min_max()
                self.state = 883
                self.match(DMFParser.T__107)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 885
                self.min_max()
                self.state = 886
                _la = self._input.LA(1)
                if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (DMFParser.T__99 - 100)) | (1 << (DMFParser.T__100 - 100)) | (1 << (DMFParser.T__112 - 100)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__122:
                    self.state = 888
                    self.match(DMFParser.T__122)


                self.state = 891
                self.match(DMFParser.T__124)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 892
                self.match(DMFParser.T__83)
                self.state = 893
                self.match(DMFParser.T__119)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 894
                self.match(DMFParser.T__167)
                self.state = 895
                self.match(DMFParser.T__168)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 896
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__87 or _la==DMFParser.T__169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 897
                self.match(DMFParser.T__170)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 898
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__87 or _la==DMFParser.T__169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 899
                self.match(DMFParser.T__171)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 900
                self.match(DMFParser.T__172)
                self.state = 902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.match(DMFParser.T__173)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 904
                self.match(DMFParser.T__174)
                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.match(DMFParser.T__173)


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 908
                self.min_max()
                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 909
                    self.match(DMFParser.T__173)


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 917
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__175, DMFParser.T__178]:
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__175:
                        self.state = 912
                        self.match(DMFParser.T__175)


                    pass
                elif token in [DMFParser.T__176]:
                    self.state = 915
                    self.match(DMFParser.T__176)
                    pass
                elif token in [DMFParser.T__177]:
                    self.state = 916
                    self.match(DMFParser.T__177)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 919
                self.match(DMFParser.T__178)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 920
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__179 or _la==DMFParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 921
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__181 or _la==DMFParser.T__182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 922
                self.kwd_names()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 923
                self.match(DMFParser.T__43)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 924
                self.match(DMFParser.T__110)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 925
                self.match(DMFParser.T__113)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 926
                self.match(DMFParser.T__106)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 927
                self.match(DMFParser.T__31)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 928
                self.match(DMFParser.T__118)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 929
                self.match(DMFParser.T__120)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 930
                self.match(DMFParser.T__121)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 931
                self.match(DMFParser.T__75)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 932
                self.match(DMFParser.T__125)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 933
                self.match(DMFParser.T__162)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 934
                self.match(DMFParser.T__96)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 935
                self.match(DMFParser.T__102)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 936
                self.match(DMFParser.T__100)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 937
                self.match(DMFParser.T__99)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 938
                self.match(DMFParser.T__117)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 939
                self.match(DMFParser.T__26)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 940
                self.match(DMFParser.T__27)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 941
                self.match(DMFParser.T__66)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 942
                self.match(DMFParser.T__68)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 943
                self.match(DMFParser.T__69)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 944
                self.match(DMFParser.T__107)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 945
                self.match(DMFParser.T__124)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 946
                self.match(DMFParser.T__173)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 947
                self.match(DMFParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None
            self.n = None # Token

        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_old_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_attr" ):
                listener.enterOld_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_attr" ):
                listener.exitOld_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_attr" ):
                return visitor.visitOld_attr(self)
            else:
                return visitor.visitChildren(self)




    def old_attr(self):

        localctx = DMFParser.Old_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_old_attr)
        self._la = 0 # Token type
        try:
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.match(DMFParser.T__15)
                self.state = 951
                self.match(DMFParser.T__110)
                localctx.which="#exit_pad"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.match(DMFParser.T__157)
                self.state = 954
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#y_coord"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 956
                self.match(DMFParser.T__160)
                self.state = 957
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#x_coord"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 959
                self.match(DMFParser.T__15)
                self.state = 960
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__26 or _la==DMFParser.T__27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#exit_dir"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 962
                self.match(DMFParser.T__161)
                self.state = 963
                self.match(DMFParser.T__162)
                localctx.which="#remaining_capacity"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.match(DMFParser.T__163)
                self.state = 966
                self.match(DMFParser.T__164)
                localctx.which="#fill_level"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 968
                self.match(DMFParser.T__165)
                self.state = 969
                self.match(DMFParser.T__164)
                localctx.which="#refill_level"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 971
                self.match(DMFParser.T__112)
                self.state = 972
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__99 or _la==DMFParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#target_temperature"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 974
                self.match(DMFParser.T__166)
                self.state = 975
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__99 or _la==DMFParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#current_temperature"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 977
                self.match(DMFParser.T__122)
                self.state = 978
                self.match(DMFParser.T__123)
                localctx.which="#power_supply"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 980
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__153 or _la==DMFParser.T__154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 981
                self.match(DMFParser.T__107)
                localctx.which="#min_voltage"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 983
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__155 or _la==DMFParser.T__156):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 984
                self.match(DMFParser.T__107)
                localctx.which="#max_voltage"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 986
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__153 or _la==DMFParser.T__154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 987
                _la = self._input.LA(1)
                if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (DMFParser.T__99 - 100)) | (1 << (DMFParser.T__100 - 100)) | (1 << (DMFParser.T__112 - 100)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#min_target"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 989
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__155 or _la==DMFParser.T__156):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 990
                _la = self._input.LA(1)
                if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (DMFParser.T__99 - 100)) | (1 << (DMFParser.T__100 - 100)) | (1 << (DMFParser.T__112 - 100)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#max_target"
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 992
                self.match(DMFParser.T__122)
                self.state = 993
                self.match(DMFParser.T__124)
                localctx.which="#power_mode"
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 995
                self.match(DMFParser.T__83)
                self.state = 996
                self.match(DMFParser.T__119)
                localctx.which="#heating_zone"
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 998
                self.match(DMFParser.T__167)
                self.state = 999
                self.match(DMFParser.T__168)
                localctx.which="#n_samples"
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1001
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__87 or _la==DMFParser.T__169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1002
                self.match(DMFParser.T__170)
                localctx.which="#sample_rate"
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1004
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__87 or _la==DMFParser.T__169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1005
                self.match(DMFParser.T__171)
                localctx.which="#sample_interval"
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1007
                self.match(DMFParser.T__172)
                self.state = 1008
                self.match(DMFParser.T__173)
                localctx.which="#first_value"
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1010
                self.match(DMFParser.T__174)
                self.state = 1011
                self.match(DMFParser.T__173)
                localctx.which="#last_value"
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1013
                localctx.n = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__31) | (1 << DMFParser.T__43))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (DMFParser.T__66 - 67)) | (1 << (DMFParser.T__68 - 67)) | (1 << (DMFParser.T__69 - 67)) | (1 << (DMFParser.T__75 - 67)) | (1 << (DMFParser.T__96 - 67)) | (1 << (DMFParser.T__99 - 67)) | (1 << (DMFParser.T__100 - 67)) | (1 << (DMFParser.T__102 - 67)) | (1 << (DMFParser.T__106 - 67)) | (1 << (DMFParser.T__107 - 67)) | (1 << (DMFParser.T__110 - 67)) | (1 << (DMFParser.T__112 - 67)) | (1 << (DMFParser.T__113 - 67)) | (1 << (DMFParser.T__117 - 67)) | (1 << (DMFParser.T__118 - 67)) | (1 << (DMFParser.T__120 - 67)) | (1 << (DMFParser.T__121 - 67)) | (1 << (DMFParser.T__124 - 67)) | (1 << (DMFParser.T__125 - 67)))) != 0) or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (DMFParser.T__162 - 163)) | (1 << (DMFParser.T__172 - 163)) | (1 << (DMFParser.T__173 - 163)) | (1 << (DMFParser.T__174 - 163)))) != 0) or _la==DMFParser.ID):
                    localctx.n = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which=(None if localctx.n is None else localctx.n.text)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None


        def getRuleIndex(self):
            return DMFParser.RULE_rel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel" ):
                listener.enterRel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel" ):
                listener.exitRel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel" ):
                return visitor.visitRel(self)
            else:
                return visitor.visitChildren(self)




    def rel(self):

        localctx = DMFParser.RelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_rel)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.match(DMFParser.T__183)
                localctx.which=Rel.EQ
                pass
            elif token in [DMFParser.T__184]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self.match(DMFParser.T__184)
                localctx.which=Rel.NE
                pass
            elif token in [DMFParser.T__185]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1021
                self.match(DMFParser.T__185)
                localctx.which=Rel.LT
                pass
            elif token in [DMFParser.T__186]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1023
                self.match(DMFParser.T__186)
                localctx.which=Rel.LE
                pass
            elif token in [DMFParser.T__187]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1025
                self.match(DMFParser.T__187)
                localctx.which=Rel.GT
                pass
            elif token in [DMFParser.T__188]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1027
                self.match(DMFParser.T__188)
                localctx.which=Rel.GE
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None


        def getRuleIndex(self):
            return DMFParser.RULE_bool_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_val" ):
                listener.enterBool_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_val" ):
                listener.exitBool_val(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_val" ):
                return visitor.visitBool_val(self)
            else:
                return visitor.visitChildren(self)




    def bool_val(self):

        localctx = DMFParser.Bool_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_bool_val)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__189, DMFParser.T__190, DMFParser.T__191, DMFParser.T__192, DMFParser.T__193, DMFParser.T__194]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                _la = self._input.LA(1)
                if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (DMFParser.T__189 - 190)) | (1 << (DMFParser.T__190 - 190)) | (1 << (DMFParser.T__191 - 190)) | (1 << (DMFParser.T__192 - 190)) | (1 << (DMFParser.T__193 - 190)) | (1 << (DMFParser.T__194 - 190)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=True
                pass
            elif token in [DMFParser.T__195, DMFParser.T__196, DMFParser.T__197, DMFParser.T__198, DMFParser.T__199, DMFParser.T__200]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (DMFParser.T__195 - 196)) | (1 << (DMFParser.T__196 - 196)) | (1 << (DMFParser.T__197 - 196)) | (1 << (DMFParser.T__198 - 196)) | (1 << (DMFParser.T__199 - 196)) | (1 << (DMFParser.T__200 - 196)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None
            self._multi_word_name = None # Multi_word_nameContext
            self._ID = None # Token
            self._kwd_names = None # Kwd_namesContext

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = DMFParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_name)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                localctx._multi_word_name = self.multi_word_name()
                localctx.val=localctx._multi_word_name.val
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                localctx._ID = self.match(DMFParser.ID)
                localctx.val=(None if localctx._ID is None else localctx._ID.text)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1042
                localctx._kwd_names = self.kwd_names()
                localctx.val=(None if localctx._kwd_names is None else self._input.getText(localctx._kwd_names.start,localctx._kwd_names.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_word_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def INTERACTIVE(self):
            return self.getToken(DMFParser.INTERACTIVE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_multi_word_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_word_name" ):
                listener.enterMulti_word_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_word_name" ):
                listener.exitMulti_word_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_word_name" ):
                return visitor.visitMulti_word_name(self)
            else:
                return visitor.visitChildren(self)




    def multi_word_name(self):

        localctx = DMFParser.Multi_word_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_multi_word_name)
        self._la = 0 # Token type
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                self.match(DMFParser.ON)
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 1048
                    self.match(DMFParser.T__30)


                self.state = 1051
                self.match(DMFParser.T__78)
                localctx.val="on board"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 1053
                    self.match(DMFParser.T__30)


                self.state = 1056
                self.match(DMFParser.INTERACTIVE)
                self.state = 1057
                self.match(DMFParser.T__31)
                localctx.val="interactive reagent"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 1059
                    self.match(DMFParser.T__30)


                self.state = 1062
                self.match(DMFParser.INTERACTIVE)
                self.state = 1063
                self.match(DMFParser.T__106)
                localctx.val="interactive volume"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1065
                self.match(DMFParser.T__30)
                self.state = 1066
                self.match(DMFParser.T__78)
                localctx.val="the board"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 1068
                    self.match(DMFParser.T__30)


                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__174:
                    self.state = 1071
                    self.match(DMFParser.T__174)


                self.state = 1074
                self.match(DMFParser.T__201)
                self.state = 1075
                self.match(DMFParser.T__110)
                localctx.val="clicked pad"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__30:
                    self.state = 1077
                    self.match(DMFParser.T__30)


                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__174:
                    self.state = 1080
                    self.match(DMFParser.T__174)


                self.state = 1083
                self.match(DMFParser.T__201)
                self.state = 1084
                self.match(DMFParser.T__43)
                localctx.val="clicked drop"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1086
                self.match(DMFParser.T__202)
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__23:
                    self.state = 1087
                    self.match(DMFParser.T__23)


                self.state = 1090
                self.match(DMFParser.T__43)
                localctx.val="dispense drop"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1092
                self.match(DMFParser.T__203)
                self.state = 1093
                self.match(DMFParser.T__113)
                localctx.val="enter well"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1095
                self.match(DMFParser.T__204)
                self.state = 1096
                self.match(DMFParser.T__9)
                localctx.val="transfer in"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1098
                self.match(DMFParser.T__204)
                self.state = 1099
                self.match(DMFParser.T__205)
                localctx.val="transfer out"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1101
                self.match(DMFParser.T__206)
                self.state = 1102
                self.match(DMFParser.T__10)
                self.state = 1103
                self.match(DMFParser.T__202)
                localctx.val="prepare to dispense"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1105
                self.match(DMFParser.T__207)
                self.state = 1111
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__23, DMFParser.T__95]:
                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__23:
                        self.state = 1106
                        self.match(DMFParser.T__23)


                    self.state = 1109
                    self.match(DMFParser.T__95)
                    pass
                elif token in [DMFParser.T__208]:
                    self.state = 1110
                    self.match(DMFParser.T__208)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.val="take reading"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1114
                self.match(DMFParser.T__166)
                self.state = 1115
                self.match(DMFParser.T__103)
                localctx.val="current time"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1117
                self.match(DMFParser.T__209)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__10:
                    self.state = 1118
                    self.match(DMFParser.T__10)


                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__210:
                    self.state = 1121
                    self.match(DMFParser.T__210)


                self.state = 1124
                self.match(DMFParser.T__211)
                localctx.val="write to csv file"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwd_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_kwd_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwd_names" ):
                listener.enterKwd_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwd_names" ):
                listener.exitKwd_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwd_names" ):
                return visitor.visitKwd_names(self)
            else:
                return visitor.visitChildren(self)




    def kwd_names(self):

        localctx = DMFParser.Kwd_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_kwd_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__23) | (1 << DMFParser.T__28) | (1 << DMFParser.T__34) | (1 << DMFParser.T__51))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (DMFParser.T__79 - 80)) | (1 << (DMFParser.T__80 - 80)) | (1 << (DMFParser.T__81 - 80)) | (1 << (DMFParser.T__82 - 80)) | (1 << (DMFParser.T__83 - 80)) | (1 << (DMFParser.T__84 - 80)) | (1 << (DMFParser.T__85 - 80)) | (1 << (DMFParser.T__86 - 80)) | (1 << (DMFParser.T__89 - 80)) | (1 << (DMFParser.T__95 - 80)) | (1 << (DMFParser.T__101 - 80)) | (1 << (DMFParser.T__108 - 80)) | (1 << (DMFParser.T__109 - 80)) | (1 << (DMFParser.T__112 - 80)) | (1 << (DMFParser.T__115 - 80)) | (1 << (DMFParser.T__119 - 80)) | (1 << (DMFParser.T__126 - 80)) | (1 << (DMFParser.T__131 - 80)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)) | (1 << (DMFParser.T__156 - 154)) | (1 << (DMFParser.T__157 - 154)) | (1 << (DMFParser.T__160 - 154)) | (1 << (DMFParser.T__163 - 154)) | (1 << (DMFParser.T__164 - 154)) | (1 << (DMFParser.T__166 - 154)) | (1 << (DMFParser.T__167 - 154)) | (1 << (DMFParser.T__168 - 154)) | (1 << (DMFParser.T__169 - 154)) | (1 << (DMFParser.T__170 - 154)) | (1 << (DMFParser.T__171 - 154)) | (1 << (DMFParser.T__172 - 154)) | (1 << (DMFParser.T__173 - 154)) | (1 << (DMFParser.T__174 - 154)) | (1 << (DMFParser.T__201 - 154)) | (1 << (DMFParser.T__202 - 154)) | (1 << (DMFParser.T__203 - 154)) | (1 << (DMFParser.T__204 - 154)) | (1 << (DMFParser.T__205 - 154)) | (1 << (DMFParser.T__206 - 154)) | (1 << (DMFParser.T__212 - 154)) | (1 << (DMFParser.T__213 - 154)) | (1 << (DMFParser.T__214 - 154)) | (1 << (DMFParser.T__215 - 154)))) != 0) or _la==DMFParser.OFF or _la==DMFParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(DMFParser.STRING, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = DMFParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(DMFParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.expr_sempred
        self._predicates[17] = self.rc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 53)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 18)
         

    def rc_sempred(self, localctx:RcContext, predIndex:int):
            if predIndex == 27:
                return localctx.n==1
         

            if predIndex == 28:
                return localctx.n==1
         




