# Generated from DMF.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


from mpam.types import Dir, OnOff, Turn, ticks, unknown_reagent, waste_reagent
from langsup.type_supp import Type, Rel, PhysUnit, EnvRelativeUnit, NumberedItem
from quantities import SI


from mpam.types import Dir 


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ff")
        buf.write("\u0522\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\3\2\7\2")
        buf.write("\\\n\2\f\2\16\2_\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\5\3k\n\3\3\3\3\3\3\3\3\3\5\3q\n\3\3\3\3\3\3\3")
        buf.write("\5\3v\n\3\3\4\5\4y\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\5\4\u0084\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00a4\n\4\3\4\3\4\3")
        buf.write("\4\3\4\5\4\u00aa\n\4\3\4\3\4\3\4\5\4\u00af\n\4\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u00bc\n\5\f\5")
        buf.write("\16\5\u00bf\13\5\3\5\3\5\5\5\u00c3\n\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00d0\n\5\3\6\3\6\7\6")
        buf.write("\u00d4\n\6\f\6\16\6\u00d7\13\6\3\6\3\6\3\6\7\6\u00dc\n")
        buf.write("\6\f\6\16\6\u00df\13\6\3\6\5\6\u00e2\n\6\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u00f7\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u0100\n\7\5\7\u0102\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\5\b\u010c\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0113\n\b\3\b")
        buf.write("\5\b\u0116\n\b\3\t\3\t\3\t\3\t\5\t\u011c\n\t\3\t\3\t\3")
        buf.write("\t\3\t\3\n\3\n\5\n\u0124\n\n\3\n\3\n\3\13\3\13\5\13\u012a")
        buf.write("\n\13\3\f\3\f\3\f\3\f\5\f\u0130\n\f\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\5\r\u0144\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u014b\n\r\3\r\3")
        buf.write("\r\5\r\u014f\n\r\3\r\5\r\u0152\n\r\3\r\3\r\5\r\u0156\n")
        buf.write("\r\3\r\3\r\3\r\3\r\5\r\u015c\n\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\5\r\u0165\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u016c\n\r")
        buf.write("\f\r\16\r\u016f\13\r\3\r\5\r\u0172\n\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\7\r\u0179\n\r\f\r\16\r\u017c\13\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0188\n\r\3\r\3\r\3\r\5\r")
        buf.write("\u018d\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u0194\n\r\3\r\3\r\3")
        buf.write("\r\7\r\u0199\n\r\f\r\16\r\u019c\13\r\5\r\u019e\n\r\3\r")
        buf.write("\3\r\3\r\3\r\7\r\u01a4\n\r\f\r\16\r\u01a7\13\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u01af\n\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u01c4\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01da\n\r\3")
        buf.write("\r\5\r\u01dd\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u01fd\n\r\f\r\16\r\u0200")
        buf.write("\13\r\5\r\u0202\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u020f\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u0218\n\r\3\r\3\r\3\r\5\r\u021d\n\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\7\r\u023e\n\r\f\r\16\r\u0241\13\r\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u0255\n\16\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u0260\n\17\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u0266\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\5\21\u0274\n\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\5\22\u027c\n\22\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\5\23\u028c\n\23\3\24\3\24\3\24\3\24\5\24\u0292\n\24\3")
        buf.write("\25\3\25\3\25\5\25\u0297\n\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\7\26\u029e\n\26\f\26\16\26\u02a1\13\26\5\26\u02a3\n\26")
        buf.write("\3\26\3\26\3\26\5\26\u02a8\n\26\3\27\5\27\u02ab\n\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u02c1")
        buf.write("\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u02cb")
        buf.write("\n\30\3\30\3\30\3\30\3\30\5\30\u02d1\n\30\3\30\5\30\u02d4")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\5\30\u02e1\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u02ea\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u02f9\n\31\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u0308\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5")
        buf.write("\33\u0310\n\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0338\n")
        buf.write("\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0340\n\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\5\36\u0348\n\36\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\5\37\u0357\n\37\3 \3 \3 \5 \u035c\n \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \5 \u0365\n \3 \5 \u0368\n \3 \3 \3 \3 \3 \5 \u036f")
        buf.write("\n \3 \3 \3 \3 \3 \5 \u0376\n \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0389\n \3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u039d\n!\3")
        buf.write("\"\3\"\3\"\3\"\3\"\5\"\u03a4\n\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\5\"\u03ae\n\"\3\"\5\"\u03b1\n\"\3\"\5\"\u03b4")
        buf.write("\n\"\3#\3#\3$\3$\3%\3%\5%\u03bc\n%\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\5&\u03d9\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5")
        buf.write("&\u03e6\n&\3&\3&\5&\u03ea\n&\3&\3&\5&\u03ee\n&\3&\5&\u03f1")
        buf.write("\n&\3&\3&\5&\u03f5\n&\3&\3&\3&\3&\3&\3&\5&\u03fd\n&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u041b\n&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0429\n\'\3(\3")
        buf.write("(\3(\3(\5(\u042f\n(\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0439\n")
        buf.write(")\3*\3*\5*\u043d\n*\3*\3*\3*\5*\u0442\n*\3*\3*\3*\3*\5")
        buf.write("*\u0448\n*\3*\3*\3*\3*\3*\3*\3*\5*\u0451\n*\3*\5*\u0454")
        buf.write("\n*\3*\3*\3*\3*\5*\u045a\n*\3*\5*\u045d\n*\3*\3*\3*\3")
        buf.write("*\3*\5*\u0464\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\5*\u0477\n*\3*\3*\5*\u047b\n*\3*\3*\3*\3")
        buf.write("*\3*\3*\5*\u0483\n*\3*\5*\u0486\n*\3*\3*\5*\u048a\n*\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\5+\u04db\n+\3,\3,\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\5-\u0520\n-\3-\2\3\30.\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVX\2*\3\2\u00f4\u00f5\4\2\35\35$$\3\2-.\3\2\63")
        buf.write("\64\3\2 !\4\2\u00e7\u00e7\u00ed\u00ed\4\2\u00e4\u00e4")
        buf.write("\u00f1\u00f1\4\2\31\31\35\35\4\2\20\20??\4\2\17\17@@\3")
        buf.write("\2AB\3\2CD\4\2CCEE\4\2AAFF\3\2JK\3\2LM\3\2hi\4\2^^qr\4")
        buf.write("\2jjxx\3\2\u0083\u0087\3\2\u0088\u008a\3\2\u008b\u0090")
        buf.write("\3\2\u0091\u0096\4\2nn\u0097\u0097\4\2\62\62\u0098\u0098")
        buf.write("\3\2\u0099\u009b\3\2\u009c\u009e\3\2\u009f\u00a0\3\2\u00a1")
        buf.write("\u00a2\3\2\u00a3\u00a4\3\2\u00a6\u00a7\4\2hiuu\4\2))\u00b1")
        buf.write("\u00b1\3\2\u00bb\u00bc\3\2\u00bd\u00be\4\2  \u00c0\u00c1")
        buf.write("\3\2\u00c4\u00c5\3\2\u00cc\u00d1\3\2\u00d2\u00d7\24\2")
        buf.write(" !%%\62\62HHJKQQeehikkopssuvz{}~\u0081\u0082\u00aa\u00aa")
        buf.write("\u00b4\u00b6\u00f9\u00f9\2\u0692\2]\3\2\2\2\4u\3\2\2\2")
        buf.write("\6\u00ae\3\2\2\2\b\u00cf\3\2\2\2\n\u00e1\3\2\2\2\f\u0101")
        buf.write("\3\2\2\2\16\u0115\3\2\2\2\20\u011b\3\2\2\2\22\u0121\3")
        buf.write("\2\2\2\24\u0127\3\2\2\2\26\u012f\3\2\2\2\30\u01c3\3\2")
        buf.write("\2\2\32\u0254\3\2\2\2\34\u025f\3\2\2\2\36\u0265\3\2\2")
        buf.write("\2 \u0273\3\2\2\2\"\u027b\3\2\2\2$\u028b\3\2\2\2&\u0291")
        buf.write("\3\2\2\2(\u0293\3\2\2\2*\u0298\3\2\2\2,\u02c0\3\2\2\2")
        buf.write(".\u02e9\3\2\2\2\60\u02f8\3\2\2\2\62\u0307\3\2\2\2\64\u030f")
        buf.write("\3\2\2\2\66\u0311\3\2\2\28\u0337\3\2\2\2:\u0347\3\2\2")
        buf.write("\2<\u0356\3\2\2\2>\u0388\3\2\2\2@\u039c\3\2\2\2B\u03b3")
        buf.write("\3\2\2\2D\u03b5\3\2\2\2F\u03b7\3\2\2\2H\u03bb\3\2\2\2")
        buf.write("J\u041a\3\2\2\2L\u0428\3\2\2\2N\u042e\3\2\2\2P\u0438\3")
        buf.write("\2\2\2R\u0489\3\2\2\2T\u04da\3\2\2\2V\u04dc\3\2\2\2X\u051f")
        buf.write("\3\2\2\2Z\\\5\b\5\2[Z\3\2\2\2\\_\3\2\2\2][\3\2\2\2]^\3")
        buf.write("\2\2\2^`\3\2\2\2_]\3\2\2\2`a\7\2\2\3a\3\3\2\2\2bc\5\n")
        buf.write("\6\2cd\7\2\2\3dv\3\2\2\2ef\5\20\t\2fg\7\2\2\3gv\3\2\2")
        buf.write("\2hj\5\6\4\2ik\7\u00f2\2\2ji\3\2\2\2jk\3\2\2\2kl\3\2\2")
        buf.write("\2lm\7\2\2\3mv\3\2\2\2np\5\30\r\2oq\7\u00f2\2\2po\3\2")
        buf.write("\2\2pq\3\2\2\2qr\3\2\2\2rs\7\2\2\3sv\3\2\2\2tv\7\2\2\3")
        buf.write("ub\3\2\2\2ue\3\2\2\2uh\3\2\2\2un\3\2\2\2ut\3\2\2\2v\5")
        buf.write("\3\2\2\2wy\7\u00ec\2\2xw\3\2\2\2xy\3\2\2\2yz\3\2\2\2z")
        buf.write("{\7\u00e8\2\2{|\5\62\32\2|}\5P)\2}~\7\u00ea\2\2~\177\5")
        buf.write("\30\r\2\177\u0080\b\4\1\2\u0080\u0081\b\4\1\2\u0081\u00af")
        buf.write("\3\2\2\2\u0082\u0084\7\u00ec\2\2\u0083\u0082\3\2\2\2\u0083")
        buf.write("\u0084\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u0086\7\u00e8")
        buf.write("\2\2\u0086\u0087\5\62\32\2\u0087\u0088\7\u00fa\2\2\u0088")
        buf.write("\u0089\7\u00ea\2\2\u0089\u008a\5\30\r\2\u008a\u008b\b")
        buf.write("\4\1\2\u008b\u008c\b\4\1\2\u008c\u00af\3\2\2\2\u008d\u008e")
        buf.write("\7\u00ec\2\2\u008e\u008f\5P)\2\u008f\u0090\7\u00e5\2\2")
        buf.write("\u0090\u0091\5\30\r\2\u0091\u0092\b\4\1\2\u0092\u0093")
        buf.write("\b\4\1\2\u0093\u00af\3\2\2\2\u0094\u0095\7\u00ec\2\2\u0095")
        buf.write("\u0096\5\60\31\2\u0096\u0097\7\u00fa\2\2\u0097\u0098\7")
        buf.write("\u00e5\2\2\u0098\u0099\5\30\r\2\u0099\u009a\b\4\1\2\u009a")
        buf.write("\u009b\b\4\1\2\u009b\u00af\3\2\2\2\u009c\u009d\7\u00ec")
        buf.write("\2\2\u009d\u009e\5\60\31\2\u009e\u009f\7\u00fa\2\2\u009f")
        buf.write("\u00a0\b\4\1\2\u00a0\u00a1\b\4\1\2\u00a1\u00af\3\2\2\2")
        buf.write("\u00a2\u00a4\7\u00ec\2\2\u00a3\u00a2\3\2\2\2\u00a3\u00a4")
        buf.write("\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a6\5\60\31\2\u00a6")
        buf.write("\u00a9\5P)\2\u00a7\u00a8\7\u00e5\2\2\u00a8\u00aa\5\30")
        buf.write("\r\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ab")
        buf.write("\3\2\2\2\u00ab\u00ac\b\4\1\2\u00ac\u00ad\b\4\1\2\u00ad")
        buf.write("\u00af\3\2\2\2\u00aex\3\2\2\2\u00ae\u0083\3\2\2\2\u00ae")
        buf.write("\u008d\3\2\2\2\u00ae\u0094\3\2\2\2\u00ae\u009c\3\2\2\2")
        buf.write("\u00ae\u00a3\3\2\2\2\u00af\7\3\2\2\2\u00b0\u00b1\5\6\4")
        buf.write("\2\u00b1\u00b2\7\u00f2\2\2\u00b2\u00d0\3\2\2\2\u00b3\u00b4")
        buf.write("\7\3\2\2\u00b4\u00b5\5\30\r\2\u00b5\u00bd\5\n\6\2\u00b6")
        buf.write("\u00b7\7\4\2\2\u00b7\u00b8\7\3\2\2\u00b8\u00b9\5\30\r")
        buf.write("\2\u00b9\u00ba\5\n\6\2\u00ba\u00bc\3\2\2\2\u00bb\u00b6")
        buf.write("\3\2\2\2\u00bc\u00bf\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd")
        buf.write("\u00be\3\2\2\2\u00be\u00c2\3\2\2\2\u00bf\u00bd\3\2\2\2")
        buf.write("\u00c0\u00c1\7\4\2\2\u00c1\u00c3\5\n\6\2\u00c2\u00c0\3")
        buf.write("\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00d0\3\2\2\2\u00c4\u00c5")
        buf.write("\5\30\r\2\u00c5\u00c6\7\u00f2\2\2\u00c6\u00d0\3\2\2\2")
        buf.write("\u00c7\u00d0\5\20\t\2\u00c8\u00c9\5\22\n\2\u00c9\u00ca")
        buf.write("\7\u00f2\2\2\u00ca\u00d0\3\2\2\2\u00cb\u00cc\5\24\13\2")
        buf.write("\u00cc\u00cd\7\u00f2\2\2\u00cd\u00d0\3\2\2\2\u00ce\u00d0")
        buf.write("\5\n\6\2\u00cf\u00b0\3\2\2\2\u00cf\u00b3\3\2\2\2\u00cf")
        buf.write("\u00c4\3\2\2\2\u00cf\u00c7\3\2\2\2\u00cf\u00c8\3\2\2\2")
        buf.write("\u00cf\u00cb\3\2\2\2\u00cf\u00ce\3\2\2\2\u00d0\t\3\2\2")
        buf.write("\2\u00d1\u00d5\7\5\2\2\u00d2\u00d4\5\b\5\2\u00d3\u00d2")
        buf.write("\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00d8\3\2\2\2\u00d7\u00d5\3\2\2\2")
        buf.write("\u00d8\u00e2\7\6\2\2\u00d9\u00dd\7\7\2\2\u00da\u00dc\5")
        buf.write("\b\5\2\u00db\u00da\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db")
        buf.write("\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e0\3\2\2\2\u00df")
        buf.write("\u00dd\3\2\2\2\u00e0\u00e2\7\b\2\2\u00e1\u00d1\3\2\2\2")
        buf.write("\u00e1\u00d9\3\2\2\2\u00e2\13\3\2\2\2\u00e3\u00e4\5\30")
        buf.write("\r\2\u00e4\u00e5\7\t\2\2\u00e5\u0102\3\2\2\2\u00e6\u00e7")
        buf.write("\7\n\2\2\u00e7\u0102\5\30\r\2\u00e8\u00e9\t\2\2\2\u00e9")
        buf.write("\u0102\5\30\r\2\u00ea\u00eb\7\13\2\2\u00eb\u00ec\5P)\2")
        buf.write("\u00ec\u00ed\7\f\2\2\u00ed\u00ee\5\30\r\2\u00ee\u0102")
        buf.write("\3\2\2\2\u00ef\u00f0\7\13\2\2\u00f0\u00f1\5P)\2\u00f1")
        buf.write("\u00f2\5\16\b\2\u00f2\u00f3\7\r\2\2\u00f3\u00f6\5\30\r")
        buf.write("\2\u00f4\u00f5\7\16\2\2\u00f5\u00f7\5\30\r\2\u00f6\u00f4")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u0102\3\2\2\2\u00f8")
        buf.write("\u00f9\7\13\2\2\u00f9\u00fa\5,\27\2\u00fa\u00fb\5\16\b")
        buf.write("\2\u00fb\u00fc\7\r\2\2\u00fc\u00ff\5\30\r\2\u00fd\u00fe")
        buf.write("\7\16\2\2\u00fe\u0100\5\30\r\2\u00ff\u00fd\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100\u0102\3\2\2\2\u0101\u00e3\3\2\2\2")
        buf.write("\u0101\u00e6\3\2\2\2\u0101\u00e8\3\2\2\2\u0101\u00ea\3")
        buf.write("\2\2\2\u0101\u00ef\3\2\2\2\u0101\u00f8\3\2\2\2\u0102\r")
        buf.write("\3\2\2\2\u0103\u0104\7\u00e5\2\2\u0104\u0105\5\30\r\2")
        buf.write("\u0105\u0106\7\17\2\2\u0106\u0107\b\b\1\2\u0107\u0116")
        buf.write("\3\2\2\2\u0108\u0109\7\u00e5\2\2\u0109\u010b\5\30\r\2")
        buf.write("\u010a\u010c\7\20\2\2\u010b\u010a\3\2\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010e\b\b\1\2\u010e")
        buf.write("\u0116\3\2\2\2\u010f\u0110\7\17\2\2\u0110\u0116\b\b\1")
        buf.write("\2\u0111\u0113\7\20\2\2\u0112\u0111\3\2\2\2\u0112\u0113")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116\b\b\1\2\u0115")
        buf.write("\u0103\3\2\2\2\u0115\u0108\3\2\2\2\u0115\u010f\3\2\2\2")
        buf.write("\u0115\u0112\3\2\2\2\u0116\17\3\2\2\2\u0117\u0118\7\21")
        buf.write("\2\2\u0118\u0119\5P)\2\u0119\u011a\7\u00f6\2\2\u011a\u011c")
        buf.write("\3\2\2\2\u011b\u0117\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u011d\3\2\2\2\u011d\u011e\7\22\2\2\u011e\u011f\5\f\7")
        buf.write("\2\u011f\u0120\5\n\6\2\u0120\21\3\2\2\2\u0121\u0123\7")
        buf.write("\23\2\2\u0122\u0124\5P)\2\u0123\u0122\3\2\2\2\u0123\u0124")
        buf.write("\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0126\7\24\2\2\u0126")
        buf.write("\23\3\2\2\2\u0127\u0129\7\25\2\2\u0128\u012a\5\30\r\2")
        buf.write("\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2\u012a\25\3\2")
        buf.write("\2\2\u012b\u012c\7\u00f6\2\2\u012c\u0130\b\f\1\2\u012d")
        buf.write("\u012e\7\u00f7\2\2\u012e\u0130\b\f\1\2\u012f\u012b\3\2")
        buf.write("\2\2\u012f\u012d\3\2\2\2\u0130\27\3\2\2\2\u0131\u0132")
        buf.write("\b\r\1\2\u0132\u0133\7\26\2\2\u0133\u0134\5\30\r\2\u0134")
        buf.write("\u0135\7\u00f7\2\2\u0135\u01c4\3\2\2\2\u0136\u0137\7\26")
        buf.write("\2\2\u0137\u0138\5\30\r\2\u0138\u0139\7\27\2\2\u0139\u013a")
        buf.write("\5\30\r\2\u013a\u013b\7\u00f7\2\2\u013b\u01c4\3\2\2\2")
        buf.write("\u013c\u013d\7\u00f1\2\2\u013d\u01c4\5\30\r9\u013e\u013f")
        buf.write("\5B\"\2\u013f\u0140\7\30\2\2\u0140\u0141\5\30\r\67\u0141")
        buf.write("\u01c4\3\2\2\2\u0142\u0144\7\31\2\2\u0143\u0142\3\2\2")
        buf.write("\2\u0143\u0144\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146")
        buf.write("\7\32\2\2\u0146\u01c4\5\66\34\2\u0147\u0148\7\u00fa\2")
        buf.write("\2\u0148\u01c4\5$\23\2\u0149\u014b\7$\2\2\u014a\u0149")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write("\u014e\5\36\20\2\u014d\u014f\7%\2\2\u014e\u014d\3\2\2")
        buf.write("\2\u014e\u014f\3\2\2\2\u014f\u01c4\3\2\2\2\u0150\u0152")
        buf.write("\t\3\2\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("\u0153\3\2\2\2\u0153\u0155\7%\2\2\u0154\u0156\7&\2\2\u0155")
        buf.write("\u0154\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0157\u01c4\5\30\r\'\u0158\u0159\7\u00ee\2\2\u0159\u01c4")
        buf.write("\5\30\r \u015a\u015c\7\35\2\2\u015b\u015a\3\2\2\2\u015b")
        buf.write("\u015c\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015e\7)\2\2")
        buf.write("\u015e\u015f\7*\2\2\u015f\u0160\5\30\r\2\u0160\u0161\7")
        buf.write("+\2\2\u0161\u0162\5\30\r\37\u0162\u01c4\3\2\2\2\u0163")
        buf.write("\u0165\7\35\2\2\u0164\u0163\3\2\2\2\u0164\u0165\3\2\2")
        buf.write("\2\u0165\u0166\3\2\2\2\u0166\u0167\7)\2\2\u0167\u0168")
        buf.write("\7*\2\2\u0168\u016d\5\30\r\2\u0169\u016a\7\27\2\2\u016a")
        buf.write("\u016c\5\30\r\2\u016b\u0169\3\2\2\2\u016c\u016f\3\2\2")
        buf.write("\2\u016d\u016b\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u01c4")
        buf.write("\3\2\2\2\u016f\u016d\3\2\2\2\u0170\u0172\7\35\2\2\u0171")
        buf.write("\u0170\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0173\3\2\2\2")
        buf.write("\u0173\u0174\7)\2\2\u0174\u0175\7*\2\2\u0175\u017a\5\30")
        buf.write("\r\2\u0176\u0177\7\27\2\2\u0177\u0179\5\30\r\2\u0178\u0176")
        buf.write("\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2\u017a")
        buf.write("\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u017a\3\2\2\2")
        buf.write("\u017d\u017e\7\27\2\2\u017e\u017f\7+\2\2\u017f\u0180\5")
        buf.write("\30\r\35\u0180\u01c4\3\2\2\2\u0181\u0182\5 \21\2\u0182")
        buf.write("\u0183\5\30\r\32\u0183\u01c4\3\2\2\2\u0184\u01c4\5 \21")
        buf.write("\2\u0185\u0187\7\r\2\2\u0186\u0188\5&\24\2\u0187\u0186")
        buf.write("\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u01c4\5\30\r\30\u018a\u018c\t\4\2\2\u018b\u018d\7\n\2")
        buf.write("\2\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u01c4\5\30\r\27\u018f\u0190\t\4\2\2\u0190")
        buf.write("\u0191\7\n\2\2\u0191\u0194\7/\2\2\u0192\u0194\7\60\2\2")
        buf.write("\u0193\u018f\3\2\2\2\u0193\u0192\3\2\2\2\u0194\u019d\3")
        buf.write("\2\2\2\u0195\u019a\5\30\r\2\u0196\u0197\7\27\2\2\u0197")
        buf.write("\u0199\5\30\r\2\u0198\u0196\3\2\2\2\u0199\u019c\3\2\2")
        buf.write("\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019e")
        buf.write("\3\2\2\2\u019c\u019a\3\2\2\2\u019d\u0195\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e\u01c4\3\2\2\2\u019f\u01a0\7\61\2")
        buf.write("\2\u01a0\u01a5\5\30\r\2\u01a1\u01a2\7\27\2\2\u01a2\u01a4")
        buf.write("\5\30\r\2\u01a3\u01a1\3\2\2\2\u01a4\u01a7\3\2\2\2\u01a5")
        buf.write("\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01c4\3\2\2\2")
        buf.write("\u01a7\u01a5\3\2\2\2\u01a8\u01a9\7\62\2\2\u01a9\u01aa")
        buf.write("\t\5\2\2\u01aa\u01c4\5\30\r\23\u01ab\u01c4\5(\25\2\u01ac")
        buf.write("\u01c4\5.\30\2\u01ad\u01af\7$\2\2\u01ae\u01ad\3\2\2\2")
        buf.write("\u01ae\u01af\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01c4\5")
        buf.write("\60\31\2\u01b1\u01b2\5\60\31\2\u01b2\u01b3\7\u00fa\2\2")
        buf.write("\u01b3\u01c4\3\2\2\2\u01b4\u01c4\5N(\2\u01b5\u01c4\5P")
        buf.write(")\2\u01b6\u01c4\5R*\2\u01b7\u01b8\5P)\2\u01b8\u01b9\7")
        buf.write("\u00e5\2\2\u01b9\u01ba\5\30\r\b\u01ba\u01c4\3\2\2\2\u01bb")
        buf.write("\u01bc\5\60\31\2\u01bc\u01bd\7\u00fa\2\2\u01bd\u01be\7")
        buf.write("\u00e5\2\2\u01be\u01bf\5\30\r\6\u01bf\u01c4\3\2\2\2\u01c0")
        buf.write("\u01c4\5V,\2\u01c1\u01c4\7\u00fa\2\2\u01c2\u01c4\7\u00fb")
        buf.write("\2\2\u01c3\u0131\3\2\2\2\u01c3\u0136\3\2\2\2\u01c3\u013c")
        buf.write("\3\2\2\2\u01c3\u013e\3\2\2\2\u01c3\u0143\3\2\2\2\u01c3")
        buf.write("\u0147\3\2\2\2\u01c3\u014a\3\2\2\2\u01c3\u0151\3\2\2\2")
        buf.write("\u01c3\u0158\3\2\2\2\u01c3\u015b\3\2\2\2\u01c3\u0164\3")
        buf.write("\2\2\2\u01c3\u0171\3\2\2\2\u01c3\u0181\3\2\2\2\u01c3\u0184")
        buf.write("\3\2\2\2\u01c3\u0185\3\2\2\2\u01c3\u018a\3\2\2\2\u01c3")
        buf.write("\u0193\3\2\2\2\u01c3\u019f\3\2\2\2\u01c3\u01a8\3\2\2\2")
        buf.write("\u01c3\u01ab\3\2\2\2\u01c3\u01ac\3\2\2\2\u01c3\u01ae\3")
        buf.write("\2\2\2\u01c3\u01b1\3\2\2\2\u01c3\u01b4\3\2\2\2\u01c3\u01b5")
        buf.write("\3\2\2\2\u01c3\u01b6\3\2\2\2\u01c3\u01b7\3\2\2\2\u01c3")
        buf.write("\u01bb\3\2\2\2\u01c3\u01c0\3\2\2\2\u01c3\u01c1\3\2\2\2")
        buf.write("\u01c3\u01c2\3\2\2\2\u01c4\u023f\3\2\2\2\u01c5\u01c6\f")
        buf.write(".\2\2\u01c6\u01c7\7\f\2\2\u01c7\u01c8\t\6\2\2\u01c8\u023e")
        buf.write("\5\30\r/\u01c9\u01ca\f&\2\2\u01ca\u01cb\7\'\2\2\u01cb")
        buf.write("\u023e\5\30\r\'\u01cc\u01cd\f%\2\2\u01cd\u01ce\t\7\2\2")
        buf.write("\u01ce\u023e\5\30\r&\u01cf\u01d0\f$\2\2\u01d0\u01d1\t")
        buf.write("\b\2\2\u01d1\u023e\5\30\r%\u01d2\u01d3\f#\2\2\u01d3\u01d4")
        buf.write("\5L\'\2\u01d4\u01d5\5\30\r$\u01d5\u023e\3\2\2\2\u01d6")
        buf.write("\u01dc\f!\2\2\u01d7\u01d9\7(\2\2\u01d8\u01da\7\u00ee\2")
        buf.write("\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dd")
        buf.write("\3\2\2\2\u01db\u01dd\7\u00eb\2\2\u01dc\u01d7\3\2\2\2\u01dc")
        buf.write("\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u023e\5\30\r")
        buf.write("\"\u01df\u01e0\f\34\2\2\u01e0\u01e1\7+\2\2\u01e1\u023e")
        buf.write("\5\30\r\35\u01e2\u01e3\f\33\2\2\u01e3\u01e4\7,\2\2\u01e4")
        buf.write("\u023e\5\30\r\34\u01e5\u01e6\f\22\2\2\u01e6\u01e7\t\5")
        buf.write("\2\2\u01e7\u023e\5\30\r\23\u01e8\u01e9\f\21\2\2\u01e9")
        buf.write("\u01ea\7\u00ea\2\2\u01ea\u023e\5\30\r\22\u01eb\u01ec\f")
        buf.write("\20\2\2\u01ec\u01ed\7\3\2\2\u01ed\u01ee\5\30\r\2\u01ee")
        buf.write("\u01ef\7\4\2\2\u01ef\u01f0\5\30\r\21\u01f0\u023e\3\2\2")
        buf.write("\2\u01f1\u01f2\f\7\2\2\u01f2\u01f3\7\u00e6\2\2\u01f3\u01f4")
        buf.write("\5J&\2\u01f4\u01f5\7\u00e5\2\2\u01f5\u01f6\5\30\r\b\u01f6")
        buf.write("\u023e\3\2\2\2\u01f7\u01f8\f;\2\2\u01f8\u0201\7\26\2\2")
        buf.write("\u01f9\u01fe\5\30\r\2\u01fa\u01fb\7\27\2\2\u01fb\u01fd")
        buf.write("\5\30\r\2\u01fc\u01fa\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe")
        buf.write("\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0202\3\2\2\2")
        buf.write("\u0200\u01fe\3\2\2\2\u0201\u01f9\3\2\2\2\u0201\u0202\3")
        buf.write("\2\2\2\u0202\u0203\3\2\2\2\u0203\u023e\7\u00f7\2\2\u0204")
        buf.write("\u0205\f8\2\2\u0205\u023e\5 \21\2\u0206\u0207\f\65\2\2")
        buf.write("\u0207\u0208\7\u00e6\2\2\u0208\u0209\7\33\2\2\u0209\u020a")
        buf.write("\7\f\2\2\u020a\u023e\5@!\2\u020b\u020c\f\64\2\2\u020c")
        buf.write("\u020e\7\34\2\2\u020d\u020f\7\35\2\2\u020e\u020d\3\2\2")
        buf.write("\2\u020e\u020f\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211")
        buf.write("\7\36\2\2\u0211\u0212\7\f\2\2\u0212\u023e\5@!\2\u0213")
        buf.write("\u0214\f\63\2\2\u0214\u0215\7\u00e6\2\2\u0215\u0217\5")
        buf.write("J&\2\u0216\u0218\5\32\16\2\u0217\u0216\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u023e\3\2\2\2\u0219\u021a\f\62\2\2\u021a")
        buf.write("\u021c\7\u00e6\2\2\u021b\u021d\7\u00f8\2\2\u021c\u021b")
        buf.write("\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e")
        buf.write("\u023e\5J&\2\u021f\u0220\f\61\2\2\u0220\u0221\7\u00e6")
        buf.write("\2\2\u0221\u0222\7\26\2\2\u0222\u0223\7\u00f8\2\2\u0223")
        buf.write("\u0224\7\u00f7\2\2\u0224\u023e\5J&\2\u0225\u0226\f\60")
        buf.write("\2\2\u0226\u023e\5\32\16\2\u0227\u0228\f/\2\2\u0228\u0229")
        buf.write("\7\37\2\2\u0229\u023e\5\"\22\2\u022a\u022b\f,\2\2\u022b")
        buf.write("\u023e\5$\23\2\u022c\u022d\f+\2\2\u022d\u023e\5@!\2\u022e")
        buf.write("\u022f\f*\2\2\u022f\u0230\7\"\2\2\u0230\u023e\5@!\2\u0231")
        buf.write("\u0232\f)\2\2\u0232\u023e\7#\2\2\u0233\u0234\f\"\2\2\u0234")
        buf.write("\u0235\5\34\17\2\u0235\u0236\t\t\2\2\u0236\u0237\5J&\2")
        buf.write("\u0237\u023e\3\2\2\2\u0238\u0239\f\24\2\2\u0239\u023a")
        buf.write("\7\21\2\2\u023a\u023b\5\30\r\2\u023b\u023c\7\u00f6\2\2")
        buf.write("\u023c\u023e\3\2\2\2\u023d\u01c5\3\2\2\2\u023d\u01c9\3")
        buf.write("\2\2\2\u023d\u01cc\3\2\2\2\u023d\u01cf\3\2\2\2\u023d\u01d2")
        buf.write("\3\2\2\2\u023d\u01d6\3\2\2\2\u023d\u01df\3\2\2\2\u023d")
        buf.write("\u01e2\3\2\2\2\u023d\u01e5\3\2\2\2\u023d\u01e8\3\2\2\2")
        buf.write("\u023d\u01eb\3\2\2\2\u023d\u01f1\3\2\2\2\u023d\u01f7\3")
        buf.write("\2\2\2\u023d\u0204\3\2\2\2\u023d\u0206\3\2\2\2\u023d\u020b")
        buf.write("\3\2\2\2\u023d\u0213\3\2\2\2\u023d\u0219\3\2\2\2\u023d")
        buf.write("\u021f\3\2\2\2\u023d\u0225\3\2\2\2\u023d\u0227\3\2\2\2")
        buf.write("\u023d\u022a\3\2\2\2\u023d\u022c\3\2\2\2\u023d\u022e\3")
        buf.write("\2\2\2\u023d\u0231\3\2\2\2\u023d\u0233\3\2\2\2\u023d\u0238")
        buf.write("\3\2\2\2\u023e\u0241\3\2\2\2\u023f\u023d\3\2\2\2\u023f")
        buf.write("\u0240\3\2\2\2\u0240\31\3\2\2\2\u0241\u023f\3\2\2\2\u0242")
        buf.write("\u0243\7\65\2\2\u0243\u0255\b\16\1\2\u0244\u0245\7\66")
        buf.write("\2\2\u0245\u0246\7\u00ee\2\2\u0246\u0247\7\67\2\2\u0247")
        buf.write("\u0255\b\16\1\2\u0248\u0249\78\2\2\u0249\u024a\7\67\2")
        buf.write("\2\u024a\u0255\b\16\1\2\u024b\u024c\79\2\2\u024c\u0255")
        buf.write("\b\16\1\2\u024d\u024e\7(\2\2\u024e\u024f\7\u00ee\2\2\u024f")
        buf.write("\u0250\7:\2\2\u0250\u0255\b\16\1\2\u0251\u0252\7\u00eb")
        buf.write("\2\2\u0252\u0253\7:\2\2\u0253\u0255\b\16\1\2\u0254\u0242")
        buf.write("\3\2\2\2\u0254\u0244\3\2\2\2\u0254\u0248\3\2\2\2\u0254")
        buf.write("\u024b\3\2\2\2\u0254\u024d\3\2\2\2\u0254\u0251\3\2\2\2")
        buf.write("\u0255\33\3\2\2\2\u0256\u0257\7;\2\2\u0257\u0260\b\17")
        buf.write("\1\2\u0258\u0259\7\66\2\2\u0259\u025a\7\u00ee\2\2\u025a")
        buf.write("\u025b\7<\2\2\u025b\u0260\b\17\1\2\u025c\u025d\78\2\2")
        buf.write("\u025d\u025e\7<\2\2\u025e\u0260\b\17\1\2\u025f\u0256\3")
        buf.write("\2\2\2\u025f\u0258\3\2\2\2\u025f\u025c\3\2\2\2\u0260\35")
        buf.write("\3\2\2\2\u0261\u0262\7=\2\2\u0262\u0266\b\20\1\2\u0263")
        buf.write("\u0264\7>\2\2\u0264\u0266\b\20\1\2\u0265\u0261\3\2\2\2")
        buf.write("\u0265\u0263\3\2\2\2\u0266\37\3\2\2\2\u0267\u0268\t\n")
        buf.write("\2\2\u0268\u0269\b\21\1\2\u0269\u0274\b\21\1\2\u026a\u026b")
        buf.write("\t\13\2\2\u026b\u026c\b\21\1\2\u026c\u0274\b\21\1\2\u026d")
        buf.write("\u026e\t\f\2\2\u026e\u026f\b\21\1\2\u026f\u0274\b\21\1")
        buf.write("\2\u0270\u0271\t\r\2\2\u0271\u0272\b\21\1\2\u0272\u0274")
        buf.write("\b\21\1\2\u0273\u0267\3\2\2\2\u0273\u026a\3\2\2\2\u0273")
        buf.write("\u026d\3\2\2\2\u0273\u0270\3\2\2\2\u0274!\3\2\2\2\u0275")
        buf.write("\u0276\t\16\2\2\u0276\u027c\b\22\1\2\u0277\u0278\t\17")
        buf.write("\2\2\u0278\u027c\b\22\1\2\u0279\u027a\7G\2\2\u027a\u027c")
        buf.write("\b\22\1\2\u027b\u0275\3\2\2\2\u027b\u0277\3\2\2\2\u027b")
        buf.write("\u0279\3\2\2\2\u027c#\3\2\2\2\u027d\u027e\6\23\35\3\u027e")
        buf.write("\u027f\7H\2\2\u027f\u0280\b\23\1\2\u0280\u028c\b\23\1")
        buf.write("\2\u0281\u0282\7I\2\2\u0282\u0283\b\23\1\2\u0283\u028c")
        buf.write("\b\23\1\2\u0284\u0285\6\23\36\3\u0285\u0286\t\20\2\2\u0286")
        buf.write("\u0287\b\23\1\2\u0287\u028c\b\23\1\2\u0288\u0289\t\21")
        buf.write("\2\2\u0289\u028a\b\23\1\2\u028a\u028c\b\23\1\2\u028b\u027d")
        buf.write("\3\2\2\2\u028b\u0281\3\2\2\2\u028b\u0284\3\2\2\2\u028b")
        buf.write("\u0288\3\2\2\2\u028c%\3\2\2\2\u028d\u028e\7H\2\2\u028e")
        buf.write("\u0292\b\24\1\2\u028f\u0290\t\20\2\2\u0290\u0292\b\24")
        buf.write("\1\2\u0291\u028d\3\2\2\2\u0291\u028f\3\2\2\2\u0292\'\3")
        buf.write("\2\2\2\u0293\u0296\5*\26\2\u0294\u0297\5\n\6\2\u0295\u0297")
        buf.write("\5\30\r\2\u0296\u0294\3\2\2\2\u0296\u0295\3\2\2\2\u0297")
        buf.write(")\3\2\2\2\u0298\u0299\7N\2\2\u0299\u02a2\7\26\2\2\u029a")
        buf.write("\u029f\5,\27\2\u029b\u029c\7\27\2\2\u029c\u029e\5,\27")
        buf.write("\2\u029d\u029b\3\2\2\2\u029e\u02a1\3\2\2\2\u029f\u029d")
        buf.write("\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a3\3\2\2\2\u02a1")
        buf.write("\u029f\3\2\2\2\u02a2\u029a\3\2\2\2\u02a2\u02a3\3\2\2\2")
        buf.write("\u02a3\u02a4\3\2\2\2\u02a4\u02a7\7\u00f7\2\2\u02a5\u02a6")
        buf.write("\7O\2\2\u02a6\u02a8\5\60\31\2\u02a7\u02a5\3\2\2\2\u02a7")
        buf.write("\u02a8\3\2\2\2\u02a8+\3\2\2\2\u02a9\u02ab\t\t\2\2\u02aa")
        buf.write("\u02a9\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2")
        buf.write("\u02ac\u02ad\5\60\31\2\u02ad\u02ae\b\27\1\2\u02ae\u02c1")
        buf.write("\3\2\2\2\u02af\u02b0\5\60\31\2\u02b0\u02b1\b\27\1\2\u02b1")
        buf.write("\u02b2\7\u00fa\2\2\u02b2\u02b3\b\27\1\2\u02b3\u02c1\3")
        buf.write("\2\2\2\u02b4\u02b5\5\60\31\2\u02b5\u02b6\5P)\2\u02b6\u02b7")
        buf.write("\b\27\1\2\u02b7\u02b8\b\27\1\2\u02b8\u02c1\3\2\2\2\u02b9")
        buf.write("\u02ba\5P)\2\u02ba\u02bb\7\u00ea\2\2\u02bb\u02bc\5\60")
        buf.write("\31\2\u02bc\u02bd\b\27\1\2\u02bd\u02be\b\27\1\2\u02be")
        buf.write("\u02bf\b\27\1\2\u02bf\u02c1\3\2\2\2\u02c0\u02aa\3\2\2")
        buf.write("\2\u02c0\u02af\3\2\2\2\u02c0\u02b4\3\2\2\2\u02c0\u02b9")
        buf.write("\3\2\2\2\u02c1-\3\2\2\2\u02c2\u02c3\7P\2\2\u02c3\u02c4")
        buf.write("\7\u00f0\2\2\u02c4\u02ea\b\30\1\2\u02c5\u02c6\7P\2\2\u02c6")
        buf.write("\u02c7\7\u00ef\2\2\u02c7\u02ea\b\30\1\2\u02c8\u02ca\7")
        buf.write("\u00f3\2\2\u02c9\u02cb\7Q\2\2\u02ca\u02c9\3\2\2\2\u02ca")
        buf.write("\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ea\b\30\1")
        buf.write("\2\u02cd\u02d3\7R\2\2\u02ce\u02d0\7S\2\2\u02cf\u02d1\7")
        buf.write("$\2\2\u02d0\u02cf\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2")
        buf.write("\3\2\2\2\u02d2\u02d4\7T\2\2\u02d3\u02ce\3\2\2\2\u02d3")
        buf.write("\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02ea\b\30\1")
        buf.write("\2\u02d6\u02d7\7U\2\2\u02d7\u02d8\7V\2\2\u02d8\u02ea\b")
        buf.write("\30\1\2\u02d9\u02da\7U\2\2\u02da\u02db\7W\2\2\u02db\u02ea")
        buf.write("\b\30\1\2\u02dc\u02e0\7U\2\2\u02dd\u02e1\7X\2\2\u02de")
        buf.write("\u02df\7Y\2\2\u02df\u02e1\7Z\2\2\u02e0\u02dd\3\2\2\2\u02e0")
        buf.write("\u02de\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02ea\b\30\1")
        buf.write("\2\u02e3\u02e4\7U\2\2\u02e4\u02e5\7[\2\2\u02e5\u02ea\b")
        buf.write("\30\1\2\u02e6\u02e7\7U\2\2\u02e7\u02e8\7\\\2\2\u02e8\u02ea")
        buf.write("\b\30\1\2\u02e9\u02c2\3\2\2\2\u02e9\u02c5\3\2\2\2\u02e9")
        buf.write("\u02c8\3\2\2\2\u02e9\u02cd\3\2\2\2\u02e9\u02d6\3\2\2\2")
        buf.write("\u02e9\u02d9\3\2\2\2\u02e9\u02dc\3\2\2\2\u02e9\u02e3\3")
        buf.write("\2\2\2\u02e9\u02e6\3\2\2\2\u02ea/\3\2\2\2\u02eb\u02ec")
        buf.write("\7\u00e8\2\2\u02ec\u02ed\5\62\32\2\u02ed\u02ee\b\31\1")
        buf.write("\2\u02ee\u02f9\3\2\2\2\u02ef\u02f0\7\26\2\2\u02f0\u02f1")
        buf.write("\7\u00e8\2\2\u02f1\u02f2\7\u00f7\2\2\u02f2\u02f3\5\62")
        buf.write("\32\2\u02f3\u02f4\b\31\1\2\u02f4\u02f9\3\2\2\2\u02f5\u02f6")
        buf.write("\5\62\32\2\u02f6\u02f7\b\31\1\2\u02f7\u02f9\3\2\2\2\u02f8")
        buf.write("\u02eb\3\2\2\2\u02f8\u02ef\3\2\2\2\u02f8\u02f5\3\2\2\2")
        buf.write("\u02f9\61\3\2\2\2\u02fa\u02fb\7\u00f8\2\2\u02fb\u02fc")
        buf.write("\5\64\33\2\u02fc\u02fd\b\32\1\2\u02fd\u0308\3\2\2\2\u02fe")
        buf.write("\u02ff\7\26\2\2\u02ff\u0300\7\u00f8\2\2\u0300\u0301\7")
        buf.write("\u00f7\2\2\u0301\u0302\5\64\33\2\u0302\u0303\b\32\1\2")
        buf.write("\u0303\u0308\3\2\2\2\u0304\u0305\5\64\33\2\u0305\u0306")
        buf.write("\b\32\1\2\u0306\u0308\3\2\2\2\u0307\u02fa\3\2\2\2\u0307")
        buf.write("\u02fe\3\2\2\2\u0307\u0304\3\2\2\2\u0308\63\3\2\2\2\u0309")
        buf.write("\u030a\5\66\34\2\u030a\u030b\b\33\1\2\u030b\u0310\3\2")
        buf.write("\2\2\u030c\u030d\58\35\2\u030d\u030e\b\33\1\2\u030e\u0310")
        buf.write("\3\2\2\2\u030f\u0309\3\2\2\2\u030f\u030c\3\2\2\2\u0310")
        buf.write("\65\3\2\2\2\u0311\u0312\5:\36\2\u0312\u0313\7)\2\2\u0313")
        buf.write("\u0314\b\34\1\2\u0314\67\3\2\2\2\u0315\u0316\7\62\2\2")
        buf.write("\u0316\u0338\b\35\1\2\u0317\u0318\7\36\2\2\u0318\u0338")
        buf.write("\b\35\1\2\u0319\u031a\7Q\2\2\u031a\u0338\b\35\1\2\u031b")
        buf.write("\u031c\7]\2\2\u031c\u0338\b\35\1\2\u031d\u031e\7^\2\2")
        buf.write("\u031e\u0338\b\35\1\2\u031f\u0320\7_\2\2\u0320\u0338\b")
        buf.write("\35\1\2\u0321\u0322\7`\2\2\u0322\u0338\b\35\1\2\u0323")
        buf.write("\u0324\7a\2\2\u0324\u0338\b\35\1\2\u0325\u0326\t\6\2\2")
        buf.write("\u0326\u0338\b\35\1\2\u0327\u0328\7%\2\2\u0328\u0338\b")
        buf.write("\35\1\2\u0329\u032a\7b\2\2\u032a\u0338\b\35\1\2\u032b")
        buf.write("\u032c\7c\2\2\u032c\u032d\7d\2\2\u032d\u0338\b\35\1\2")
        buf.write("\u032e\u032f\7e\2\2\u032f\u0330\7d\2\2\u0330\u0338\b\35")
        buf.write("\1\2\u0331\u0332\5> \2\u0332\u0333\b\35\1\2\u0333\u0338")
        buf.write("\3\2\2\2\u0334\u0335\5:\36\2\u0335\u0336\b\35\1\2\u0336")
        buf.write("\u0338\3\2\2\2\u0337\u0315\3\2\2\2\u0337\u0317\3\2\2\2")
        buf.write("\u0337\u0319\3\2\2\2\u0337\u031b\3\2\2\2\u0337\u031d\3")
        buf.write("\2\2\2\u0337\u031f\3\2\2\2\u0337\u0321\3\2\2\2\u0337\u0323")
        buf.write("\3\2\2\2\u0337\u0325\3\2\2\2\u0337\u0327\3\2\2\2\u0337")
        buf.write("\u0329\3\2\2\2\u0337\u032b\3\2\2\2\u0337\u032e\3\2\2\2")
        buf.write("\u0337\u0331\3\2\2\2\u0337\u0334\3\2\2\2\u03389\3\2\2")
        buf.write("\2\u0339\u033a\7f\2\2\u033a\u0348\b\36\1\2\u033b\u033c")
        buf.write("\7g\2\2\u033c\u0348\b\36\1\2\u033d\u033f\t\22\2\2\u033e")
        buf.write("\u0340\7j\2\2\u033f\u033e\3\2\2\2\u033f\u0340\3\2\2\2")
        buf.write("\u0340\u0341\3\2\2\2\u0341\u0348\b\36\1\2\u0342\u0343")
        buf.write("\7k\2\2\u0343\u0348\b\36\1\2\u0344\u0345\5<\37\2\u0345")
        buf.write("\u0346\b\36\1\2\u0346\u0348\3\2\2\2\u0347\u0339\3\2\2")
        buf.write("\2\u0347\u033b\3\2\2\2\u0347\u033d\3\2\2\2\u0347\u0342")
        buf.write("\3\2\2\2\u0347\u0344\3\2\2\2\u0348;\3\2\2\2\u0349\u034a")
        buf.write("\7l\2\2\u034a\u0357\b\37\1\2\u034b\u034c\7m\2\2\u034c")
        buf.write("\u0357\b\37\1\2\u034d\u034e\7n\2\2\u034e\u0357\b\37\1")
        buf.write("\2\u034f\u0350\7o\2\2\u0350\u0357\b\37\1\2\u0351\u0352")
        buf.write("\7p\2\2\u0352\u0357\b\37\1\2\u0353\u0354\t\22\2\2\u0354")
        buf.write("\u0355\t\23\2\2\u0355\u0357\b\37\1\2\u0356\u0349\3\2\2")
        buf.write("\2\u0356\u034b\3\2\2\2\u0356\u034d\3\2\2\2\u0356\u034f")
        buf.write("\3\2\2\2\u0356\u0351\3\2\2\2\u0356\u0353\3\2\2\2\u0357")
        buf.write("=\3\2\2\2\u0358\u0359\7s\2\2\u0359\u0389\b \1\2\u035a")
        buf.write("\u035c\7t\2\2\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\u035d\3\2\2\2\u035d\u035e\7u\2\2\u035e\u0389\b")
        buf.write(" \1\2\u035f\u0360\7v\2\2\u0360\u0389\b \1\2\u0361\u0362")
        buf.write("\7w\2\2\u0362\u0368\t\24\2\2\u0363\u0365\7w\2\2\u0364")
        buf.write("\u0363\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0366\3\2\2\2")
        buf.write("\u0366\u0368\7y\2\2\u0367\u0361\3\2\2\2\u0367\u0364\3")
        buf.write("\2\2\2\u0368\u0369\3\2\2\2\u0369\u0389\b \1\2\u036a\u036b")
        buf.write("\7v\2\2\u036b\u036c\7s\2\2\u036c\u0389\b \1\2\u036d\u036f")
        buf.write("\7v\2\2\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0370\3\2\2\2\u0370\u0371\7z\2\2\u0371\u0389\b \1\2\u0372")
        buf.write("\u0376\7{\2\2\u0373\u0374\7Y\2\2\u0374\u0376\7|\2\2\u0375")
        buf.write("\u0372\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0377\3\2\2\2")
        buf.write("\u0377\u0389\b \1\2\u0378\u0379\7}\2\2\u0379\u0389\b ")
        buf.write("\1\2\u037a\u037b\7~\2\2\u037b\u0389\b \1\2\u037c\u037d")
        buf.write("\7\177\2\2\u037d\u037e\7\u0080\2\2\u037e\u0389\b \1\2")
        buf.write("\u037f\u0380\7\177\2\2\u0380\u0381\7\u0081\2\2\u0381\u0389")
        buf.write("\b \1\2\u0382\u0383\7\u0082\2\2\u0383\u0389\b \1\2\u0384")
        buf.write("\u0385\7c\2\2\u0385\u0389\b \1\2\u0386\u0387\7e\2\2\u0387")
        buf.write("\u0389\b \1\2\u0388\u0358\3\2\2\2\u0388\u035b\3\2\2\2")
        buf.write("\u0388\u035f\3\2\2\2\u0388\u0367\3\2\2\2\u0388\u036a\3")
        buf.write("\2\2\2\u0388\u036e\3\2\2\2\u0388\u0375\3\2\2\2\u0388\u0378")
        buf.write("\3\2\2\2\u0388\u037a\3\2\2\2\u0388\u037c\3\2\2\2\u0388")
        buf.write("\u037f\3\2\2\2\u0388\u0382\3\2\2\2\u0388\u0384\3\2\2\2")
        buf.write("\u0388\u0386\3\2\2\2\u0389?\3\2\2\2\u038a\u038b\t\25\2")
        buf.write("\2\u038b\u039d\b!\1\2\u038c\u038d\t\26\2\2\u038d\u039d")
        buf.write("\b!\1\2\u038e\u038f\t\27\2\2\u038f\u039d\b!\1\2\u0390")
        buf.write("\u0391\t\30\2\2\u0391\u039d\b!\1\2\u0392\u0393\t\31\2")
        buf.write("\2\u0393\u039d\b!\1\2\u0394\u0395\t\32\2\2\u0395\u039d")
        buf.write("\b!\1\2\u0396\u0397\t\33\2\2\u0397\u039d\b!\1\2\u0398")
        buf.write("\u0399\t\34\2\2\u0399\u039d\b!\1\2\u039a\u039b\t\35\2")
        buf.write("\2\u039b\u039d\b!\1\2\u039c\u038a\3\2\2\2\u039c\u038c")
        buf.write("\3\2\2\2\u039c\u038e\3\2\2\2\u039c\u0390\3\2\2\2\u039c")
        buf.write("\u0392\3\2\2\2\u039c\u0394\3\2\2\2\u039c\u0396\3\2\2\2")
        buf.write("\u039c\u0398\3\2\2\2\u039c\u039a\3\2\2\2\u039dA\3\2\2")
        buf.write("\2\u039e\u039f\7v\2\2\u039f\u03b4\b\"\1\2\u03a0\u03a4")
        buf.write("\7{\2\2\u03a1\u03a2\7Y\2\2\u03a2\u03a4\7|\2\2\u03a3\u03a0")
        buf.write("\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03b4\b\"\1\2\u03a6\u03a7\7}\2\2\u03a7\u03b4\b\"\1\2")
        buf.write("\u03a8\u03a9\7~\2\2\u03a9\u03b4\b\"\1\2\u03aa\u03ab\7")
        buf.write("w\2\2\u03ab\u03b1\t\24\2\2\u03ac\u03ae\7w\2\2\u03ad\u03ac")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2\u03af")
        buf.write("\u03b1\7y\2\2\u03b0\u03aa\3\2\2\2\u03b0\u03ad\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b4\b\"\1\2\u03b3\u039e\3")
        buf.write("\2\2\2\u03b3\u03a3\3\2\2\2\u03b3\u03a6\3\2\2\2\u03b3\u03a8")
        buf.write("\3\2\2\2\u03b3\u03b0\3\2\2\2\u03b4C\3\2\2\2\u03b5\u03b6")
        buf.write("\t\36\2\2\u03b6E\3\2\2\2\u03b7\u03b8\t\37\2\2\u03b8G\3")
        buf.write("\2\2\2\u03b9\u03bc\5D#\2\u03ba\u03bc\5F$\2\u03bb\u03b9")
        buf.write("\3\2\2\2\u03bb\u03ba\3\2\2\2\u03bcI\3\2\2\2\u03bd\u03be")
        buf.write("\7\23\2\2\u03be\u041b\7s\2\2\u03bf\u03c0\7\u00a5\2\2\u03c0")
        buf.write("\u041b\t \2\2\u03c1\u03c2\7\u00a8\2\2\u03c2\u041b\t \2")
        buf.write("\2\u03c3\u03c4\7\23\2\2\u03c4\u041b\t\6\2\2\u03c5\u03c6")
        buf.write("\7\u00a9\2\2\u03c6\u041b\7\u00aa\2\2\u03c7\u03c8\7\u00ab")
        buf.write("\2\2\u03c8\u041b\7\u00ac\2\2\u03c9\u03ca\7\u00ad\2\2\u03ca")
        buf.write("\u041b\7\u00ac\2\2\u03cb\u03cc\7u\2\2\u03cc\u041b\t\22")
        buf.write("\2\2\u03cd\u03ce\7\u00ae\2\2\u03ce\u041b\t\22\2\2\u03cf")
        buf.write("\u03d0\7\177\2\2\u03d0\u041b\7\u0080\2\2\u03d1\u03d2\5")
        buf.write("H%\2\u03d2\u03d3\7p\2\2\u03d3\u041b\3\2\2\2\u03d4\u03d5")
        buf.write("\5H%\2\u03d5\u03d6\t!\2\2\u03d6\u041b\3\2\2\2\u03d7\u03d9")
        buf.write("\7\177\2\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9")
        buf.write("\u03da\3\2\2\2\u03da\u041b\7\u0081\2\2\u03db\u03dc\7Y")
        buf.write("\2\2\u03dc\u041b\7|\2\2\u03dd\u03de\7\u00af\2\2\u03de")
        buf.write("\u041b\7\u00b0\2\2\u03df\u03e0\t\"\2\2\u03e0\u041b\7\u00b2")
        buf.write("\2\2\u03e1\u03e2\t\"\2\2\u03e2\u041b\7\u00b3\2\2\u03e3")
        buf.write("\u03e5\7\u00b4\2\2\u03e4\u03e6\7\u00b5\2\2\u03e5\u03e4")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u041b\3\2\2\2\u03e7")
        buf.write("\u03e9\7\u00b6\2\2\u03e8\u03ea\7\u00b5\2\2\u03e9\u03e8")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u041b\3\2\2\2\u03eb")
        buf.write("\u03ed\5H%\2\u03ec\u03ee\7\u00b5\2\2\u03ed\u03ec\3\2\2")
        buf.write("\2\u03ed\u03ee\3\2\2\2\u03ee\u041b\3\2\2\2\u03ef\u03f1")
        buf.write("\7\u00b7\2\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1")
        buf.write("\u03f5\3\2\2\2\u03f2\u03f5\7\u00b8\2\2\u03f3\u03f5\7\u00b9")
        buf.write("\2\2\u03f4\u03f0\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f3")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u041b\7\u00ba\2\2\u03f7")
        buf.write("\u03f8\t#\2\2\u03f8\u041b\t$\2\2\u03f9\u03fa\7\u00bf\2")
        buf.write("\2\u03fa\u041b\t%\2\2\u03fb\u03fd\7\u00c2\2\2\u03fc\u03fb")
        buf.write("\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe")
        buf.write("\u03ff\7\u00c3\2\2\u03ff\u041b\t&\2\2\u0400\u041b\5T+")
        buf.write("\2\u0401\u041b\7\62\2\2\u0402\u041b\7s\2\2\u0403\u041b")
        buf.write("\7v\2\2\u0404\u041b\7o\2\2\u0405\u041b\7%\2\2\u0406\u041b")
        buf.write("\7{\2\2\u0407\u041b\7}\2\2\u0408\u041b\7~\2\2\u0409\u041b")
        buf.write("\7Q\2\2\u040a\u041b\7\u0082\2\2\u040b\u041b\7\u00aa\2")
        buf.write("\2\u040c\u041b\7e\2\2\u040d\u041b\7k\2\2\u040e\u041b\7")
        buf.write("i\2\2\u040f\u041b\7h\2\2\u0410\u041b\7z\2\2\u0411\u041b")
        buf.write("\7 \2\2\u0412\u041b\7!\2\2\u0413\u041b\7H\2\2\u0414\u041b")
        buf.write("\7J\2\2\u0415\u041b\7K\2\2\u0416\u041b\7p\2\2\u0417\u041b")
        buf.write("\7\u0081\2\2\u0418\u041b\7\u00b5\2\2\u0419\u041b\7\u00f9")
        buf.write("\2\2\u041a\u03bd\3\2\2\2\u041a\u03bf\3\2\2\2\u041a\u03c1")
        buf.write("\3\2\2\2\u041a\u03c3\3\2\2\2\u041a\u03c5\3\2\2\2\u041a")
        buf.write("\u03c7\3\2\2\2\u041a\u03c9\3\2\2\2\u041a\u03cb\3\2\2\2")
        buf.write("\u041a\u03cd\3\2\2\2\u041a\u03cf\3\2\2\2\u041a\u03d1\3")
        buf.write("\2\2\2\u041a\u03d4\3\2\2\2\u041a\u03d8\3\2\2\2\u041a\u03db")
        buf.write("\3\2\2\2\u041a\u03dd\3\2\2\2\u041a\u03df\3\2\2\2\u041a")
        buf.write("\u03e1\3\2\2\2\u041a\u03e3\3\2\2\2\u041a\u03e7\3\2\2\2")
        buf.write("\u041a\u03eb\3\2\2\2\u041a\u03f4\3\2\2\2\u041a\u03f7\3")
        buf.write("\2\2\2\u041a\u03f9\3\2\2\2\u041a\u03fc\3\2\2\2\u041a\u0400")
        buf.write("\3\2\2\2\u041a\u0401\3\2\2\2\u041a\u0402\3\2\2\2\u041a")
        buf.write("\u0403\3\2\2\2\u041a\u0404\3\2\2\2\u041a\u0405\3\2\2\2")
        buf.write("\u041a\u0406\3\2\2\2\u041a\u0407\3\2\2\2\u041a\u0408\3")
        buf.write("\2\2\2\u041a\u0409\3\2\2\2\u041a\u040a\3\2\2\2\u041a\u040b")
        buf.write("\3\2\2\2\u041a\u040c\3\2\2\2\u041a\u040d\3\2\2\2\u041a")
        buf.write("\u040e\3\2\2\2\u041a\u040f\3\2\2\2\u041a\u0410\3\2\2\2")
        buf.write("\u041a\u0411\3\2\2\2\u041a\u0412\3\2\2\2\u041a\u0413\3")
        buf.write("\2\2\2\u041a\u0414\3\2\2\2\u041a\u0415\3\2\2\2\u041a\u0416")
        buf.write("\3\2\2\2\u041a\u0417\3\2\2\2\u041a\u0418\3\2\2\2\u041a")
        buf.write("\u0419\3\2\2\2\u041bK\3\2\2\2\u041c\u041d\7\u00c6\2\2")
        buf.write("\u041d\u0429\b\'\1\2\u041e\u041f\7\u00c7\2\2\u041f\u0429")
        buf.write("\b\'\1\2\u0420\u0421\7\u00c8\2\2\u0421\u0429\b\'\1\2\u0422")
        buf.write("\u0423\7\u00c9\2\2\u0423\u0429\b\'\1\2\u0424\u0425\7\u00ca")
        buf.write("\2\2\u0425\u0429\b\'\1\2\u0426\u0427\7\u00cb\2\2\u0427")
        buf.write("\u0429\b\'\1\2\u0428\u041c\3\2\2\2\u0428\u041e\3\2\2\2")
        buf.write("\u0428\u0420\3\2\2\2\u0428\u0422\3\2\2\2\u0428\u0424\3")
        buf.write("\2\2\2\u0428\u0426\3\2\2\2\u0429M\3\2\2\2\u042a\u042b")
        buf.write("\t\'\2\2\u042b\u042f\b(\1\2\u042c\u042d\t(\2\2\u042d\u042f")
        buf.write("\b(\1\2\u042e\u042a\3\2\2\2\u042e\u042c\3\2\2\2\u042f")
        buf.write("O\3\2\2\2\u0430\u0431\5R*\2\u0431\u0432\b)\1\2\u0432\u0439")
        buf.write("\3\2\2\2\u0433\u0434\7\u00f9\2\2\u0434\u0439\b)\1\2\u0435")
        buf.write("\u0436\5T+\2\u0436\u0437\b)\1\2\u0437\u0439\3\2\2\2\u0438")
        buf.write("\u0430\3\2\2\2\u0438\u0433\3\2\2\2\u0438\u0435\3\2\2\2")
        buf.write("\u0439Q\3\2\2\2\u043a\u043c\7\u00f0\2\2\u043b\u043d\7")
        buf.write("$\2\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043e")
        buf.write("\3\2\2\2\u043e\u043f\7T\2\2\u043f\u048a\b*\1\2\u0440\u0442")
        buf.write("\7$\2\2\u0441\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u0444\7\u00e9\2\2\u0444\u0445\7%")
        buf.write("\2\2\u0445\u048a\b*\1\2\u0446\u0448\7$\2\2\u0447\u0446")
        buf.write("\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\3\2\2\2\u0449")
        buf.write("\u044a\7\u00e9\2\2\u044a\u044b\7o\2\2\u044b\u048a\b*\1")
        buf.write("\2\u044c\u044d\7$\2\2\u044d\u044e\7T\2\2\u044e\u048a\b")
        buf.write("*\1\2\u044f\u0451\7$\2\2\u0450\u044f\3\2\2\2\u0450\u0451")
        buf.write("\3\2\2\2\u0451\u0453\3\2\2\2\u0452\u0454\7\u00b6\2\2\u0453")
        buf.write("\u0452\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455\3\2\2\2")
        buf.write("\u0455\u0456\7\u00d8\2\2\u0456\u0457\7s\2\2\u0457\u048a")
        buf.write("\b*\1\2\u0458\u045a\7$\2\2\u0459\u0458\3\2\2\2\u0459\u045a")
        buf.write("\3\2\2\2\u045a\u045c\3\2\2\2\u045b\u045d\7\u00b6\2\2\u045c")
        buf.write("\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045e\3\2\2\2")
        buf.write("\u045e\u045f\7\u00d8\2\2\u045f\u0460\7\62\2\2\u0460\u048a")
        buf.write("\b*\1\2\u0461\u0463\7\u00d9\2\2\u0462\u0464\7\35\2\2\u0463")
        buf.write("\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2")
        buf.write("\u0465\u0466\7\62\2\2\u0466\u048a\b*\1\2\u0467\u0468\7")
        buf.write("\u00da\2\2\u0468\u0469\7v\2\2\u0469\u048a\b*\1\2\u046a")
        buf.write("\u046b\7\u00db\2\2\u046b\u046c\7\f\2\2\u046c\u048a\b*")
        buf.write("\1\2\u046d\u046e\7\u00db\2\2\u046e\u046f\7\u00dc\2\2\u046f")
        buf.write("\u048a\b*\1\2\u0470\u0471\7\u00dd\2\2\u0471\u0472\7\r")
        buf.write("\2\2\u0472\u0473\7\u00d9\2\2\u0473\u048a\b*\1\2\u0474")
        buf.write("\u047a\7\u00de\2\2\u0475\u0477\7\35\2\2\u0476\u0475\3")
        buf.write("\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047b")
        buf.write("\7d\2\2\u0479\u047b\7\u00df\2\2\u047a\u0476\3\2\2\2\u047a")
        buf.write("\u0479\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u048a\b*\1\2")
        buf.write("\u047d\u047e\7\u00ae\2\2\u047e\u047f\7l\2\2\u047f\u048a")
        buf.write("\b*\1\2\u0480\u0482\7\u00e0\2\2\u0481\u0483\7\r\2\2\u0482")
        buf.write("\u0481\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\3\2\2\2")
        buf.write("\u0484\u0486\7\u00c2\2\2\u0485\u0484\3\2\2\2\u0485\u0486")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\7\u00c3\2\2\u0488")
        buf.write("\u048a\b*\1\2\u0489\u043a\3\2\2\2\u0489\u0441\3\2\2\2")
        buf.write("\u0489\u0447\3\2\2\2\u0489\u044c\3\2\2\2\u0489\u0450\3")
        buf.write("\2\2\2\u0489\u0459\3\2\2\2\u0489\u0461\3\2\2\2\u0489\u0467")
        buf.write("\3\2\2\2\u0489\u046a\3\2\2\2\u0489\u046d\3\2\2\2\u0489")
        buf.write("\u0470\3\2\2\2\u0489\u0474\3\2\2\2\u0489\u047d\3\2\2\2")
        buf.write("\u0489\u0480\3\2\2\2\u048aS\3\2\2\2\u048b\u04db\7\u0083")
        buf.write("\2\2\u048c\u04db\7\u0088\2\2\u048d\u04db\7\u00a8\2\2\u048e")
        buf.write("\u04db\7\u00a5\2\2\u048f\u04db\7\35\2\2\u0490\u04db\7")
        buf.write("\31\2\2\u0491\u04db\7\u00af\2\2\u0492\u04db\7\u00f0\2")
        buf.write("\2\u0493\u04db\7\u00ef\2\2\u0494\u04db\7\"\2\2\u0495\u04db")
        buf.write("\7\u00a1\2\2\u0496\u04db\7\u00a3\2\2\u0497\u04db\7\u00a2")
        buf.write("\2\2\u0498\u04db\7\u00a4\2\2\u0499\u04db\7q\2\2\u049a")
        buf.write("\u04db\7r\2\2\u049b\u04db\7^\2\2\u049c\u04db\7j\2\2\u049d")
        buf.write("\u04db\7\u00e1\2\2\u049e\u04db\7\u00e2\2\2\u049f\u04db")
        buf.write("\7\u00d9\2\2\u04a0\u04db\7\u00da\2\2\u04a1\u04db\7U\2")
        buf.write("\2\u04a2\u04db\7W\2\2\u04a3\u04db\7V\2\2\u04a4\u04db\7")
        buf.write("X\2\2\u04a5\u04db\7[\2\2\u04a6\u04db\7\\\2\2\u04a7\u04db")
        buf.write("\7:\2\2\u04a8\u04db\7\u00b6\2\2\u04a9\u04db\7\u00d8\2")
        buf.write("\2\u04aa\u04db\7x\2\2\u04ab\u04db\7\u00db\2\2\u04ac\u04db")
        buf.write("\7\f\2\2\u04ad\u04db\7\u00dc\2\2\u04ae\u04db\7Y\2\2\u04af")
        buf.write("\u04db\7|\2\2\u04b0\u04db\7Z\2\2\u04b1\u04db\7\u00ab\2")
        buf.write("\2\u04b2\u04db\7\u00ad\2\2\u04b3\u04db\7\u00ac\2\2\u04b4")
        buf.write("\u04db\7\u00dd\2\2\u04b5\u04db\7\r\2\2\u04b6\u04db\7\u00d9")
        buf.write("\2\2\u04b7\u04db\7\u00b0\2\2\u04b8\u04db\7\u00b1\2\2\u04b9")
        buf.write("\u04db\7\u00b2\2\2\u04ba\u04db\7\u00b3\2\2\u04bb\u04db")
        buf.write("\7d\2\2\u04bc\u04db\7u\2\2\u04bd\u04db\7\u00b4\2\2\u04be")
        buf.write("\u04db\7\u00b6\2\2\u04bf\u04db\7\u00b5\2\2\u04c0\u04db")
        buf.write("\7\u00ae\2\2\u04c1\u04db\7\u00e3\2\2\u04c2\u04db\7\23")
        buf.write("\2\2\u04c3\u04db\7\u00a6\2\2\u04c4\u04db\7\u00a7\2\2\u04c5")
        buf.write("\u04db\7\u0081\2\2\u04c6\u04db\5H%\2\u04c7\u04db\7\u00b7")
        buf.write("\2\2\u04c8\u04db\7\u00b8\2\2\u04c9\u04db\7\u00b9\2\2\u04ca")
        buf.write("\u04db\7\u00ba\2\2\u04cb\u04db\7\u00bb\2\2\u04cc\u04db")
        buf.write("\7\u00bc\2\2\u04cd\u04db\7\u00bd\2\2\u04ce\u04db\7\u00be")
        buf.write("\2\2\u04cf\u04db\7\u00bf\2\2\u04d0\u04db\7 \2\2\u04d1")
        buf.write("\u04db\7\u00c0\2\2\u04d2\u04db\7\u00c1\2\2\u04d3\u04db")
        buf.write("\7\u00c2\2\2\u04d4\u04db\7\u00c3\2\2\u04d5\u04db\7\u00c4")
        buf.write("\2\2\u04d6\u04db\7\u00c5\2\2\u04d7\u04db\7*\2\2\u04d8")
        buf.write("\u04db\7\32\2\2\u04d9\u04db\7)\2\2\u04da\u048b\3\2\2\2")
        buf.write("\u04da\u048c\3\2\2\2\u04da\u048d\3\2\2\2\u04da\u048e\3")
        buf.write("\2\2\2\u04da\u048f\3\2\2\2\u04da\u0490\3\2\2\2\u04da\u0491")
        buf.write("\3\2\2\2\u04da\u0492\3\2\2\2\u04da\u0493\3\2\2\2\u04da")
        buf.write("\u0494\3\2\2\2\u04da\u0495\3\2\2\2\u04da\u0496\3\2\2\2")
        buf.write("\u04da\u0497\3\2\2\2\u04da\u0498\3\2\2\2\u04da\u0499\3")
        buf.write("\2\2\2\u04da\u049a\3\2\2\2\u04da\u049b\3\2\2\2\u04da\u049c")
        buf.write("\3\2\2\2\u04da\u049d\3\2\2\2\u04da\u049e\3\2\2\2\u04da")
        buf.write("\u049f\3\2\2\2\u04da\u04a0\3\2\2\2\u04da\u04a1\3\2\2\2")
        buf.write("\u04da\u04a2\3\2\2\2\u04da\u04a3\3\2\2\2\u04da\u04a4\3")
        buf.write("\2\2\2\u04da\u04a5\3\2\2\2\u04da\u04a6\3\2\2\2\u04da\u04a7")
        buf.write("\3\2\2\2\u04da\u04a8\3\2\2\2\u04da\u04a9\3\2\2\2\u04da")
        buf.write("\u04aa\3\2\2\2\u04da\u04ab\3\2\2\2\u04da\u04ac\3\2\2\2")
        buf.write("\u04da\u04ad\3\2\2\2\u04da\u04ae\3\2\2\2\u04da\u04af\3")
        buf.write("\2\2\2\u04da\u04b0\3\2\2\2\u04da\u04b1\3\2\2\2\u04da\u04b2")
        buf.write("\3\2\2\2\u04da\u04b3\3\2\2\2\u04da\u04b4\3\2\2\2\u04da")
        buf.write("\u04b5\3\2\2\2\u04da\u04b6\3\2\2\2\u04da\u04b7\3\2\2\2")
        buf.write("\u04da\u04b8\3\2\2\2\u04da\u04b9\3\2\2\2\u04da\u04ba\3")
        buf.write("\2\2\2\u04da\u04bb\3\2\2\2\u04da\u04bc\3\2\2\2\u04da\u04bd")
        buf.write("\3\2\2\2\u04da\u04be\3\2\2\2\u04da\u04bf\3\2\2\2\u04da")
        buf.write("\u04c0\3\2\2\2\u04da\u04c1\3\2\2\2\u04da\u04c2\3\2\2\2")
        buf.write("\u04da\u04c3\3\2\2\2\u04da\u04c4\3\2\2\2\u04da\u04c5\3")
        buf.write("\2\2\2\u04da\u04c6\3\2\2\2\u04da\u04c7\3\2\2\2\u04da\u04c8")
        buf.write("\3\2\2\2\u04da\u04c9\3\2\2\2\u04da\u04ca\3\2\2\2\u04da")
        buf.write("\u04cb\3\2\2\2\u04da\u04cc\3\2\2\2\u04da\u04cd\3\2\2\2")
        buf.write("\u04da\u04ce\3\2\2\2\u04da\u04cf\3\2\2\2\u04da\u04d0\3")
        buf.write("\2\2\2\u04da\u04d1\3\2\2\2\u04da\u04d2\3\2\2\2\u04da\u04d3")
        buf.write("\3\2\2\2\u04da\u04d4\3\2\2\2\u04da\u04d5\3\2\2\2\u04da")
        buf.write("\u04d6\3\2\2\2\u04da\u04d7\3\2\2\2\u04da\u04d8\3\2\2\2")
        buf.write("\u04da\u04d9\3\2\2\2\u04dbU\3\2\2\2\u04dc\u04dd\7\u00fc")
        buf.write("\2\2\u04ddW\3\2\2\2\u04de\u04df\7\23\2\2\u04df\u04e0\7")
        buf.write("s\2\2\u04e0\u0520\b-\1\2\u04e1\u04e2\7\u00a5\2\2\u04e2")
        buf.write("\u04e3\t \2\2\u04e3\u0520\b-\1\2\u04e4\u04e5\7\u00a8\2")
        buf.write("\2\u04e5\u04e6\t \2\2\u04e6\u0520\b-\1\2\u04e7\u04e8\7")
        buf.write("\23\2\2\u04e8\u04e9\t\6\2\2\u04e9\u0520\b-\1\2\u04ea\u04eb")
        buf.write("\7\u00a9\2\2\u04eb\u04ec\7\u00aa\2\2\u04ec\u0520\b-\1")
        buf.write("\2\u04ed\u04ee\7\u00ab\2\2\u04ee\u04ef\7\u00ac\2\2\u04ef")
        buf.write("\u0520\b-\1\2\u04f0\u04f1\7\u00ad\2\2\u04f1\u04f2\7\u00ac")
        buf.write("\2\2\u04f2\u0520\b-\1\2\u04f3\u04f4\7u\2\2\u04f4\u04f5")
        buf.write("\t\22\2\2\u04f5\u0520\b-\1\2\u04f6\u04f7\7\u00ae\2\2\u04f7")
        buf.write("\u04f8\t\22\2\2\u04f8\u0520\b-\1\2\u04f9\u04fa\7\177\2")
        buf.write("\2\u04fa\u04fb\7\u0080\2\2\u04fb\u0520\b-\1\2\u04fc\u04fd")
        buf.write("\t\36\2\2\u04fd\u04fe\7p\2\2\u04fe\u0520\b-\1\2\u04ff")
        buf.write("\u0500\t\37\2\2\u0500\u0501\7p\2\2\u0501\u0520\b-\1\2")
        buf.write("\u0502\u0503\t\36\2\2\u0503\u0504\t!\2\2\u0504\u0520\b")
        buf.write("-\1\2\u0505\u0506\t\37\2\2\u0506\u0507\t!\2\2\u0507\u0520")
        buf.write("\b-\1\2\u0508\u0509\7\177\2\2\u0509\u050a\7\u0081\2\2")
        buf.write("\u050a\u0520\b-\1\2\u050b\u050c\7Y\2\2\u050c\u050d\7|")
        buf.write("\2\2\u050d\u0520\b-\1\2\u050e\u050f\7\u00af\2\2\u050f")
        buf.write("\u0510\7\u00b0\2\2\u0510\u0520\b-\1\2\u0511\u0512\t\"")
        buf.write("\2\2\u0512\u0513\7\u00b2\2\2\u0513\u0520\b-\1\2\u0514")
        buf.write("\u0515\t\"\2\2\u0515\u0516\7\u00b3\2\2\u0516\u0520\b-")
        buf.write("\1\2\u0517\u0518\7\u00b4\2\2\u0518\u0519\7\u00b5\2\2\u0519")
        buf.write("\u0520\b-\1\2\u051a\u051b\7\u00b6\2\2\u051b\u051c\7\u00b5")
        buf.write("\2\2\u051c\u0520\b-\1\2\u051d\u051e\t)\2\2\u051e\u0520")
        buf.write("\b-\1\2\u051f\u04de\3\2\2\2\u051f\u04e1\3\2\2\2\u051f")
        buf.write("\u04e4\3\2\2\2\u051f\u04e7\3\2\2\2\u051f\u04ea\3\2\2\2")
        buf.write("\u051f\u04ed\3\2\2\2\u051f\u04f0\3\2\2\2\u051f\u04f3\3")
        buf.write("\2\2\2\u051f\u04f6\3\2\2\2\u051f\u04f9\3\2\2\2\u051f\u04fc")
        buf.write("\3\2\2\2\u051f\u04ff\3\2\2\2\u051f\u0502\3\2\2\2\u051f")
        buf.write("\u0505\3\2\2\2\u051f\u0508\3\2\2\2\u051f\u050b\3\2\2\2")
        buf.write("\u051f\u050e\3\2\2\2\u051f\u0511\3\2\2\2\u051f\u0514\3")
        buf.write("\2\2\2\u051f\u0517\3\2\2\2\u051f\u051a\3\2\2\2\u051f\u051d")
        buf.write("\3\2\2\2\u0520Y\3\2\2\2u]jpux\u0083\u00a3\u00a9\u00ae")
        buf.write("\u00bd\u00c2\u00cf\u00d5\u00dd\u00e1\u00f6\u00ff\u0101")
        buf.write("\u010b\u0112\u0115\u011b\u0123\u0129\u012f\u0143\u014a")
        buf.write("\u014e\u0151\u0155\u015b\u0164\u016d\u0171\u017a\u0187")
        buf.write("\u018c\u0193\u019a\u019d\u01a5\u01ae\u01c3\u01d9\u01dc")
        buf.write("\u01fe\u0201\u020e\u0217\u021c\u023d\u023f\u0254\u025f")
        buf.write("\u0265\u0273\u027b\u028b\u0291\u0296\u029f\u02a2\u02a7")
        buf.write("\u02aa\u02c0\u02ca\u02d0\u02d3\u02e0\u02e9\u02f8\u0307")
        buf.write("\u030f\u0337\u033f\u0347\u0356\u035b\u0364\u0367\u036e")
        buf.write("\u0375\u0388\u039c\u03a3\u03ad\u03b0\u03b3\u03bb\u03d8")
        buf.write("\u03e5\u03e9\u03ed\u03f0\u03f4\u03fc\u041a\u0428\u042e")
        buf.write("\u0438\u043c\u0441\u0447\u0450\u0453\u0459\u045c\u0463")
        buf.write("\u0476\u047a\u0482\u0485\u0489\u04da\u051f")
        return buf.getvalue()


class DMFParser ( Parser ):

    grammarFileName = "DMF.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'{'", "'}'", "'[['", 
                     "']]'", "'times'", "'for'", "'with'", "'in'", "'to'", 
                     "'by'", "'down'", "'up'", "'['", "'repeat'", "'exit'", 
                     "'loop'", "'return'", "'('", "','", "'#'", "'an'", 
                     "'empty'", "'magnitude'", "'as'", "'a'", "'string'", 
                     "'turned'", "'dir'", "'direction'", "'per'", "'C'", 
                     "'the'", "'reagent'", "'named'", "'of'", "'is'", "'sample'", 
                     "'containing'", "'and'", "'or'", "'pause'", "'wait'", 
                     "'user'", "'prompt'", "'print'", "'drop'", "'@'", "'at'", 
                     "'exists'", "'does'", "'exist'", "'doesn't'", "'is missing'", 
                     "'missing'", "'has'", "'have'", "'unknown'", "'waste'", 
                     "'north'", "'south'", "'left'", "'west'", "'right'", 
                     "'east'", "'clockwise'", "'counterclockwise'", "'around'", 
                     "'row'", "'rows'", "'col'", "'column'", "'cols'", "'columns'", 
                     "'macro'", "'->'", "'turn'", "'state'", "'remove'", 
                     "'from'", "'board'", "'reset'", "'pads'", "'magnets'", 
                     "'heaters'", "'heating'", "'zones'", "'chillers'", 
                     "'all'", "'binary'", "'delta'", "'motion'", "'delay'", 
                     "'bool'", "'liquid'", "'sensor'", "'reading'", "'eselog'", 
                     "'int'", "'float'", "'temp'", "'temperature'", "'point'", 
                     "'timestamp'", "'time'", "'frequency'", "'ticks'", 
                     "'volume'", "'voltage'", "'diff'", "'difference'", 
                     "'pad'", "'pipetting'", "'target'", "'well'", "'extraction'", 
                     "'port'", "'hole'", "'gate'", "'heater'", "'zone'", 
                     "'chiller'", "'magnet'", "'power'", "'supply'", "'mode'", 
                     "'fan'", "'s'", "'sec'", "'secs'", "'second'", "'seconds'", 
                     "'ms'", "'millisecond'", "'milliseconds'", "'uL'", 
                     "'ul'", "'microliter'", "'microlitre'", "'microliters'", 
                     "'microlitres'", "'mL'", "'ml'", "'milliliter'", "'millilitre'", 
                     "'milliliters'", "'millilitres'", "'tick'", "'drops'", 
                     "'V'", "'volt'", "'volts'", "'mV'", "'millivolt'", 
                     "'millivolts'", "'Hz'", "'hz'", "'min'", "'minimum'", 
                     "'max'", "'maximum'", "'y'", "'coord'", "'coordinate'", 
                     "'x'", "'remaining'", "'capacity'", "'fill'", "'level'", 
                     "'refill'", "'current'", "'n'", "'samples'", "'sampling'", 
                     "'rate'", "'interval'", "'first'", "'value'", "'last'", 
                     "'arithmetic'", "'harmonic'", "'geometric'", "'mean'", 
                     "'std'", "'standard'", "'dev'", "'deviation'", "'log'", 
                     "'directory'", "'folder'", "'csv'", "'file'", "'name'", 
                     "'template'", "'=='", "'!='", "'<'", "'<='", "'>'", 
                     "'>='", "'True'", "'true'", "'TRUE'", "'Yes'", "'yes'", 
                     "'YES'", "'False'", "'false'", "'FALSE'", "'No'", "'no'", 
                     "'NO'", "'clicked'", "'dispense'", "'enter'", "'transfer'", 
                     "'out'", "'prepare'", "'take'", "'readings'", "'write'", 
                     "'index'", "'base'", "'now'", "'+'", "'='", "<INVALID>", 
                     "'/'", "'future'", "'interactive'", "':'", "'isn't'", 
                     "'local'", "'*'", "'not'", "'off'", "'on'", "'-'", 
                     "';'", "'toggle'", "'until'", "'while'", "']'", "')'", 
                     "'maybe'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ADD", "ASSIGN", "ATTR", 
                      "DIV", "FUTURE", "INTERACTIVE", "INJECT", "ISNT", 
                      "LOCAL", "MUL", "NOT", "OFF", "ON", "SUB", "TERMINATOR", 
                      "TOGGLE", "UNTIL", "WHILE", "CLOSE_BRACKET", "CLOSE_PAREN", 
                      "MAYBE", "ID", "INT", "FLOAT", "STRING", "EOL_COMMENT", 
                      "COMMENT", "WS" ]

    RULE_macro_file = 0
    RULE_interactive = 1
    RULE_declaration = 2
    RULE_stat = 3
    RULE_compound = 4
    RULE_loop_header = 5
    RULE_step_first_and_dir = 6
    RULE_loop = 7
    RULE_exit = 8
    RULE_ret = 9
    RULE_term_punct = 10
    RULE_expr = 11
    RULE_existence = 12
    RULE_possession = 13
    RULE_reagent = 14
    RULE_direction = 15
    RULE_turn = 16
    RULE_rc = 17
    RULE_axis = 18
    RULE_macro_def = 19
    RULE_macro_header = 20
    RULE_param = 21
    RULE_no_arg_action = 22
    RULE_value_type = 23
    RULE_not_future_type = 24
    RULE_not_maybe_type = 25
    RULE_sample_type = 26
    RULE_atomic_type = 27
    RULE_sampleable_type = 28
    RULE_quantity_type = 29
    RULE_component_type = 30
    RULE_dim_unit = 31
    RULE_numbered_type = 32
    RULE_minimum = 33
    RULE_maximum = 34
    RULE_min_max = 35
    RULE_attr = 36
    RULE_rel = 37
    RULE_bool_val = 38
    RULE_name = 39
    RULE_multi_word_name = 40
    RULE_kwd_names = 41
    RULE_string = 42
    RULE_old_attr = 43

    ruleNames =  [ "macro_file", "interactive", "declaration", "stat", "compound", 
                   "loop_header", "step_first_and_dir", "loop", "exit", 
                   "ret", "term_punct", "expr", "existence", "possession", 
                   "reagent", "direction", "turn", "rc", "axis", "macro_def", 
                   "macro_header", "param", "no_arg_action", "value_type", 
                   "not_future_type", "not_maybe_type", "sample_type", "atomic_type", 
                   "sampleable_type", "quantity_type", "component_type", 
                   "dim_unit", "numbered_type", "minimum", "maximum", "min_max", 
                   "attr", "rel", "bool_val", "name", "multi_word_name", 
                   "kwd_names", "string", "old_attr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    T__216=217
    T__217=218
    T__218=219
    T__219=220
    T__220=221
    T__221=222
    T__222=223
    T__223=224
    T__224=225
    ADD=226
    ASSIGN=227
    ATTR=228
    DIV=229
    FUTURE=230
    INTERACTIVE=231
    INJECT=232
    ISNT=233
    LOCAL=234
    MUL=235
    NOT=236
    OFF=237
    ON=238
    SUB=239
    TERMINATOR=240
    TOGGLE=241
    UNTIL=242
    WHILE=243
    CLOSE_BRACKET=244
    CLOSE_PAREN=245
    MAYBE=246
    ID=247
    INT=248
    FLOAT=249
    STRING=250
    EOL_COMMENT=251
    COMMENT=252
    WS=253

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Macro_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_file" ):
                listener.enterMacro_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_file" ):
                listener.exitMacro_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_file" ):
                return visitor.visitMacro_file(self)
            else:
                return visitor.visitChildren(self)




    def macro_file(self):

        localctx = DMFParser.Macro_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_macro_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__78 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__88 - 64)) | (1 << (DMFParser.T__89 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__158 - 128)) | (1 << (DMFParser.T__159 - 128)) | (1 << (DMFParser.T__160 - 128)) | (1 << (DMFParser.T__161 - 128)) | (1 << (DMFParser.T__162 - 128)) | (1 << (DMFParser.T__163 - 128)) | (1 << (DMFParser.T__164 - 128)) | (1 << (DMFParser.T__165 - 128)) | (1 << (DMFParser.T__168 - 128)) | (1 << (DMFParser.T__169 - 128)) | (1 << (DMFParser.T__170 - 128)) | (1 << (DMFParser.T__171 - 128)) | (1 << (DMFParser.T__172 - 128)) | (1 << (DMFParser.T__173 - 128)) | (1 << (DMFParser.T__174 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__182 - 128)) | (1 << (DMFParser.T__183 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__211 - 192)) | (1 << (DMFParser.T__212 - 192)) | (1 << (DMFParser.T__213 - 192)) | (1 << (DMFParser.T__214 - 192)) | (1 << (DMFParser.T__215 - 192)) | (1 << (DMFParser.T__216 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.LOCAL - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)) | (1 << (DMFParser.TOGGLE - 192)) | (1 << (DMFParser.MAYBE - 192)) | (1 << (DMFParser.ID - 192)) | (1 << (DMFParser.INT - 192)) | (1 << (DMFParser.FLOAT - 192)) | (1 << (DMFParser.STRING - 192)))) != 0):
                self.state = 88
                self.stat()
                self.state = 93
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 94
            self.match(DMFParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_interactive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Compound_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_interactive" ):
                listener.enterCompound_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_interactive" ):
                listener.exitCompound_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_interactive" ):
                return visitor.visitCompound_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Decl_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_interactive" ):
                listener.enterDecl_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_interactive" ):
                listener.exitDecl_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_interactive" ):
                return visitor.visitDecl_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Empty_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_interactive" ):
                listener.enterEmpty_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_interactive" ):
                listener.exitEmpty_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_interactive" ):
                return visitor.visitEmpty_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Loop_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_interactive" ):
                listener.enterLoop_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_interactive" ):
                listener.exitLoop_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_interactive" ):
                return visitor.visitLoop_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Expr_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_interactive" ):
                listener.enterExpr_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_interactive" ):
                listener.exitExpr_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_interactive" ):
                return visitor.visitExpr_interactive(self)
            else:
                return visitor.visitChildren(self)



    def interactive(self):

        localctx = DMFParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        self._la = 0 # Token type
        try:
            self.state = 115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Compound_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 96
                self.compound()
                self.state = 97
                self.match(DMFParser.EOF)
                pass

            elif la_ == 2:
                localctx = DMFParser.Loop_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 99
                self.loop()
                self.state = 100
                self.match(DMFParser.EOF)
                pass

            elif la_ == 3:
                localctx = DMFParser.Decl_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 102
                self.declaration()
                self.state = 104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 103
                    self.match(DMFParser.TERMINATOR)


                self.state = 106
                self.match(DMFParser.EOF)
                pass

            elif la_ == 4:
                localctx = DMFParser.Expr_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 108
                self.expr(0)
                self.state = 110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 109
                    self.match(DMFParser.TERMINATOR)


                self.state = 112
                self.match(DMFParser.EOF)
                pass

            elif la_ == 5:
                localctx = DMFParser.Empty_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 114
                self.match(DMFParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self._not_future_type = None # Not_future_typeContext
            self._name = None # NameContext
            self.target = None # ExprContext
            self._INT = None # Token
            self.init = None # ExprContext
            self._value_type = None # Value_typeContext

        def FUTURE(self):
            return self.getToken(DMFParser.FUTURE, 0)

        def not_future_type(self):
            return self.getTypedRuleContext(DMFParser.Not_future_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def LOCAL(self):
            return self.getToken(DMFParser.LOCAL, 0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = DMFParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 117
                    self.match(DMFParser.LOCAL)


                self.state = 120
                self.match(DMFParser.FUTURE)
                self.state = 121
                localctx._not_future_type = self.not_future_type()
                self.state = 122
                localctx._name = self.name()
                self.state = 123
                self.match(DMFParser.INJECT)
                self.state = 124
                localctx.target = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 128
                    self.match(DMFParser.LOCAL)


                self.state = 131
                self.match(DMFParser.FUTURE)
                self.state = 132
                localctx._not_future_type = self.not_future_type()
                self.state = 133
                localctx._INT = self.match(DMFParser.INT)
                self.state = 134
                self.match(DMFParser.INJECT)
                self.state = 135
                localctx.target = self.expr(0)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 139
                self.match(DMFParser.LOCAL)
                self.state = 140
                localctx._name = self.name()
                self.state = 141
                self.match(DMFParser.ASSIGN)
                self.state = 142
                localctx.init = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=None
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 146
                self.match(DMFParser.LOCAL)
                self.state = 147
                localctx._value_type = self.value_type()
                self.state = 148
                localctx._INT = self.match(DMFParser.INT)
                self.state = 149
                self.match(DMFParser.ASSIGN)
                self.state = 150
                localctx.init = self.expr(0)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 154
                self.match(DMFParser.LOCAL)
                self.state = 155
                localctx._value_type = self.value_type()
                self.state = 156
                localctx._INT = self.match(DMFParser.INT)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 160
                    self.match(DMFParser.LOCAL)


                self.state = 163
                localctx._value_type = self.value_type()
                self.state = 164
                localctx._name = self.name()
                self.state = 167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.ASSIGN:
                    self.state = 165
                    self.match(DMFParser.ASSIGN)
                    self.state = 166
                    localctx.init = self.expr(0)


                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Expr_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stat" ):
                listener.enterExpr_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stat" ):
                listener.exitExpr_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stat" ):
                return visitor.visitExpr_stat(self)
            else:
                return visitor.visitChildren(self)


    class Compound_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stat" ):
                listener.enterCompound_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stat" ):
                listener.exitCompound_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stat" ):
                return visitor.visitCompound_stat(self)
            else:
                return visitor.visitChildren(self)


    class Return_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ret(self):
            return self.getTypedRuleContext(DMFParser.RetContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stat" ):
                listener.enterReturn_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stat" ):
                listener.exitReturn_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stat" ):
                return visitor.visitReturn_stat(self)
            else:
                return visitor.visitChildren(self)


    class If_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.tests = list() # of ExprContexts
            self._compound = None # CompoundContext
            self.bodies = list() # of CompoundContexts
            self.else_body = None # CompoundContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def compound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.CompoundContext)
            else:
                return self.getTypedRuleContext(DMFParser.CompoundContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stat" ):
                listener.enterIf_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stat" ):
                listener.exitIf_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stat" ):
                return visitor.visitIf_stat(self)
            else:
                return visitor.visitChildren(self)


    class Loop_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_stat" ):
                listener.enterLoop_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_stat" ):
                listener.exitLoop_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_stat" ):
                return visitor.visitLoop_stat(self)
            else:
                return visitor.visitChildren(self)


    class Exit_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exit(self):
            return self.getTypedRuleContext(DMFParser.ExitContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_stat" ):
                listener.enterExit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_stat" ):
                listener.exitExit_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_stat" ):
                return visitor.visitExit_stat(self)
            else:
                return visitor.visitChildren(self)


    class Decl_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_stat" ):
                listener.enterDecl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_stat" ):
                listener.exitDecl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_stat" ):
                return visitor.visitDecl_stat(self)
            else:
                return visitor.visitChildren(self)



    def stat(self):

        localctx = DMFParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stat)
        self._la = 0 # Token type
        try:
            self.state = 205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Decl_statContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.declaration()
                self.state = 175
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 2:
                localctx = DMFParser.If_statContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self.match(DMFParser.T__0)
                self.state = 178
                localctx._expr = self.expr(0)
                localctx.tests.append(localctx._expr)
                self.state = 179
                localctx._compound = self.compound()
                localctx.bodies.append(localctx._compound)
                self.state = 187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 180
                        self.match(DMFParser.T__1)
                        self.state = 181
                        self.match(DMFParser.T__0)
                        self.state = 182
                        localctx._expr = self.expr(0)
                        localctx.tests.append(localctx._expr)
                        self.state = 183
                        localctx._compound = self.compound()
                        localctx.bodies.append(localctx._compound) 
                    self.state = 189
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__1:
                    self.state = 190
                    self.match(DMFParser.T__1)
                    self.state = 191
                    localctx.else_body = self.compound()


                pass

            elif la_ == 3:
                localctx = DMFParser.Expr_statContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.expr(0)
                self.state = 195
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 4:
                localctx = DMFParser.Loop_statContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.loop()
                pass

            elif la_ == 5:
                localctx = DMFParser.Exit_statContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 198
                self.exit()
                self.state = 199
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 6:
                localctx = DMFParser.Return_statContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 201
                self.ret()
                self.state = 202
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 7:
                localctx = DMFParser.Compound_statContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 204
                self.compound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_compound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_blockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_block" ):
                listener.enterPar_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_block" ):
                listener.exitPar_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPar_block" ):
                return visitor.visitPar_block(self)
            else:
                return visitor.visitChildren(self)


    class BlockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)



    def compound(self):

        localctx = DMFParser.CompoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_compound)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2]:
                localctx = DMFParser.BlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 207
                self.match(DMFParser.T__2)
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__78 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__88 - 64)) | (1 << (DMFParser.T__89 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__158 - 128)) | (1 << (DMFParser.T__159 - 128)) | (1 << (DMFParser.T__160 - 128)) | (1 << (DMFParser.T__161 - 128)) | (1 << (DMFParser.T__162 - 128)) | (1 << (DMFParser.T__163 - 128)) | (1 << (DMFParser.T__164 - 128)) | (1 << (DMFParser.T__165 - 128)) | (1 << (DMFParser.T__168 - 128)) | (1 << (DMFParser.T__169 - 128)) | (1 << (DMFParser.T__170 - 128)) | (1 << (DMFParser.T__171 - 128)) | (1 << (DMFParser.T__172 - 128)) | (1 << (DMFParser.T__173 - 128)) | (1 << (DMFParser.T__174 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__182 - 128)) | (1 << (DMFParser.T__183 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__211 - 192)) | (1 << (DMFParser.T__212 - 192)) | (1 << (DMFParser.T__213 - 192)) | (1 << (DMFParser.T__214 - 192)) | (1 << (DMFParser.T__215 - 192)) | (1 << (DMFParser.T__216 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.LOCAL - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)) | (1 << (DMFParser.TOGGLE - 192)) | (1 << (DMFParser.MAYBE - 192)) | (1 << (DMFParser.ID - 192)) | (1 << (DMFParser.INT - 192)) | (1 << (DMFParser.FLOAT - 192)) | (1 << (DMFParser.STRING - 192)))) != 0):
                    self.state = 208
                    self.stat()
                    self.state = 213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 214
                self.match(DMFParser.T__3)
                pass
            elif token in [DMFParser.T__4]:
                localctx = DMFParser.Par_blockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                self.match(DMFParser.T__4)
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__78 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__88 - 64)) | (1 << (DMFParser.T__89 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__158 - 128)) | (1 << (DMFParser.T__159 - 128)) | (1 << (DMFParser.T__160 - 128)) | (1 << (DMFParser.T__161 - 128)) | (1 << (DMFParser.T__162 - 128)) | (1 << (DMFParser.T__163 - 128)) | (1 << (DMFParser.T__164 - 128)) | (1 << (DMFParser.T__165 - 128)) | (1 << (DMFParser.T__168 - 128)) | (1 << (DMFParser.T__169 - 128)) | (1 << (DMFParser.T__170 - 128)) | (1 << (DMFParser.T__171 - 128)) | (1 << (DMFParser.T__172 - 128)) | (1 << (DMFParser.T__173 - 128)) | (1 << (DMFParser.T__174 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__182 - 128)) | (1 << (DMFParser.T__183 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__211 - 192)) | (1 << (DMFParser.T__212 - 192)) | (1 << (DMFParser.T__213 - 192)) | (1 << (DMFParser.T__214 - 192)) | (1 << (DMFParser.T__215 - 192)) | (1 << (DMFParser.T__216 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.LOCAL - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)) | (1 << (DMFParser.TOGGLE - 192)) | (1 << (DMFParser.MAYBE - 192)) | (1 << (DMFParser.ID - 192)) | (1 << (DMFParser.INT - 192)) | (1 << (DMFParser.FLOAT - 192)) | (1 << (DMFParser.STRING - 192)))) != 0):
                    self.state = 216
                    self.stat()
                    self.state = 221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 222
                self.match(DMFParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_loop_header

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Duration_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration_loop_header" ):
                listener.enterDuration_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration_loop_header" ):
                listener.exitDuration_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuration_loop_header" ):
                return visitor.visitDuration_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Test_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.cond = None # ExprContext
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(DMFParser.WHILE, 0)
        def UNTIL(self):
            return self.getToken(DMFParser.UNTIL, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_loop_header" ):
                listener.enterTest_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_loop_header" ):
                listener.exitTest_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_loop_header" ):
                return visitor.visitTest_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Seq_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.seq = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_iter_loop_header" ):
                listener.enterSeq_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_iter_loop_header" ):
                listener.exitSeq_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_iter_loop_header" ):
                return visitor.visitSeq_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Step_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.first = None # Step_first_and_dirContext
            self.bound = None # ExprContext
            self.step = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def step_first_and_dir(self):
            return self.getTypedRuleContext(DMFParser.Step_first_and_dirContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def param(self):
            return self.getTypedRuleContext(DMFParser.ParamContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_iter_loop_header" ):
                listener.enterStep_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_iter_loop_header" ):
                listener.exitStep_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_iter_loop_header" ):
                return visitor.visitStep_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class N_times_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.n = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_times_loop_header" ):
                listener.enterN_times_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_times_loop_header" ):
                listener.exitN_times_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_times_loop_header" ):
                return visitor.visitN_times_loop_header(self)
            else:
                return visitor.visitChildren(self)



    def loop_header(self):

        localctx = DMFParser.Loop_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_loop_header)
        self._la = 0 # Token type
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = DMFParser.N_times_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                localctx.n = self.expr(0)
                self.state = 226
                self.match(DMFParser.T__6)
                pass

            elif la_ == 2:
                localctx = DMFParser.Duration_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 228
                self.match(DMFParser.T__7)
                self.state = 229
                localctx.duration = self.expr(0)
                pass

            elif la_ == 3:
                localctx = DMFParser.Test_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 230
                _la = self._input.LA(1)
                if not(_la==DMFParser.UNTIL or _la==DMFParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 231
                localctx.cond = self.expr(0)
                pass

            elif la_ == 4:
                localctx = DMFParser.Seq_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 232
                self.match(DMFParser.T__8)
                self.state = 233
                localctx.var = self.name()
                self.state = 234
                self.match(DMFParser.T__9)
                self.state = 235
                localctx.seq = self.expr(0)
                pass

            elif la_ == 5:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 237
                self.match(DMFParser.T__8)
                self.state = 238
                localctx.var = self.name()
                self.state = 239
                localctx.first = self.step_first_and_dir()
                self.state = 240
                self.match(DMFParser.T__10)
                self.state = 241
                localctx.bound = self.expr(0)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 242
                    self.match(DMFParser.T__11)
                    self.state = 243
                    localctx.step = self.expr(0)


                pass

            elif la_ == 6:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 246
                self.match(DMFParser.T__8)
                self.state = 247
                localctx.var = self.param()
                self.state = 248
                localctx.first = self.step_first_and_dir()
                self.state = 249
                self.match(DMFParser.T__10)
                self.state = 250
                localctx.bound = self.expr(0)
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 251
                    self.match(DMFParser.T__11)
                    self.state = 252
                    localctx.step = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Step_first_and_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_down = None

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_step_first_and_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_first_and_dir" ):
                listener.enterStep_first_and_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_first_and_dir" ):
                listener.exitStep_first_and_dir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_first_and_dir" ):
                return visitor.visitStep_first_and_dir(self)
            else:
                return visitor.visitChildren(self)




    def step_first_and_dir(self):

        localctx = DMFParser.Step_first_and_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_step_first_and_dir)
        self._la = 0 # Token type
        try:
            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self.match(DMFParser.ASSIGN)
                self.state = 258
                self.expr(0)
                self.state = 259
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.match(DMFParser.ASSIGN)
                self.state = 263
                self.expr(0)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__13:
                    self.state = 264
                    self.match(DMFParser.T__13)


                localctx.is_down=False
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 269
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__13:
                    self.state = 271
                    self.match(DMFParser.T__13)


                localctx.is_down=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext
            self.header = None # Loop_headerContext
            self.body = None # CompoundContext

        def loop_header(self):
            return self.getTypedRuleContext(DMFParser.Loop_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = DMFParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DMFParser.T__14:
                self.state = 277
                self.match(DMFParser.T__14)
                self.state = 278
                localctx.loop_name = self.name()
                self.state = 279
                self.match(DMFParser.CLOSE_BRACKET)


            self.state = 283
            self.match(DMFParser.T__15)
            self.state = 284
            localctx.header = self.loop_header()
            self.state = 285
            localctx.body = self.compound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit" ):
                return visitor.visitExit(self)
            else:
                return visitor.visitChildren(self)




    def exit(self):

        localctx = DMFParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(DMFParser.T__16)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__55))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (DMFParser.T__82 - 83)) | (1 << (DMFParser.T__83 - 83)) | (1 << (DMFParser.T__84 - 83)) | (1 << (DMFParser.T__85 - 83)) | (1 << (DMFParser.T__86 - 83)) | (1 << (DMFParser.T__87 - 83)) | (1 << (DMFParser.T__88 - 83)) | (1 << (DMFParser.T__89 - 83)) | (1 << (DMFParser.T__91 - 83)) | (1 << (DMFParser.T__97 - 83)) | (1 << (DMFParser.T__103 - 83)) | (1 << (DMFParser.T__110 - 83)) | (1 << (DMFParser.T__111 - 83)) | (1 << (DMFParser.T__114 - 83)) | (1 << (DMFParser.T__117 - 83)) | (1 << (DMFParser.T__121 - 83)) | (1 << (DMFParser.T__126 - 83)) | (1 << (DMFParser.T__128 - 83)) | (1 << (DMFParser.T__133 - 83)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (DMFParser.T__158 - 159)) | (1 << (DMFParser.T__159 - 159)) | (1 << (DMFParser.T__160 - 159)) | (1 << (DMFParser.T__161 - 159)) | (1 << (DMFParser.T__162 - 159)) | (1 << (DMFParser.T__163 - 159)) | (1 << (DMFParser.T__164 - 159)) | (1 << (DMFParser.T__165 - 159)) | (1 << (DMFParser.T__168 - 159)) | (1 << (DMFParser.T__169 - 159)) | (1 << (DMFParser.T__170 - 159)) | (1 << (DMFParser.T__171 - 159)) | (1 << (DMFParser.T__172 - 159)) | (1 << (DMFParser.T__173 - 159)) | (1 << (DMFParser.T__174 - 159)) | (1 << (DMFParser.T__175 - 159)) | (1 << (DMFParser.T__176 - 159)) | (1 << (DMFParser.T__177 - 159)) | (1 << (DMFParser.T__178 - 159)) | (1 << (DMFParser.T__179 - 159)) | (1 << (DMFParser.T__180 - 159)) | (1 << (DMFParser.T__181 - 159)) | (1 << (DMFParser.T__182 - 159)) | (1 << (DMFParser.T__183 - 159)) | (1 << (DMFParser.T__184 - 159)) | (1 << (DMFParser.T__185 - 159)) | (1 << (DMFParser.T__186 - 159)) | (1 << (DMFParser.T__187 - 159)) | (1 << (DMFParser.T__188 - 159)) | (1 << (DMFParser.T__189 - 159)) | (1 << (DMFParser.T__190 - 159)) | (1 << (DMFParser.T__191 - 159)) | (1 << (DMFParser.T__192 - 159)) | (1 << (DMFParser.T__193 - 159)) | (1 << (DMFParser.T__194 - 159)) | (1 << (DMFParser.T__213 - 159)) | (1 << (DMFParser.T__214 - 159)) | (1 << (DMFParser.T__215 - 159)) | (1 << (DMFParser.T__216 - 159)) | (1 << (DMFParser.T__217 - 159)) | (1 << (DMFParser.T__218 - 159)) | (1 << (DMFParser.T__219 - 159)) | (1 << (DMFParser.T__221 - 159)))) != 0) or ((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & ((1 << (DMFParser.T__222 - 223)) | (1 << (DMFParser.T__223 - 223)) | (1 << (DMFParser.T__224 - 223)) | (1 << (DMFParser.INTERACTIVE - 223)) | (1 << (DMFParser.OFF - 223)) | (1 << (DMFParser.ON - 223)) | (1 << (DMFParser.ID - 223)))) != 0):
                self.state = 288
                localctx.loop_name = self.name()


            self.state = 291
            self.match(DMFParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_ret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRet" ):
                listener.enterRet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRet" ):
                listener.exitRet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRet" ):
                return visitor.visitRet(self)
            else:
                return visitor.visitChildren(self)




    def ret(self):

        localctx = DMFParser.RetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(DMFParser.T__18)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__78 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__88 - 64)) | (1 << (DMFParser.T__89 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__158 - 128)) | (1 << (DMFParser.T__159 - 128)) | (1 << (DMFParser.T__160 - 128)) | (1 << (DMFParser.T__161 - 128)) | (1 << (DMFParser.T__162 - 128)) | (1 << (DMFParser.T__163 - 128)) | (1 << (DMFParser.T__164 - 128)) | (1 << (DMFParser.T__165 - 128)) | (1 << (DMFParser.T__168 - 128)) | (1 << (DMFParser.T__169 - 128)) | (1 << (DMFParser.T__170 - 128)) | (1 << (DMFParser.T__171 - 128)) | (1 << (DMFParser.T__172 - 128)) | (1 << (DMFParser.T__173 - 128)) | (1 << (DMFParser.T__174 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__182 - 128)) | (1 << (DMFParser.T__183 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__211 - 192)) | (1 << (DMFParser.T__212 - 192)) | (1 << (DMFParser.T__213 - 192)) | (1 << (DMFParser.T__214 - 192)) | (1 << (DMFParser.T__215 - 192)) | (1 << (DMFParser.T__216 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)) | (1 << (DMFParser.TOGGLE - 192)) | (1 << (DMFParser.MAYBE - 192)) | (1 << (DMFParser.ID - 192)) | (1 << (DMFParser.INT - 192)) | (1 << (DMFParser.FLOAT - 192)) | (1 << (DMFParser.STRING - 192)))) != 0):
                self.state = 294
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_punctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_closed = None

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_term_punct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_punct" ):
                listener.enterTerm_punct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_punct" ):
                listener.exitTerm_punct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm_punct" ):
                return visitor.visitTerm_punct(self)
            else:
                return visitor.visitChildren(self)




    def term_punct(self):

        localctx = DMFParser.Term_punctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_term_punct)
        try:
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.CLOSE_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.match(DMFParser.CLOSE_BRACKET)
                localctx.is_closed=True
                pass
            elif token in [DMFParser.CLOSE_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.match(DMFParser.CLOSE_PAREN)
                localctx.is_closed=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Neg_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeg_expr" ):
                listener.enterNeg_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeg_expr" ):
                listener.exitNeg_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeg_expr" ):
                return visitor.visitNeg_expr(self)
            else:
                return visitor.visitChildren(self)


    class Const_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)
        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_rc_expr" ):
                listener.enterConst_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_rc_expr" ):
                listener.exitConst_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_rc_expr" ):
                return visitor.visitConst_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_string_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_string_expr" ):
                listener.enterUnit_string_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_string_expr" ):
                listener.exitUnit_string_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_string_expr" ):
                return visitor.visitUnit_string_expr(self)
            else:
                return visitor.visitChildren(self)


    class Action_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def no_arg_action(self):
            return self.getTypedRuleContext(DMFParser.No_arg_actionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_expr" ):
                listener.enterAction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_expr" ):
                listener.exitAction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_expr" ):
                return visitor.visitAction_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_assign_expr" ):
                listener.enterAttr_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_assign_expr" ):
                listener.exitAttr_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_assign_expr" ):
                return visitor.visitAttr_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_expr" ):
                listener.enterUnit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_expr" ):
                listener.exitUnit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_expr" ):
                return visitor.visitUnit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Temperature_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemperature_expr" ):
                listener.enterTemperature_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemperature_expr" ):
                listener.exitTemperature_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemperature_expr" ):
                return visitor.visitTemperature_expr(self)
            else:
                return visitor.visitChildren(self)


    class Print_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_expr" ):
                listener.enterPrint_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_expr" ):
                listener.exitPrint_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_expr" ):
                return visitor.visitPrint_expr(self)
            else:
                return visitor.visitChildren(self)


    class Numbered_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.kind = None # Numbered_typeContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def numbered_type(self):
            return self.getTypedRuleContext(DMFParser.Numbered_typeContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_expr" ):
                listener.enterNumbered_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_expr" ):
                listener.exitNumbered_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_expr" ):
                return visitor.visitNumbered_expr(self)
            else:
                return visitor.visitChildren(self)


    class Rel_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def rel(self):
            return self.getTypedRuleContext(DMFParser.RelContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_expr" ):
                listener.enterRel_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_expr" ):
                listener.exitRel_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel_expr" ):
                return visitor.visitRel_expr(self)
            else:
                return visitor.visitChildren(self)


    class Existence_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # ExprContext
            self.copyFrom(ctx)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence_expr" ):
                listener.enterExistence_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence_expr" ):
                listener.exitExistence_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence_expr" ):
                return visitor.visitExistence_expr(self)
            else:
                return visitor.visitChildren(self)


    class Not_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_expr" ):
                listener.enterNot_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_expr" ):
                listener.exitNot_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_expr" ):
                return visitor.visitNot_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reagent(self):
            return self.getTypedRuleContext(DMFParser.ReagentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_lit_expr" ):
                listener.enterReagent_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_lit_expr" ):
                listener.exitReagent_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_lit_expr" ):
                return visitor.visitReagent_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class And_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)


    class Prompt_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_expr" ):
                listener.enterPrompt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_expr" ):
                listener.exitPrompt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_expr" ):
                return visitor.visitPrompt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Or_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expr" ):
                listener.enterOr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expr" ):
                listener.exitOr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_expr" ):
                return visitor.visitOr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Injection_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInjection_expr" ):
                listener.enterInjection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInjection_expr" ):
                listener.exitInjection_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInjection_expr" ):
                return visitor.visitInjection_expr(self)
            else:
                return visitor.visitChildren(self)


    class Drop_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.loc = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_expr" ):
                listener.enterDrop_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_expr" ):
                listener.exitDrop_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_expr" ):
                return visitor.visitDrop_expr(self)
            else:
                return visitor.visitChildren(self)


    class Function_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.func = None # ExprContext
            self._expr = None # ExprContext
            self.args = list() # of ExprContexts
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_expr" ):
                listener.enterFunction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_expr" ):
                listener.exitFunction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_expr" ):
                return visitor.visitFunction_expr(self)
            else:
                return visitor.visitChildren(self)


    class To_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def axis(self):
            return self.getTypedRuleContext(DMFParser.AxisContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTo_expr" ):
                listener.enterTo_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTo_expr" ):
                listener.exitTo_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTo_expr" ):
                return visitor.visitTo_expr(self)
            else:
                return visitor.visitChildren(self)


    class Bool_const_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # Bool_valContext
            self.copyFrom(ctx)

        def bool_val(self):
            return self.getTypedRuleContext(DMFParser.Bool_valContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_const_expr" ):
                listener.enterBool_const_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_const_expr" ):
                listener.exitBool_const_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_const_expr" ):
                return visitor.visitBool_const_expr(self)
            else:
                return visitor.visitChildren(self)


    class Has_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def possession(self):
            return self.getTypedRuleContext(DMFParser.PossessionContext,0)

        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_expr" ):
                listener.enterHas_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_expr" ):
                listener.exitHas_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHas_expr" ):
                return visitor.visitHas_expr(self)
            else:
                return visitor.visitChildren(self)


    class Float_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT(self):
            return self.getToken(DMFParser.FLOAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_expr" ):
                listener.enterFloat_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_expr" ):
                listener.exitFloat_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_expr" ):
                return visitor.visitFloat_expr(self)
            else:
                return visitor.visitChildren(self)


    class N_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_rc_expr" ):
                listener.enterN_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_rc_expr" ):
                listener.exitN_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_rc_expr" ):
                return visitor.visitN_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Macro_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_def(self):
            return self.getTypedRuleContext(DMFParser.Macro_defContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_expr" ):
                listener.enterMacro_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_expr" ):
                listener.exitMacro_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_expr" ):
                return visitor.visitMacro_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_expr" ):
                listener.enterName_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_expr" ):
                listener.exitName_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_expr" ):
                return visitor.visitName_expr(self)
            else:
                return visitor.visitChildren(self)


    class Addsub_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ADD(self):
            return self.getToken(DMFParser.ADD, 0)
        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddsub_expr" ):
                listener.enterAddsub_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddsub_expr" ):
                listener.exitAddsub_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddsub_expr" ):
                return visitor.visitAddsub_expr(self)
            else:
                return visitor.visitChildren(self)


    class Liquid_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiquid_expr" ):
                listener.enterLiquid_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiquid_expr" ):
                listener.exitLiquid_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiquid_expr" ):
                return visitor.visitLiquid_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_expr" ):
                listener.enterReagent_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_expr" ):
                listener.exitReagent_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_expr" ):
                return visitor.visitReagent_expr(self)
            else:
                return visitor.visitChildren(self)


    class Dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDir_expr" ):
                listener.enterDir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDir_expr" ):
                listener.exitDir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDir_expr" ):
                return visitor.visitDir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Coord_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.x = None # ExprContext
            self.y = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_expr" ):
                listener.enterCoord_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_expr" ):
                listener.exitCoord_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_expr" ):
                return visitor.visitCoord_expr(self)
            else:
                return visitor.visitChildren(self)


    class Pause_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPause_expr" ):
                listener.enterPause_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPause_expr" ):
                listener.exitPause_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPause_expr" ):
                return visitor.visitPause_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)
        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_expr" ):
                listener.enterAttr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_expr" ):
                listener.exitAttr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_expr" ):
                return visitor.visitAttr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Paren_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParen_expr" ):
                listener.enterParen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParen_expr" ):
                listener.exitParen_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParen_expr" ):
                return visitor.visitParen_expr(self)
            else:
                return visitor.visitChildren(self)


    class Type_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.n = None # Token
            self.copyFrom(ctx)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_expr" ):
                listener.enterType_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_expr" ):
                listener.exitType_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name_expr" ):
                return visitor.visitType_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Index_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_expr" ):
                listener.enterIndex_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_expr" ):
                listener.exitIndex_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_expr" ):
                return visitor.visitIndex_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # NameContext
            self.what = None # ExprContext
            self.ptype = None # Value_typeContext
            self.n = None # Token
            self.copyFrom(ctx)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_assign_expr" ):
                listener.enterName_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_assign_expr" ):
                listener.exitName_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_assign_expr" ):
                return visitor.visitName_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class String_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(DMFParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_lit_expr" ):
                listener.enterString_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_lit_expr" ):
                listener.exitString_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_lit_expr" ):
                return visitor.visitString_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Magnitude_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagnitude_expr" ):
                listener.enterMagnitude_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagnitude_expr" ):
                listener.exitMagnitude_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMagnitude_expr" ):
                return visitor.visitMagnitude_expr(self)
            else:
                return visitor.visitChildren(self)


    class In_dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.d = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_dir_expr" ):
                listener.enterIn_dir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_dir_expr" ):
                listener.exitIn_dir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_dir_expr" ):
                return visitor.visitIn_dir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Muldiv_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def MUL(self):
            return self.getToken(DMFParser.MUL, 0)
        def DIV(self):
            return self.getToken(DMFParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMuldiv_expr" ):
                listener.enterMuldiv_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMuldiv_expr" ):
                listener.exitMuldiv_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMuldiv_expr" ):
                return visitor.visitMuldiv_expr(self)
            else:
                return visitor.visitChildren(self)


    class Int_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_expr" ):
                listener.enterInt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_expr" ):
                listener.exitInt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt_expr" ):
                return visitor.visitInt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Turn_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.start_dir = None # ExprContext
            self.copyFrom(ctx)

        def turn(self):
            return self.getTypedRuleContext(DMFParser.TurnContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn_expr" ):
                listener.enterTurn_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn_expr" ):
                listener.exitTurn_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn_expr" ):
                return visitor.visitTurn_expr(self)
            else:
                return visitor.visitChildren(self)


    class Cond_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.first = None # ExprContext
            self.cond = None # ExprContext
            self.second = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_expr" ):
                listener.enterCond_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_expr" ):
                listener.exitCond_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond_expr" ):
                return visitor.visitCond_expr(self)
            else:
                return visitor.visitChildren(self)


    class Mw_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMw_name_expr" ):
                listener.enterMw_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMw_name_expr" ):
                listener.exitMw_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMw_name_expr" ):
                return visitor.visitMw_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Delta_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelta_expr" ):
                listener.enterDelta_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelta_expr" ):
                listener.exitDelta_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelta_expr" ):
                return visitor.visitDelta_expr(self)
            else:
                return visitor.visitChildren(self)


    class Sample_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.empty = None # Token
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def sample_type(self):
            return self.getTypedRuleContext(DMFParser.Sample_typeContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_expr" ):
                listener.enterSample_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_expr" ):
                listener.exitSample_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_expr" ):
                return visitor.visitSample_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_recip_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_recip_expr" ):
                listener.enterUnit_recip_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_recip_expr" ):
                listener.exitUnit_recip_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_recip_expr" ):
                return visitor.visitUnit_recip_expr(self)
            else:
                return visitor.visitChildren(self)


    class Is_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.pred = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)
        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_expr" ):
                listener.enterIs_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_expr" ):
                listener.exitIs_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_expr" ):
                return visitor.visitIs_expr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = DMFParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Paren_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 304
                self.match(DMFParser.T__19)
                self.state = 305
                self.expr(0)
                self.state = 306
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = DMFParser.Coord_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 308
                self.match(DMFParser.T__19)
                self.state = 309
                localctx.x = self.expr(0)
                self.state = 310
                self.match(DMFParser.T__20)
                self.state = 311
                localctx.y = self.expr(0)
                self.state = 312
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                localctx = DMFParser.Neg_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 314
                self.match(DMFParser.SUB)
                self.state = 315
                localctx.rhs = self.expr(55)
                pass

            elif la_ == 4:
                localctx = DMFParser.Numbered_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 316
                localctx.kind = self.numbered_type()
                self.state = 317
                self.match(DMFParser.T__21)
                self.state = 318
                localctx.which = self.expr(53)
                pass

            elif la_ == 5:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__22:
                    self.state = 320
                    self.match(DMFParser.T__22)


                self.state = 323
                localctx.empty = self.match(DMFParser.T__23)
                self.state = 324
                self.sample_type()
                pass

            elif la_ == 6:
                localctx = DMFParser.Const_rc_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 325
                localctx._INT = self.match(DMFParser.INT)
                self.state = 326
                self.rc((0 if localctx._INT is None else int(localctx._INT.text)))
                pass

            elif la_ == 7:
                localctx = DMFParser.Reagent_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 327
                    self.match(DMFParser.T__33)


                self.state = 330
                self.reagent()
                self.state = 332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 331
                    self.match(DMFParser.T__34)


                pass

            elif la_ == 8:
                localctx = DMFParser.Reagent_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26 or _la==DMFParser.T__33:
                    self.state = 334
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__26 or _la==DMFParser.T__33):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 337
                self.match(DMFParser.T__34)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__35:
                    self.state = 338
                    self.match(DMFParser.T__35)


                self.state = 341
                localctx.which = self.expr(37)
                pass

            elif la_ == 9:
                localctx = DMFParser.Not_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 342
                self.match(DMFParser.NOT)
                self.state = 343
                self.expr(30)
                pass

            elif la_ == 10:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 344
                    self.match(DMFParser.T__26)


                self.state = 347
                self.match(DMFParser.T__38)
                self.state = 348
                self.match(DMFParser.T__39)
                self.state = 349
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 350
                self.match(DMFParser.T__40)
                self.state = 351
                localctx._expr = self.expr(29)
                localctx.vals.append(localctx._expr)
                pass

            elif la_ == 11:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 353
                    self.match(DMFParser.T__26)


                self.state = 356
                self.match(DMFParser.T__38)
                self.state = 357
                self.match(DMFParser.T__39)
                self.state = 358
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 359
                        self.match(DMFParser.T__20)
                        self.state = 360
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass

            elif la_ == 12:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 366
                    self.match(DMFParser.T__26)


                self.state = 369
                self.match(DMFParser.T__38)
                self.state = 370
                self.match(DMFParser.T__39)
                self.state = 371
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 372
                        self.match(DMFParser.T__20)
                        self.state = 373
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 379
                self.match(DMFParser.T__20)
                self.state = 380
                self.match(DMFParser.T__40)
                self.state = 381
                localctx._expr = self.expr(27)
                localctx.vals.append(localctx._expr)
                pass

            elif la_ == 13:
                localctx = DMFParser.Delta_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 383
                self.direction()
                self.state = 384
                localctx.dist = self.expr(24)
                pass

            elif la_ == 14:
                localctx = DMFParser.Dir_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 386
                self.direction()
                pass

            elif la_ == 15:
                localctx = DMFParser.To_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 387
                self.match(DMFParser.T__10)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (DMFParser.T__69 - 70)) | (1 << (DMFParser.T__71 - 70)) | (1 << (DMFParser.T__72 - 70)))) != 0):
                    self.state = 388
                    self.axis()


                self.state = 391
                localctx.which = self.expr(22)
                pass

            elif la_ == 16:
                localctx = DMFParser.Pause_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 392
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__7:
                    self.state = 393
                    self.match(DMFParser.T__7)


                self.state = 396
                localctx.duration = self.expr(21)
                pass

            elif la_ == 17:
                localctx = DMFParser.Prompt_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 401
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__42, DMFParser.T__43]:
                    self.state = 397
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 398
                    self.match(DMFParser.T__7)
                    self.state = 399
                    self.match(DMFParser.T__44)
                    pass
                elif token in [DMFParser.T__45]:
                    self.state = 400
                    self.match(DMFParser.T__45)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 403
                    localctx._expr = self.expr(0)
                    localctx.vals.append(localctx._expr)
                    self.state = 408
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 404
                            self.match(DMFParser.T__20)
                            self.state = 405
                            localctx._expr = self.expr(0)
                            localctx.vals.append(localctx._expr) 
                        self.state = 410
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,38,self._ctx)



                pass

            elif la_ == 18:
                localctx = DMFParser.Print_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 413
                self.match(DMFParser.T__46)
                self.state = 414
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 415
                        self.match(DMFParser.T__20)
                        self.state = 416
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

                pass

            elif la_ == 19:
                localctx = DMFParser.Drop_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 422
                self.match(DMFParser.T__47)
                self.state = 423
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__48 or _la==DMFParser.T__49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 424
                localctx.loc = self.expr(17)
                pass

            elif la_ == 20:
                localctx = DMFParser.Macro_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 425
                self.macro_def()
                pass

            elif la_ == 21:
                localctx = DMFParser.Action_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 426
                self.no_arg_action()
                pass

            elif la_ == 22:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 427
                    self.match(DMFParser.T__33)


                self.state = 430
                self.value_type()
                pass

            elif la_ == 23:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 431
                self.value_type()
                self.state = 432
                localctx.n = self.match(DMFParser.INT)
                pass

            elif la_ == 24:
                localctx = DMFParser.Bool_const_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 434
                localctx.val = self.bool_val()
                pass

            elif la_ == 25:
                localctx = DMFParser.Name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 435
                self.name()
                pass

            elif la_ == 26:
                localctx = DMFParser.Mw_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 436
                self.multi_word_name()
                pass

            elif la_ == 27:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 437
                localctx.which = self.name()
                self.state = 438
                self.match(DMFParser.ASSIGN)
                self.state = 439
                localctx.what = self.expr(6)
                pass

            elif la_ == 28:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 441
                localctx.ptype = self.value_type()
                self.state = 442
                localctx.n = self.match(DMFParser.INT)
                self.state = 443
                self.match(DMFParser.ASSIGN)
                self.state = 444
                localctx.what = self.expr(4)
                pass

            elif la_ == 29:
                localctx = DMFParser.String_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 446
                self.string()
                pass

            elif la_ == 30:
                localctx = DMFParser.Int_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 447
                localctx._INT = self.match(DMFParser.INT)
                pass

            elif la_ == 31:
                localctx = DMFParser.Float_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 448
                self.match(DMFParser.FLOAT)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 571
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                    if la_ == 1:
                        localctx = DMFParser.In_dir_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 451
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 452
                        self.match(DMFParser.T__9)
                        self.state = 453
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 454
                        localctx.d = self.expr(45)
                        pass

                    elif la_ == 2:
                        localctx = DMFParser.Liquid_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 455
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 456
                        self.match(DMFParser.T__36)
                        self.state = 457
                        localctx.which = self.expr(37)
                        pass

                    elif la_ == 3:
                        localctx = DMFParser.Muldiv_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 458
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 459
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.DIV or _la==DMFParser.MUL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 460
                        localctx.rhs = self.expr(36)
                        pass

                    elif la_ == 4:
                        localctx = DMFParser.Addsub_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 461
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 462
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.ADD or _la==DMFParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 463
                        localctx.rhs = self.expr(35)
                        pass

                    elif la_ == 5:
                        localctx = DMFParser.Rel_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 464
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 465
                        self.rel()
                        self.state = 466
                        localctx.rhs = self.expr(34)
                        pass

                    elif la_ == 6:
                        localctx = DMFParser.Is_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 468
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 474
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [DMFParser.T__37]:
                            self.state = 469
                            self.match(DMFParser.T__37)
                            self.state = 471
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                            if la_ == 1:
                                self.state = 470
                                self.match(DMFParser.NOT)


                            pass
                        elif token in [DMFParser.ISNT]:
                            self.state = 473
                            self.match(DMFParser.ISNT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 476
                        localctx.pred = self.expr(32)
                        pass

                    elif la_ == 7:
                        localctx = DMFParser.And_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 477
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 478
                        self.match(DMFParser.T__40)
                        self.state = 479
                        localctx.rhs = self.expr(27)
                        pass

                    elif la_ == 8:
                        localctx = DMFParser.Or_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 480
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 481
                        self.match(DMFParser.T__41)
                        self.state = 482
                        localctx.rhs = self.expr(26)
                        pass

                    elif la_ == 9:
                        localctx = DMFParser.Drop_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 483
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 484
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__48 or _la==DMFParser.T__49):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 485
                        localctx.loc = self.expr(17)
                        pass

                    elif la_ == 10:
                        localctx = DMFParser.Injection_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 486
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 487
                        self.match(DMFParser.INJECT)
                        self.state = 488
                        localctx.what = self.expr(16)
                        pass

                    elif la_ == 11:
                        localctx = DMFParser.Cond_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.first = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 489
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 490
                        self.match(DMFParser.T__0)
                        self.state = 491
                        localctx.cond = self.expr(0)
                        self.state = 492
                        self.match(DMFParser.T__1)
                        self.state = 493
                        localctx.second = self.expr(15)
                        pass

                    elif la_ == 12:
                        localctx = DMFParser.Attr_assign_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 495
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 496
                        self.match(DMFParser.ATTR)
                        self.state = 497
                        self.attr()
                        self.state = 498
                        self.match(DMFParser.ASSIGN)
                        self.state = 499
                        localctx.what = self.expr(6)
                        pass

                    elif la_ == 13:
                        localctx = DMFParser.Function_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.func = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 501
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 502
                        self.match(DMFParser.T__19)
                        self.state = 511
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55) | (1 << DMFParser.T__58) | (1 << DMFParser.T__59) | (1 << DMFParser.T__60) | (1 << DMFParser.T__61) | (1 << DMFParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DMFParser.T__63 - 64)) | (1 << (DMFParser.T__64 - 64)) | (1 << (DMFParser.T__65 - 64)) | (1 << (DMFParser.T__75 - 64)) | (1 << (DMFParser.T__77 - 64)) | (1 << (DMFParser.T__78 - 64)) | (1 << (DMFParser.T__79 - 64)) | (1 << (DMFParser.T__82 - 64)) | (1 << (DMFParser.T__83 - 64)) | (1 << (DMFParser.T__84 - 64)) | (1 << (DMFParser.T__85 - 64)) | (1 << (DMFParser.T__86 - 64)) | (1 << (DMFParser.T__87 - 64)) | (1 << (DMFParser.T__88 - 64)) | (1 << (DMFParser.T__89 - 64)) | (1 << (DMFParser.T__90 - 64)) | (1 << (DMFParser.T__91 - 64)) | (1 << (DMFParser.T__92 - 64)) | (1 << (DMFParser.T__93 - 64)) | (1 << (DMFParser.T__94 - 64)) | (1 << (DMFParser.T__95 - 64)) | (1 << (DMFParser.T__96 - 64)) | (1 << (DMFParser.T__97 - 64)) | (1 << (DMFParser.T__98 - 64)) | (1 << (DMFParser.T__99 - 64)) | (1 << (DMFParser.T__100 - 64)) | (1 << (DMFParser.T__101 - 64)) | (1 << (DMFParser.T__102 - 64)) | (1 << (DMFParser.T__103 - 64)) | (1 << (DMFParser.T__104 - 64)) | (1 << (DMFParser.T__105 - 64)) | (1 << (DMFParser.T__106 - 64)) | (1 << (DMFParser.T__107 - 64)) | (1 << (DMFParser.T__108 - 64)) | (1 << (DMFParser.T__109 - 64)) | (1 << (DMFParser.T__110 - 64)) | (1 << (DMFParser.T__111 - 64)) | (1 << (DMFParser.T__112 - 64)) | (1 << (DMFParser.T__113 - 64)) | (1 << (DMFParser.T__114 - 64)) | (1 << (DMFParser.T__115 - 64)) | (1 << (DMFParser.T__116 - 64)) | (1 << (DMFParser.T__117 - 64)) | (1 << (DMFParser.T__118 - 64)) | (1 << (DMFParser.T__119 - 64)) | (1 << (DMFParser.T__120 - 64)) | (1 << (DMFParser.T__121 - 64)) | (1 << (DMFParser.T__122 - 64)) | (1 << (DMFParser.T__123 - 64)) | (1 << (DMFParser.T__124 - 64)) | (1 << (DMFParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DMFParser.T__127 - 128)) | (1 << (DMFParser.T__128 - 128)) | (1 << (DMFParser.T__133 - 128)) | (1 << (DMFParser.T__158 - 128)) | (1 << (DMFParser.T__159 - 128)) | (1 << (DMFParser.T__160 - 128)) | (1 << (DMFParser.T__161 - 128)) | (1 << (DMFParser.T__162 - 128)) | (1 << (DMFParser.T__163 - 128)) | (1 << (DMFParser.T__164 - 128)) | (1 << (DMFParser.T__165 - 128)) | (1 << (DMFParser.T__168 - 128)) | (1 << (DMFParser.T__169 - 128)) | (1 << (DMFParser.T__170 - 128)) | (1 << (DMFParser.T__171 - 128)) | (1 << (DMFParser.T__172 - 128)) | (1 << (DMFParser.T__173 - 128)) | (1 << (DMFParser.T__174 - 128)) | (1 << (DMFParser.T__175 - 128)) | (1 << (DMFParser.T__176 - 128)) | (1 << (DMFParser.T__177 - 128)) | (1 << (DMFParser.T__178 - 128)) | (1 << (DMFParser.T__179 - 128)) | (1 << (DMFParser.T__180 - 128)) | (1 << (DMFParser.T__181 - 128)) | (1 << (DMFParser.T__182 - 128)) | (1 << (DMFParser.T__183 - 128)) | (1 << (DMFParser.T__184 - 128)) | (1 << (DMFParser.T__185 - 128)) | (1 << (DMFParser.T__186 - 128)) | (1 << (DMFParser.T__187 - 128)) | (1 << (DMFParser.T__188 - 128)) | (1 << (DMFParser.T__189 - 128)) | (1 << (DMFParser.T__190 - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (DMFParser.T__191 - 192)) | (1 << (DMFParser.T__192 - 192)) | (1 << (DMFParser.T__193 - 192)) | (1 << (DMFParser.T__194 - 192)) | (1 << (DMFParser.T__201 - 192)) | (1 << (DMFParser.T__202 - 192)) | (1 << (DMFParser.T__203 - 192)) | (1 << (DMFParser.T__204 - 192)) | (1 << (DMFParser.T__205 - 192)) | (1 << (DMFParser.T__206 - 192)) | (1 << (DMFParser.T__207 - 192)) | (1 << (DMFParser.T__208 - 192)) | (1 << (DMFParser.T__209 - 192)) | (1 << (DMFParser.T__210 - 192)) | (1 << (DMFParser.T__211 - 192)) | (1 << (DMFParser.T__212 - 192)) | (1 << (DMFParser.T__213 - 192)) | (1 << (DMFParser.T__214 - 192)) | (1 << (DMFParser.T__215 - 192)) | (1 << (DMFParser.T__216 - 192)) | (1 << (DMFParser.T__217 - 192)) | (1 << (DMFParser.T__218 - 192)) | (1 << (DMFParser.T__219 - 192)) | (1 << (DMFParser.T__221 - 192)) | (1 << (DMFParser.T__222 - 192)) | (1 << (DMFParser.T__223 - 192)) | (1 << (DMFParser.T__224 - 192)) | (1 << (DMFParser.FUTURE - 192)) | (1 << (DMFParser.INTERACTIVE - 192)) | (1 << (DMFParser.NOT - 192)) | (1 << (DMFParser.OFF - 192)) | (1 << (DMFParser.ON - 192)) | (1 << (DMFParser.SUB - 192)) | (1 << (DMFParser.TOGGLE - 192)) | (1 << (DMFParser.MAYBE - 192)) | (1 << (DMFParser.ID - 192)) | (1 << (DMFParser.INT - 192)) | (1 << (DMFParser.FLOAT - 192)) | (1 << (DMFParser.STRING - 192)))) != 0):
                            self.state = 503
                            localctx._expr = self.expr(0)
                            localctx.args.append(localctx._expr)
                            self.state = 508
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==DMFParser.T__20:
                                self.state = 504
                                self.match(DMFParser.T__20)
                                self.state = 505
                                localctx._expr = self.expr(0)
                                localctx.args.append(localctx._expr)
                                self.state = 510
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 513
                        self.match(DMFParser.CLOSE_PAREN)
                        pass

                    elif la_ == 14:
                        localctx = DMFParser.Delta_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 514
                        if not self.precpred(self._ctx, 54):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 54)")
                        self.state = 515
                        self.direction()
                        pass

                    elif la_ == 15:
                        localctx = DMFParser.Magnitude_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 516
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 517
                        self.match(DMFParser.ATTR)
                        self.state = 518
                        self.match(DMFParser.T__24)
                        self.state = 519
                        self.match(DMFParser.T__9)
                        self.state = 520
                        self.dim_unit()
                        pass

                    elif la_ == 16:
                        localctx = DMFParser.Unit_string_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 521
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 522
                        self.match(DMFParser.T__25)
                        self.state = 524
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.T__26:
                            self.state = 523
                            self.match(DMFParser.T__26)


                        self.state = 526
                        self.match(DMFParser.T__27)
                        self.state = 527
                        self.match(DMFParser.T__9)
                        self.state = 528
                        self.dim_unit()
                        pass

                    elif la_ == 17:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 529
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 530
                        self.match(DMFParser.ATTR)
                        self.state = 531
                        self.attr()
                        self.state = 533
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                        if la_ == 1:
                            self.state = 532
                            self.existence()


                        pass

                    elif la_ == 18:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 535
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 536
                        self.match(DMFParser.ATTR)
                        self.state = 538
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.MAYBE:
                            self.state = 537
                            self.match(DMFParser.MAYBE)


                        self.state = 540
                        self.attr()
                        pass

                    elif la_ == 19:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 541
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 542
                        self.match(DMFParser.ATTR)
                        self.state = 543
                        self.match(DMFParser.T__19)
                        self.state = 544
                        self.match(DMFParser.MAYBE)
                        self.state = 545
                        self.match(DMFParser.CLOSE_PAREN)
                        self.state = 546
                        self.attr()
                        pass

                    elif la_ == 20:
                        localctx = DMFParser.Existence_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.val = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 547
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 548
                        self.existence()
                        pass

                    elif la_ == 21:
                        localctx = DMFParser.Turn_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.start_dir = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 549
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 550
                        self.match(DMFParser.T__28)
                        self.state = 551
                        self.turn()
                        pass

                    elif la_ == 22:
                        localctx = DMFParser.N_rc_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 552
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 553
                        self.rc(0)
                        pass

                    elif la_ == 23:
                        localctx = DMFParser.Unit_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 554
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 555
                        self.dim_unit()
                        pass

                    elif la_ == 24:
                        localctx = DMFParser.Unit_recip_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 556
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 557
                        self.match(DMFParser.T__31)
                        self.state = 558
                        self.dim_unit()
                        pass

                    elif la_ == 25:
                        localctx = DMFParser.Temperature_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 559
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 560
                        self.match(DMFParser.T__32)
                        pass

                    elif la_ == 26:
                        localctx = DMFParser.Has_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 561
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 562
                        self.possession()
                        self.state = 563
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__22 or _la==DMFParser.T__26):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 564
                        self.attr()
                        pass

                    elif la_ == 27:
                        localctx = DMFParser.Index_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 566
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 567
                        self.match(DMFParser.T__14)
                        self.state = 568
                        localctx.which = self.expr(0)
                        self.state = 569
                        self.match(DMFParser.CLOSE_BRACKET)
                        pass

             
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExistenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_existence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence" ):
                listener.enterExistence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence" ):
                listener.exitExistence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence" ):
                return visitor.visitExistence(self)
            else:
                return visitor.visitChildren(self)




    def existence(self):

        localctx = DMFParser.ExistenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_existence)
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.match(DMFParser.T__50)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.match(DMFParser.T__51)
                self.state = 579
                self.match(DMFParser.NOT)
                self.state = 580
                self.match(DMFParser.T__52)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 582
                self.match(DMFParser.T__53)
                self.state = 583
                self.match(DMFParser.T__52)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 585
                self.match(DMFParser.T__54)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 587
                self.match(DMFParser.T__37)
                self.state = 588
                self.match(DMFParser.NOT)
                self.state = 589
                self.match(DMFParser.T__55)
                localctx.polarity=True
                pass
            elif token in [DMFParser.ISNT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 591
                self.match(DMFParser.ISNT)
                self.state = 592
                self.match(DMFParser.T__55)
                localctx.polarity=True
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_possession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossession" ):
                listener.enterPossession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossession" ):
                listener.exitPossession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPossession" ):
                return visitor.visitPossession(self)
            else:
                return visitor.visitChildren(self)




    def possession(self):

        localctx = DMFParser.PossessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_possession)
        try:
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.match(DMFParser.T__56)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.match(DMFParser.T__51)
                self.state = 599
                self.match(DMFParser.NOT)
                self.state = 600
                self.match(DMFParser.T__57)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 602
                self.match(DMFParser.T__53)
                self.state = 603
                self.match(DMFParser.T__57)
                localctx.polarity=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReagentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None


        def getRuleIndex(self):
            return DMFParser.RULE_reagent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent" ):
                listener.enterReagent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent" ):
                listener.exitReagent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent" ):
                return visitor.visitReagent(self)
            else:
                return visitor.visitChildren(self)




    def reagent(self):

        localctx = DMFParser.ReagentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reagent)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(DMFParser.T__58)
                localctx.r = unknown_reagent
                pass
            elif token in [DMFParser.T__59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.match(DMFParser.T__59)
                localctx.r = waste_reagent
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = DMFParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__13, DMFParser.T__60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__13 or _la==DMFParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__12, DMFParser.T__61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__12 or _la==DMFParser.T__61):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.DOWN
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__62, DMFParser.T__63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 619
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__62 or _la==DMFParser.T__63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.LEFT
                localctx.verticalp=False
                pass
            elif token in [DMFParser.T__64, DMFParser.T__65]:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__64 or _la==DMFParser.T__65):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TurnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None


        def getRuleIndex(self):
            return DMFParser.RULE_turn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn" ):
                listener.enterTurn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn" ):
                listener.exitTurn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn" ):
                return visitor.visitTurn(self)
            else:
                return visitor.visitChildren(self)




    def turn(self):

        localctx = DMFParser.TurnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_turn)
        self._la = 0 # Token type
        try:
            self.state = 633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__64, DMFParser.T__66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__64 or _la==DMFParser.T__66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.RIGHT
                pass
            elif token in [DMFParser.T__62, DMFParser.T__67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__62 or _la==DMFParser.T__67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.LEFT
                pass
            elif token in [DMFParser.T__68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 631
                self.match(DMFParser.T__68)
                localctx.t = Turn.AROUND
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, n:int=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None
            self.d = None
            self.verticalp = None
            self.n = n


        def getRuleIndex(self):
            return DMFParser.RULE_rc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRc" ):
                listener.enterRc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRc" ):
                listener.exitRc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRc" ):
                return visitor.visitRc(self)
            else:
                return visitor.visitChildren(self)




    def rc(self, n:int):

        localctx = DMFParser.RcContext(self, self._ctx, self.state, n)
        self.enterRule(localctx, 34, self.RULE_rc)
        self._la = 0 # Token type
        try:
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 636
                self.match(DMFParser.T__69)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.match(DMFParser.T__70)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 643
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__71 or _la==DMFParser.T__72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 646
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__73 or _la==DMFParser.T__74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AxisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_axis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxis" ):
                listener.enterAxis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxis" ):
                listener.exitAxis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAxis" ):
                return visitor.visitAxis(self)
            else:
                return visitor.visitChildren(self)




    def axis(self):

        localctx = DMFParser.AxisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_axis)
        self._la = 0 # Token type
        try:
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(DMFParser.T__69)
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__71, DMFParser.T__72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__71 or _la==DMFParser.T__72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_header(self):
            return self.getTypedRuleContext(DMFParser.Macro_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def" ):
                listener.enterMacro_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def" ):
                listener.exitMacro_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def" ):
                return visitor.visitMacro_def(self)
            else:
                return visitor.visitChildren(self)




    def macro_def(self):

        localctx = DMFParser.Macro_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_macro_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.macro_header()
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2, DMFParser.T__4]:
                self.state = 658
                self.compound()
                pass
            elif token in [DMFParser.T__9, DMFParser.T__10, DMFParser.T__12, DMFParser.T__13, DMFParser.T__16, DMFParser.T__19, DMFParser.T__22, DMFParser.T__23, DMFParser.T__26, DMFParser.T__27, DMFParser.T__29, DMFParser.T__30, DMFParser.T__31, DMFParser.T__33, DMFParser.T__34, DMFParser.T__38, DMFParser.T__39, DMFParser.T__42, DMFParser.T__43, DMFParser.T__45, DMFParser.T__46, DMFParser.T__47, DMFParser.T__55, DMFParser.T__58, DMFParser.T__59, DMFParser.T__60, DMFParser.T__61, DMFParser.T__62, DMFParser.T__63, DMFParser.T__64, DMFParser.T__65, DMFParser.T__75, DMFParser.T__77, DMFParser.T__78, DMFParser.T__79, DMFParser.T__82, DMFParser.T__83, DMFParser.T__84, DMFParser.T__85, DMFParser.T__86, DMFParser.T__87, DMFParser.T__88, DMFParser.T__89, DMFParser.T__90, DMFParser.T__91, DMFParser.T__92, DMFParser.T__93, DMFParser.T__94, DMFParser.T__95, DMFParser.T__96, DMFParser.T__97, DMFParser.T__98, DMFParser.T__99, DMFParser.T__100, DMFParser.T__101, DMFParser.T__102, DMFParser.T__103, DMFParser.T__104, DMFParser.T__105, DMFParser.T__106, DMFParser.T__107, DMFParser.T__108, DMFParser.T__109, DMFParser.T__110, DMFParser.T__111, DMFParser.T__112, DMFParser.T__113, DMFParser.T__114, DMFParser.T__115, DMFParser.T__116, DMFParser.T__117, DMFParser.T__118, DMFParser.T__119, DMFParser.T__120, DMFParser.T__121, DMFParser.T__122, DMFParser.T__123, DMFParser.T__124, DMFParser.T__126, DMFParser.T__127, DMFParser.T__128, DMFParser.T__133, DMFParser.T__158, DMFParser.T__159, DMFParser.T__160, DMFParser.T__161, DMFParser.T__162, DMFParser.T__163, DMFParser.T__164, DMFParser.T__165, DMFParser.T__168, DMFParser.T__169, DMFParser.T__170, DMFParser.T__171, DMFParser.T__172, DMFParser.T__173, DMFParser.T__174, DMFParser.T__175, DMFParser.T__176, DMFParser.T__177, DMFParser.T__178, DMFParser.T__179, DMFParser.T__180, DMFParser.T__181, DMFParser.T__182, DMFParser.T__183, DMFParser.T__184, DMFParser.T__185, DMFParser.T__186, DMFParser.T__187, DMFParser.T__188, DMFParser.T__189, DMFParser.T__190, DMFParser.T__191, DMFParser.T__192, DMFParser.T__193, DMFParser.T__194, DMFParser.T__201, DMFParser.T__202, DMFParser.T__203, DMFParser.T__204, DMFParser.T__205, DMFParser.T__206, DMFParser.T__207, DMFParser.T__208, DMFParser.T__209, DMFParser.T__210, DMFParser.T__211, DMFParser.T__212, DMFParser.T__213, DMFParser.T__214, DMFParser.T__215, DMFParser.T__216, DMFParser.T__217, DMFParser.T__218, DMFParser.T__219, DMFParser.T__221, DMFParser.T__222, DMFParser.T__223, DMFParser.T__224, DMFParser.FUTURE, DMFParser.INTERACTIVE, DMFParser.NOT, DMFParser.OFF, DMFParser.ON, DMFParser.SUB, DMFParser.TOGGLE, DMFParser.MAYBE, DMFParser.ID, DMFParser.INT, DMFParser.FLOAT, DMFParser.STRING]:
                self.state = 659
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_type = None # Value_typeContext

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ParamContext)
            else:
                return self.getTypedRuleContext(DMFParser.ParamContext,i)


        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_header" ):
                listener.enterMacro_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_header" ):
                listener.exitMacro_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_header" ):
                return visitor.visitMacro_header(self)
            else:
                return visitor.visitChildren(self)




    def macro_header(self):

        localctx = DMFParser.Macro_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_macro_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(DMFParser.T__75)
            self.state = 663
            self.match(DMFParser.T__19)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__47) | (1 << DMFParser.T__55))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (DMFParser.T__78 - 79)) | (1 << (DMFParser.T__82 - 79)) | (1 << (DMFParser.T__83 - 79)) | (1 << (DMFParser.T__84 - 79)) | (1 << (DMFParser.T__85 - 79)) | (1 << (DMFParser.T__86 - 79)) | (1 << (DMFParser.T__87 - 79)) | (1 << (DMFParser.T__88 - 79)) | (1 << (DMFParser.T__89 - 79)) | (1 << (DMFParser.T__90 - 79)) | (1 << (DMFParser.T__91 - 79)) | (1 << (DMFParser.T__92 - 79)) | (1 << (DMFParser.T__93 - 79)) | (1 << (DMFParser.T__94 - 79)) | (1 << (DMFParser.T__95 - 79)) | (1 << (DMFParser.T__96 - 79)) | (1 << (DMFParser.T__97 - 79)) | (1 << (DMFParser.T__98 - 79)) | (1 << (DMFParser.T__99 - 79)) | (1 << (DMFParser.T__100 - 79)) | (1 << (DMFParser.T__101 - 79)) | (1 << (DMFParser.T__102 - 79)) | (1 << (DMFParser.T__103 - 79)) | (1 << (DMFParser.T__104 - 79)) | (1 << (DMFParser.T__105 - 79)) | (1 << (DMFParser.T__106 - 79)) | (1 << (DMFParser.T__107 - 79)) | (1 << (DMFParser.T__108 - 79)) | (1 << (DMFParser.T__109 - 79)) | (1 << (DMFParser.T__110 - 79)) | (1 << (DMFParser.T__111 - 79)) | (1 << (DMFParser.T__112 - 79)) | (1 << (DMFParser.T__113 - 79)) | (1 << (DMFParser.T__114 - 79)) | (1 << (DMFParser.T__115 - 79)) | (1 << (DMFParser.T__116 - 79)) | (1 << (DMFParser.T__117 - 79)) | (1 << (DMFParser.T__118 - 79)) | (1 << (DMFParser.T__119 - 79)) | (1 << (DMFParser.T__120 - 79)) | (1 << (DMFParser.T__121 - 79)) | (1 << (DMFParser.T__122 - 79)) | (1 << (DMFParser.T__123 - 79)) | (1 << (DMFParser.T__124 - 79)) | (1 << (DMFParser.T__126 - 79)) | (1 << (DMFParser.T__127 - 79)) | (1 << (DMFParser.T__128 - 79)) | (1 << (DMFParser.T__133 - 79)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (DMFParser.T__158 - 159)) | (1 << (DMFParser.T__159 - 159)) | (1 << (DMFParser.T__160 - 159)) | (1 << (DMFParser.T__161 - 159)) | (1 << (DMFParser.T__162 - 159)) | (1 << (DMFParser.T__163 - 159)) | (1 << (DMFParser.T__164 - 159)) | (1 << (DMFParser.T__165 - 159)) | (1 << (DMFParser.T__168 - 159)) | (1 << (DMFParser.T__169 - 159)) | (1 << (DMFParser.T__170 - 159)) | (1 << (DMFParser.T__171 - 159)) | (1 << (DMFParser.T__172 - 159)) | (1 << (DMFParser.T__173 - 159)) | (1 << (DMFParser.T__174 - 159)) | (1 << (DMFParser.T__175 - 159)) | (1 << (DMFParser.T__176 - 159)) | (1 << (DMFParser.T__177 - 159)) | (1 << (DMFParser.T__178 - 159)) | (1 << (DMFParser.T__179 - 159)) | (1 << (DMFParser.T__180 - 159)) | (1 << (DMFParser.T__181 - 159)) | (1 << (DMFParser.T__182 - 159)) | (1 << (DMFParser.T__183 - 159)) | (1 << (DMFParser.T__184 - 159)) | (1 << (DMFParser.T__185 - 159)) | (1 << (DMFParser.T__186 - 159)) | (1 << (DMFParser.T__187 - 159)) | (1 << (DMFParser.T__188 - 159)) | (1 << (DMFParser.T__189 - 159)) | (1 << (DMFParser.T__190 - 159)) | (1 << (DMFParser.T__191 - 159)) | (1 << (DMFParser.T__192 - 159)) | (1 << (DMFParser.T__193 - 159)) | (1 << (DMFParser.T__194 - 159)) | (1 << (DMFParser.T__213 - 159)) | (1 << (DMFParser.T__214 - 159)) | (1 << (DMFParser.T__215 - 159)) | (1 << (DMFParser.T__216 - 159)) | (1 << (DMFParser.T__217 - 159)) | (1 << (DMFParser.T__218 - 159)) | (1 << (DMFParser.T__219 - 159)) | (1 << (DMFParser.T__221 - 159)))) != 0) or ((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & ((1 << (DMFParser.T__222 - 223)) | (1 << (DMFParser.T__223 - 223)) | (1 << (DMFParser.T__224 - 223)) | (1 << (DMFParser.FUTURE - 223)) | (1 << (DMFParser.INTERACTIVE - 223)) | (1 << (DMFParser.OFF - 223)) | (1 << (DMFParser.ON - 223)) | (1 << (DMFParser.MAYBE - 223)) | (1 << (DMFParser.ID - 223)))) != 0):
                self.state = 664
                self.param()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==DMFParser.T__20:
                    self.state = 665
                    self.match(DMFParser.T__20)
                    self.state = 666
                    self.param()
                    self.state = 671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 674
            self.match(DMFParser.CLOSE_PAREN)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DMFParser.T__76:
                self.state = 675
                self.match(DMFParser.T__76)
                self.state = 676
                localctx.ret_type = self.value_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self.deprecated = None
            self._value_type = None # Value_typeContext
            self._INT = None # Token
            self._name = None # NameContext

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = DMFParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__22 or _la==DMFParser.T__26:
                    self.state = 679
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__22 or _la==DMFParser.T__26):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 682
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                self.state = 687
                localctx._INT = self.match(DMFParser.INT)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 690
                localctx._value_type = self.value_type()
                self.state = 691
                localctx._name = self.name()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 695
                localctx._name = self.name()
                self.state = 696
                self.match(DMFParser.INJECT)
                self.state = 697
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.deprecated=True
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_arg_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def TOGGLE(self):
            return self.getToken(DMFParser.TOGGLE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_no_arg_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_arg_action" ):
                listener.enterNo_arg_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_arg_action" ):
                listener.exitNo_arg_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_arg_action" ):
                return visitor.visitNo_arg_action(self)
            else:
                return visitor.visitChildren(self)




    def no_arg_action(self):

        localctx = DMFParser.No_arg_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_no_arg_action)
        self._la = 0 # Token type
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.match(DMFParser.T__77)
                self.state = 705
                self.match(DMFParser.ON)
                localctx.which="TURN-ON"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(DMFParser.T__77)
                self.state = 708
                self.match(DMFParser.OFF)
                localctx.which="TURN-OFF"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                self.match(DMFParser.TOGGLE)
                self.state = 712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 711
                    self.match(DMFParser.T__78)


                localctx.which="TOGGLE"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 715
                self.match(DMFParser.T__79)
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 716
                    self.match(DMFParser.T__80)
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__33:
                        self.state = 717
                        self.match(DMFParser.T__33)


                    self.state = 720
                    self.match(DMFParser.T__81)


                localctx.which="REMOVE-FROM-BOARD"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 724
                self.match(DMFParser.T__82)
                self.state = 725
                self.match(DMFParser.T__83)
                localctx.which="RESET PADS"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 727
                self.match(DMFParser.T__82)
                self.state = 728
                self.match(DMFParser.T__84)
                localctx.which="RESET MAGNETS"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 730
                self.match(DMFParser.T__82)
                self.state = 734
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__85]:
                    self.state = 731
                    self.match(DMFParser.T__85)
                    pass
                elif token in [DMFParser.T__86]:
                    self.state = 732
                    self.match(DMFParser.T__86)
                    self.state = 733
                    self.match(DMFParser.T__87)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.which="RESET HEATERS"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 737
                self.match(DMFParser.T__82)
                self.state = 738
                self.match(DMFParser.T__88)
                localctx.which="RESET CHILLERS"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 740
                self.match(DMFParser.T__82)
                self.state = 741
                self.match(DMFParser.T__89)
                localctx.which="RESET ALL"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_future_type = None # Not_future_typeContext

        def FUTURE(self):
            return self.getToken(DMFParser.FUTURE, 0)

        def not_future_type(self):
            return self.getTypedRuleContext(DMFParser.Not_future_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_type" ):
                listener.enterValue_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_type" ):
                listener.exitValue_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_type" ):
                return visitor.visitValue_type(self)
            else:
                return visitor.visitChildren(self)




    def value_type(self):

        localctx = DMFParser.Value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_value_type)
        try:
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.match(DMFParser.FUTURE)
                self.state = 746
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(DMFParser.T__19)
                self.state = 750
                self.match(DMFParser.FUTURE)
                self.state = 751
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 752
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 755
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_future_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_maybe_type = None # Not_maybe_typeContext

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)

        def not_maybe_type(self):
            return self.getTypedRuleContext(DMFParser.Not_maybe_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_not_future_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_future_type" ):
                listener.enterNot_future_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_future_type" ):
                listener.exitNot_future_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_future_type" ):
                return visitor.visitNot_future_type(self)
            else:
                return visitor.visitChildren(self)




    def not_future_type(self):

        localctx = DMFParser.Not_future_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_not_future_type)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.MAYBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.match(DMFParser.MAYBE)
                self.state = 761
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.match(DMFParser.T__19)
                self.state = 765
                self.match(DMFParser.MAYBE)
                self.state = 766
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 767
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__27, DMFParser.T__29, DMFParser.T__30, DMFParser.T__34, DMFParser.T__47, DMFParser.T__78, DMFParser.T__86, DMFParser.T__90, DMFParser.T__91, DMFParser.T__92, DMFParser.T__93, DMFParser.T__94, DMFParser.T__95, DMFParser.T__96, DMFParser.T__98, DMFParser.T__99, DMFParser.T__100, DMFParser.T__101, DMFParser.T__102, DMFParser.T__104, DMFParser.T__105, DMFParser.T__106, DMFParser.T__107, DMFParser.T__108, DMFParser.T__109, DMFParser.T__112, DMFParser.T__113, DMFParser.T__114, DMFParser.T__115, DMFParser.T__116, DMFParser.T__118, DMFParser.T__119, DMFParser.T__120, DMFParser.T__122, DMFParser.T__123, DMFParser.T__124, DMFParser.T__127]:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_maybe_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sample_type = None # Sample_typeContext
            self._atomic_type = None # Atomic_typeContext

        def sample_type(self):
            return self.getTypedRuleContext(DMFParser.Sample_typeContext,0)


        def atomic_type(self):
            return self.getTypedRuleContext(DMFParser.Atomic_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_not_maybe_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_maybe_type" ):
                listener.enterNot_maybe_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_maybe_type" ):
                listener.exitNot_maybe_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_maybe_type" ):
                return visitor.visitNot_maybe_type(self)
            else:
                return visitor.visitChildren(self)




    def not_maybe_type(self):

        localctx = DMFParser.Not_maybe_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_not_maybe_type)
        try:
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                localctx._sample_type = self.sample_type()
                localctx.type=localctx._sample_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                localctx._atomic_type = self.atomic_type()
                localctx.type=localctx._atomic_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sampleable_type = None # Sampleable_typeContext

        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sample_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_type" ):
                listener.enterSample_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_type" ):
                listener.exitSample_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_type" ):
                return visitor.visitSample_type(self)
            else:
                return visitor.visitChildren(self)




    def sample_type(self):

        localctx = DMFParser.Sample_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sample_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            localctx._sampleable_type = self.sampleable_type()
            self.state = 784
            self.match(DMFParser.T__38)
            localctx.type=localctx._sampleable_type.type.sample
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._component_type = None # Component_typeContext
            self._sampleable_type = None # Sampleable_typeContext

        def component_type(self):
            return self.getTypedRuleContext(DMFParser.Component_typeContext,0)


        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_atomic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_type" ):
                listener.enterAtomic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_type" ):
                listener.exitAtomic_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_type" ):
                return visitor.visitAtomic_type(self)
            else:
                return visitor.visitChildren(self)




    def atomic_type(self):

        localctx = DMFParser.Atomic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_atomic_type)
        self._la = 0 # Token type
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(DMFParser.T__47)
                localctx.type=Type.DROP
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(DMFParser.T__27)
                localctx.type=Type.STRING
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 791
                self.match(DMFParser.T__78)
                localctx.type=Type.BINARY_STATE
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 793
                self.match(DMFParser.T__90)
                localctx.type=Type.BINARY_CPT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 795
                self.match(DMFParser.T__91)
                localctx.type=Type.DELTA
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 797
                self.match(DMFParser.T__92)
                localctx.type=Type.MOTION
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 799
                self.match(DMFParser.T__93)
                localctx.type=Type.DELAY
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 801
                self.match(DMFParser.T__94)
                localctx.type=Type.BOOL
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 803
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.DIR
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 805
                self.match(DMFParser.T__34)
                localctx.type=Type.REAGENT
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 807
                self.match(DMFParser.T__95)
                localctx.type=Type.LIQUID
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 809
                self.match(DMFParser.T__96)
                self.state = 810
                self.match(DMFParser.T__97)
                localctx.type=Type.SENSOR_READING
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 812
                self.match(DMFParser.T__98)
                self.state = 813
                self.match(DMFParser.T__97)
                localctx.type=Type.ESELOG_READING
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 815
                localctx._component_type = self.component_type()
                localctx.type=localctx._component_type.type
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 818
                localctx._sampleable_type = self.sampleable_type()
                localctx.type=localctx._sampleable_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sampleable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._quantity_type = None # Quantity_typeContext

        def quantity_type(self):
            return self.getTypedRuleContext(DMFParser.Quantity_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sampleable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleable_type" ):
                listener.enterSampleable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleable_type" ):
                listener.exitSampleable_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleable_type" ):
                return visitor.visitSampleable_type(self)
            else:
                return visitor.visitChildren(self)




    def sampleable_type(self):

        localctx = DMFParser.Sampleable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sampleable_type)
        self._la = 0 # Token type
        try:
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 823
                self.match(DMFParser.T__99)
                localctx.type=Type.INT
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.match(DMFParser.T__100)
                localctx.type=Type.FLOAT
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__101 or _la==DMFParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 828
                    self.match(DMFParser.T__103)


                localctx.type=Type.ABS_TEMP
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.match(DMFParser.T__104)
                localctx.type=Type.TIMESTAMP
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 834
                localctx._quantity_type = self.quantity_type()
                localctx.type=localctx._quantity_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantity_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_quantity_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantity_type" ):
                listener.enterQuantity_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantity_type" ):
                listener.exitQuantity_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantity_type" ):
                return visitor.visitQuantity_type(self)
            else:
                return visitor.visitChildren(self)




    def quantity_type(self):

        localctx = DMFParser.Quantity_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_quantity_type)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.match(DMFParser.T__105)
                localctx.type=Type.TIME
                pass
            elif token in [DMFParser.T__106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.match(DMFParser.T__106)
                localctx.type=Time.FREQUENCY
                pass
            elif token in [DMFParser.T__107]:
                self.enterOuterAlt(localctx, 3)
                self.state = 843
                self.match(DMFParser.T__107)
                localctx.type=Type.TICKS
                pass
            elif token in [DMFParser.T__108]:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.match(DMFParser.T__108)
                localctx.type=Type.VOLUME
                pass
            elif token in [DMFParser.T__109]:
                self.enterOuterAlt(localctx, 5)
                self.state = 847
                self.match(DMFParser.T__109)
                localctx.type=Type.VOLTAGE
                pass
            elif token in [DMFParser.T__101, DMFParser.T__102]:
                self.enterOuterAlt(localctx, 6)
                self.state = 849
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__101 or _la==DMFParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 850
                _la = self._input.LA(1)
                if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (DMFParser.T__91 - 92)) | (1 << (DMFParser.T__110 - 92)) | (1 << (DMFParser.T__111 - 92)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.REL_TEMP
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_component_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_type" ):
                listener.enterComponent_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_type" ):
                listener.exitComponent_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponent_type" ):
                return visitor.visitComponent_type(self)
            else:
                return visitor.visitChildren(self)




    def component_type(self):

        localctx = DMFParser.Component_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_component_type)
        self._la = 0 # Token type
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(DMFParser.T__112)
                localctx.type=Type.PAD
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__113:
                    self.state = 856
                    self.match(DMFParser.T__113)


                self.state = 859
                self.match(DMFParser.T__114)
                localctx.type=Type.PIPETTING_TARGET
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 861
                self.match(DMFParser.T__115)
                localctx.type=Type.WELL
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 863
                    self.match(DMFParser.T__116)
                    self.state = 864
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__103 or _la==DMFParser.T__117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__116:
                        self.state = 865
                        self.match(DMFParser.T__116)


                    self.state = 868
                    self.match(DMFParser.T__118)
                    pass


                localctx.type=Type.EXTRACTION_POINT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 872
                self.match(DMFParser.T__115)
                self.state = 873
                self.match(DMFParser.T__112)
                localctx.type=Type.WELL_PAD
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__115:
                    self.state = 875
                    self.match(DMFParser.T__115)


                self.state = 878
                self.match(DMFParser.T__119)
                localctx.type=Type.WELL_GATE
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 883
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__120]:
                    self.state = 880
                    self.match(DMFParser.T__120)
                    pass
                elif token in [DMFParser.T__86]:
                    self.state = 881
                    self.match(DMFParser.T__86)
                    self.state = 882
                    self.match(DMFParser.T__121)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.type=Type.HEATER
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 886
                self.match(DMFParser.T__122)
                localctx.type=Type.CHILLER
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 888
                self.match(DMFParser.T__123)
                localctx.type=Type.MAGNET
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 890
                self.match(DMFParser.T__124)
                self.state = 891
                self.match(DMFParser.T__125)
                localctx.type=Type.POWER_SUPPLY
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 893
                self.match(DMFParser.T__124)
                self.state = 894
                self.match(DMFParser.T__126)
                localctx.type=Type.POWER_MODE
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 896
                self.match(DMFParser.T__127)
                localctx.type=Type.FAN
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 898
                self.match(DMFParser.T__96)
                localctx.type=Type.SENSOR
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 900
                self.match(DMFParser.T__98)
                localctx.type=Type.ESELOG
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dim_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unit = None


        def getRuleIndex(self):
            return DMFParser.RULE_dim_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDim_unit" ):
                listener.enterDim_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDim_unit" ):
                listener.exitDim_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDim_unit" ):
                return visitor.visitDim_unit(self)
            else:
                return visitor.visitChildren(self)




    def dim_unit(self):

        localctx = DMFParser.Dim_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dim_unit)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__128, DMFParser.T__129, DMFParser.T__130, DMFParser.T__131, DMFParser.T__132]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                _la = self._input.LA(1)
                if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (DMFParser.T__128 - 129)) | (1 << (DMFParser.T__129 - 129)) | (1 << (DMFParser.T__130 - 129)) | (1 << (DMFParser.T__131 - 129)) | (1 << (DMFParser.T__132 - 129)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.sec
                pass
            elif token in [DMFParser.T__133, DMFParser.T__134, DMFParser.T__135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                _la = self._input.LA(1)
                if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (DMFParser.T__133 - 134)) | (1 << (DMFParser.T__134 - 134)) | (1 << (DMFParser.T__135 - 134)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.ms
                pass
            elif token in [DMFParser.T__136, DMFParser.T__137, DMFParser.T__138, DMFParser.T__139, DMFParser.T__140, DMFParser.T__141]:
                self.enterOuterAlt(localctx, 3)
                self.state = 908
                _la = self._input.LA(1)
                if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (DMFParser.T__136 - 137)) | (1 << (DMFParser.T__137 - 137)) | (1 << (DMFParser.T__138 - 137)) | (1 << (DMFParser.T__139 - 137)) | (1 << (DMFParser.T__140 - 137)) | (1 << (DMFParser.T__141 - 137)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.uL
                pass
            elif token in [DMFParser.T__142, DMFParser.T__143, DMFParser.T__144, DMFParser.T__145, DMFParser.T__146, DMFParser.T__147]:
                self.enterOuterAlt(localctx, 4)
                self.state = 910
                _la = self._input.LA(1)
                if not(((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (DMFParser.T__142 - 143)) | (1 << (DMFParser.T__143 - 143)) | (1 << (DMFParser.T__144 - 143)) | (1 << (DMFParser.T__145 - 143)) | (1 << (DMFParser.T__146 - 143)) | (1 << (DMFParser.T__147 - 143)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.mL
                pass
            elif token in [DMFParser.T__107, DMFParser.T__148]:
                self.enterOuterAlt(localctx, 5)
                self.state = 912
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__107 or _la==DMFParser.T__148):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=ticks
                pass
            elif token in [DMFParser.T__47, DMFParser.T__149]:
                self.enterOuterAlt(localctx, 6)
                self.state = 914
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__47 or _la==DMFParser.T__149):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=EnvRelativeUnit.DROP
                pass
            elif token in [DMFParser.T__150, DMFParser.T__151, DMFParser.T__152]:
                self.enterOuterAlt(localctx, 7)
                self.state = 916
                _la = self._input.LA(1)
                if not(((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (DMFParser.T__150 - 151)) | (1 << (DMFParser.T__151 - 151)) | (1 << (DMFParser.T__152 - 151)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.volts
                pass
            elif token in [DMFParser.T__153, DMFParser.T__154, DMFParser.T__155]:
                self.enterOuterAlt(localctx, 8)
                self.state = 918
                _la = self._input.LA(1)
                if not(((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (DMFParser.T__153 - 154)) | (1 << (DMFParser.T__154 - 154)) | (1 << (DMFParser.T__155 - 154)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.millivolts
                pass
            elif token in [DMFParser.T__156, DMFParser.T__157]:
                self.enterOuterAlt(localctx, 9)
                self.state = 920
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__156 or _la==DMFParser.T__157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.hertz
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numbered_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None


        def getRuleIndex(self):
            return DMFParser.RULE_numbered_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_type" ):
                listener.enterNumbered_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_type" ):
                listener.exitNumbered_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_type" ):
                return visitor.visitNumbered_type(self)
            else:
                return visitor.visitChildren(self)




    def numbered_type(self):

        localctx = DMFParser.Numbered_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_numbered_type)
        self._la = 0 # Token type
        try:
            self.state = 945
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(DMFParser.T__115)
                localctx.kind=NumberedItem.WELL
                pass
            elif token in [DMFParser.T__86, DMFParser.T__120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__120]:
                    self.state = 926
                    self.match(DMFParser.T__120)
                    pass
                elif token in [DMFParser.T__86]:
                    self.state = 927
                    self.match(DMFParser.T__86)
                    self.state = 928
                    self.match(DMFParser.T__121)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.kind=NumberedItem.HEATER
                pass
            elif token in [DMFParser.T__122]:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                self.match(DMFParser.T__122)
                localctx.kind=NumberedItem.CHILLER
                pass
            elif token in [DMFParser.T__123]:
                self.enterOuterAlt(localctx, 4)
                self.state = 934
                self.match(DMFParser.T__123)
                localctx.kind=NumberedItem.MAGNET
                pass
            elif token in [DMFParser.T__116, DMFParser.T__118]:
                self.enterOuterAlt(localctx, 5)
                self.state = 942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 936
                    self.match(DMFParser.T__116)
                    self.state = 937
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__103 or _la==DMFParser.T__117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__116:
                        self.state = 938
                        self.match(DMFParser.T__116)


                    self.state = 941
                    self.match(DMFParser.T__118)
                    pass


                localctx.kind=NumberedItem.EXTRACTION_POINT
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinimumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_minimum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinimum" ):
                listener.enterMinimum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinimum" ):
                listener.exitMinimum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinimum" ):
                return visitor.visitMinimum(self)
            else:
                return visitor.visitChildren(self)




    def minimum(self):

        localctx = DMFParser.MinimumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_minimum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaximumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_maximum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaximum" ):
                listener.enterMaximum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaximum" ):
                listener.exitMaximum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaximum" ):
                return visitor.visitMaximum(self)
            else:
                return visitor.visitChildren(self)




    def maximum(self):

        localctx = DMFParser.MaximumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_maximum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__160 or _la==DMFParser.T__161):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Min_maxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minimum(self):
            return self.getTypedRuleContext(DMFParser.MinimumContext,0)


        def maximum(self):
            return self.getTypedRuleContext(DMFParser.MaximumContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_min_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMin_max" ):
                listener.enterMin_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMin_max" ):
                listener.exitMin_max(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMin_max" ):
                return visitor.visitMin_max(self)
            else:
                return visitor.visitChildren(self)




    def min_max(self):

        localctx = DMFParser.Min_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_min_max)
        try:
            self.state = 953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__158, DMFParser.T__159]:
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.minimum()
                pass
            elif token in [DMFParser.T__160, DMFParser.T__161]:
                self.enterOuterAlt(localctx, 2)
                self.state = 952
                self.maximum()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = DMFParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.state = 1048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(DMFParser.T__16)
                self.state = 956
                self.match(DMFParser.T__112)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.match(DMFParser.T__162)
                self.state = 958
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__163 or _la==DMFParser.T__164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 959
                self.match(DMFParser.T__165)
                self.state = 960
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__163 or _la==DMFParser.T__164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 961
                self.match(DMFParser.T__16)
                self.state = 962
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 963
                self.match(DMFParser.T__166)
                self.state = 964
                self.match(DMFParser.T__167)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.match(DMFParser.T__168)
                self.state = 966
                self.match(DMFParser.T__169)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 967
                self.match(DMFParser.T__170)
                self.state = 968
                self.match(DMFParser.T__169)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 969
                self.match(DMFParser.T__114)
                self.state = 970
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__101 or _la==DMFParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 971
                self.match(DMFParser.T__171)
                self.state = 972
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__101 or _la==DMFParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 973
                self.match(DMFParser.T__124)
                self.state = 974
                self.match(DMFParser.T__125)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 975
                self.min_max()
                self.state = 976
                self.match(DMFParser.T__109)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 978
                self.min_max()
                self.state = 979
                _la = self._input.LA(1)
                if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (DMFParser.T__101 - 102)) | (1 << (DMFParser.T__102 - 102)) | (1 << (DMFParser.T__114 - 102)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__124:
                    self.state = 981
                    self.match(DMFParser.T__124)


                self.state = 984
                self.match(DMFParser.T__126)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 985
                self.match(DMFParser.T__86)
                self.state = 986
                self.match(DMFParser.T__121)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 987
                self.match(DMFParser.T__172)
                self.state = 988
                self.match(DMFParser.T__173)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 989
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__174):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 990
                self.match(DMFParser.T__175)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 991
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__174):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                self.match(DMFParser.T__176)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 993
                self.match(DMFParser.T__177)
                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.match(DMFParser.T__178)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 997
                self.match(DMFParser.T__179)
                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 998
                    self.match(DMFParser.T__178)


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1001
                self.min_max()
                self.state = 1003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1002
                    self.match(DMFParser.T__178)


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__180, DMFParser.T__183]:
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__180:
                        self.state = 1005
                        self.match(DMFParser.T__180)


                    pass
                elif token in [DMFParser.T__181]:
                    self.state = 1008
                    self.match(DMFParser.T__181)
                    pass
                elif token in [DMFParser.T__182]:
                    self.state = 1009
                    self.match(DMFParser.T__182)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1012
                self.match(DMFParser.T__183)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1013
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__184 or _la==DMFParser.T__185):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1014
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__186 or _la==DMFParser.T__187):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1015
                self.match(DMFParser.T__188)
                self.state = 1016
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__189 or _la==DMFParser.T__190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__191:
                    self.state = 1017
                    self.match(DMFParser.T__191)


                self.state = 1020
                self.match(DMFParser.T__192)
                self.state = 1021
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__193 or _la==DMFParser.T__194):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1022
                self.kwd_names()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1023
                self.match(DMFParser.T__47)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1024
                self.match(DMFParser.T__112)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1025
                self.match(DMFParser.T__115)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1026
                self.match(DMFParser.T__108)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1027
                self.match(DMFParser.T__34)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1028
                self.match(DMFParser.T__120)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1029
                self.match(DMFParser.T__122)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1030
                self.match(DMFParser.T__123)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1031
                self.match(DMFParser.T__78)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1032
                self.match(DMFParser.T__127)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1033
                self.match(DMFParser.T__167)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1034
                self.match(DMFParser.T__98)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1035
                self.match(DMFParser.T__104)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1036
                self.match(DMFParser.T__102)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1037
                self.match(DMFParser.T__101)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1038
                self.match(DMFParser.T__119)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1039
                self.match(DMFParser.T__29)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1040
                self.match(DMFParser.T__30)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1041
                self.match(DMFParser.T__69)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1042
                self.match(DMFParser.T__71)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1043
                self.match(DMFParser.T__72)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1044
                self.match(DMFParser.T__109)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1045
                self.match(DMFParser.T__126)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1046
                self.match(DMFParser.T__178)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1047
                self.match(DMFParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None


        def getRuleIndex(self):
            return DMFParser.RULE_rel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel" ):
                listener.enterRel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel" ):
                listener.exitRel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel" ):
                return visitor.visitRel(self)
            else:
                return visitor.visitChildren(self)




    def rel(self):

        localctx = DMFParser.RelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_rel)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.match(DMFParser.T__195)
                localctx.which=Rel.EQ
                pass
            elif token in [DMFParser.T__196]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1052
                self.match(DMFParser.T__196)
                localctx.which=Rel.NE
                pass
            elif token in [DMFParser.T__197]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.match(DMFParser.T__197)
                localctx.which=Rel.LT
                pass
            elif token in [DMFParser.T__198]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1056
                self.match(DMFParser.T__198)
                localctx.which=Rel.LE
                pass
            elif token in [DMFParser.T__199]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1058
                self.match(DMFParser.T__199)
                localctx.which=Rel.GT
                pass
            elif token in [DMFParser.T__200]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1060
                self.match(DMFParser.T__200)
                localctx.which=Rel.GE
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None


        def getRuleIndex(self):
            return DMFParser.RULE_bool_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_val" ):
                listener.enterBool_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_val" ):
                listener.exitBool_val(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_val" ):
                return visitor.visitBool_val(self)
            else:
                return visitor.visitChildren(self)




    def bool_val(self):

        localctx = DMFParser.Bool_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_bool_val)
        self._la = 0 # Token type
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__201, DMFParser.T__202, DMFParser.T__203, DMFParser.T__204, DMFParser.T__205, DMFParser.T__206]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                _la = self._input.LA(1)
                if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (DMFParser.T__201 - 202)) | (1 << (DMFParser.T__202 - 202)) | (1 << (DMFParser.T__203 - 202)) | (1 << (DMFParser.T__204 - 202)) | (1 << (DMFParser.T__205 - 202)) | (1 << (DMFParser.T__206 - 202)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=True
                pass
            elif token in [DMFParser.T__207, DMFParser.T__208, DMFParser.T__209, DMFParser.T__210, DMFParser.T__211, DMFParser.T__212]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                _la = self._input.LA(1)
                if not(((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (DMFParser.T__207 - 208)) | (1 << (DMFParser.T__208 - 208)) | (1 << (DMFParser.T__209 - 208)) | (1 << (DMFParser.T__210 - 208)) | (1 << (DMFParser.T__211 - 208)) | (1 << (DMFParser.T__212 - 208)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None
            self._multi_word_name = None # Multi_word_nameContext
            self._ID = None # Token
            self._kwd_names = None # Kwd_namesContext

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = DMFParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_name)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                localctx._multi_word_name = self.multi_word_name()
                localctx.val=localctx._multi_word_name.val
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                localctx._ID = self.match(DMFParser.ID)
                localctx.val=(None if localctx._ID is None else localctx._ID.text)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1075
                localctx._kwd_names = self.kwd_names()
                localctx.val=(None if localctx._kwd_names is None else self._input.getText(localctx._kwd_names.start,localctx._kwd_names.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_word_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def INTERACTIVE(self):
            return self.getToken(DMFParser.INTERACTIVE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_multi_word_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_word_name" ):
                listener.enterMulti_word_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_word_name" ):
                listener.exitMulti_word_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_word_name" ):
                return visitor.visitMulti_word_name(self)
            else:
                return visitor.visitChildren(self)




    def multi_word_name(self):

        localctx = DMFParser.Multi_word_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_multi_word_name)
        self._la = 0 # Token type
        try:
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.match(DMFParser.ON)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1081
                    self.match(DMFParser.T__33)


                self.state = 1084
                self.match(DMFParser.T__81)
                localctx.val="on board"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1086
                    self.match(DMFParser.T__33)


                self.state = 1089
                self.match(DMFParser.INTERACTIVE)
                self.state = 1090
                self.match(DMFParser.T__34)
                localctx.val="interactive reagent"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1092
                    self.match(DMFParser.T__33)


                self.state = 1095
                self.match(DMFParser.INTERACTIVE)
                self.state = 1096
                self.match(DMFParser.T__108)
                localctx.val="interactive volume"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1098
                self.match(DMFParser.T__33)
                self.state = 1099
                self.match(DMFParser.T__81)
                localctx.val="the board"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1101
                    self.match(DMFParser.T__33)


                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__179:
                    self.state = 1104
                    self.match(DMFParser.T__179)


                self.state = 1107
                self.match(DMFParser.T__213)
                self.state = 1108
                self.match(DMFParser.T__112)
                localctx.val="clicked pad"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1110
                    self.match(DMFParser.T__33)


                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__179:
                    self.state = 1113
                    self.match(DMFParser.T__179)


                self.state = 1116
                self.match(DMFParser.T__213)
                self.state = 1117
                self.match(DMFParser.T__47)
                localctx.val="clicked drop"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1119
                self.match(DMFParser.T__214)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 1120
                    self.match(DMFParser.T__26)


                self.state = 1123
                self.match(DMFParser.T__47)
                localctx.val="dispense drop"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1125
                self.match(DMFParser.T__215)
                self.state = 1126
                self.match(DMFParser.T__115)
                localctx.val="enter well"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1128
                self.match(DMFParser.T__216)
                self.state = 1129
                self.match(DMFParser.T__9)
                localctx.val="transfer in"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1131
                self.match(DMFParser.T__216)
                self.state = 1132
                self.match(DMFParser.T__217)
                localctx.val="transfer out"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1134
                self.match(DMFParser.T__218)
                self.state = 1135
                self.match(DMFParser.T__10)
                self.state = 1136
                self.match(DMFParser.T__214)
                localctx.val="prepare to dispense"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1138
                self.match(DMFParser.T__219)
                self.state = 1144
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__26, DMFParser.T__97]:
                    self.state = 1140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__26:
                        self.state = 1139
                        self.match(DMFParser.T__26)


                    self.state = 1142
                    self.match(DMFParser.T__97)
                    pass
                elif token in [DMFParser.T__220]:
                    self.state = 1143
                    self.match(DMFParser.T__220)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.val="take reading"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1147
                self.match(DMFParser.T__171)
                self.state = 1148
                self.match(DMFParser.T__105)
                localctx.val="current time"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1150
                self.match(DMFParser.T__221)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__10:
                    self.state = 1151
                    self.match(DMFParser.T__10)


                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__191:
                    self.state = 1154
                    self.match(DMFParser.T__191)


                self.state = 1157
                self.match(DMFParser.T__192)
                localctx.val="write to csv file"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwd_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_kwd_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwd_names" ):
                listener.enterKwd_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwd_names" ):
                listener.exitKwd_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwd_names" ):
                return visitor.visitKwd_names(self)
            else:
                return visitor.visitChildren(self)




    def kwd_names(self):

        localctx = DMFParser.Kwd_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_kwd_names)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.match(DMFParser.T__128)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.match(DMFParser.T__133)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1163
                self.match(DMFParser.T__165)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1164
                self.match(DMFParser.T__162)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1165
                self.match(DMFParser.T__26)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1166
                self.match(DMFParser.T__22)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1167
                self.match(DMFParser.T__172)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1168
                self.match(DMFParser.ON)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1169
                self.match(DMFParser.OFF)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1170
                self.match(DMFParser.T__31)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1171
                self.match(DMFParser.T__158)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1172
                self.match(DMFParser.T__160)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1173
                self.match(DMFParser.T__159)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1174
                self.match(DMFParser.T__161)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1175
                self.match(DMFParser.T__110)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1176
                self.match(DMFParser.T__111)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1177
                self.match(DMFParser.T__91)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1178
                self.match(DMFParser.T__103)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1179
                self.match(DMFParser.T__222)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1180
                self.match(DMFParser.T__223)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1181
                self.match(DMFParser.T__214)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1182
                self.match(DMFParser.T__215)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1183
                self.match(DMFParser.T__82)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1184
                self.match(DMFParser.T__84)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1185
                self.match(DMFParser.T__83)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1186
                self.match(DMFParser.T__85)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1187
                self.match(DMFParser.T__88)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1188
                self.match(DMFParser.T__89)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1189
                self.match(DMFParser.T__55)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1190
                self.match(DMFParser.T__179)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1191
                self.match(DMFParser.T__213)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1192
                self.match(DMFParser.T__117)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1193
                self.match(DMFParser.T__216)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1194
                self.match(DMFParser.T__9)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1195
                self.match(DMFParser.T__217)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1196
                self.match(DMFParser.T__86)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1197
                self.match(DMFParser.T__121)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1198
                self.match(DMFParser.T__87)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1199
                self.match(DMFParser.T__168)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1200
                self.match(DMFParser.T__170)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1201
                self.match(DMFParser.T__169)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1202
                self.match(DMFParser.T__218)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1203
                self.match(DMFParser.T__10)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1204
                self.match(DMFParser.T__214)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1205
                self.match(DMFParser.T__173)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1206
                self.match(DMFParser.T__174)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1207
                self.match(DMFParser.T__175)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1208
                self.match(DMFParser.T__176)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1209
                self.match(DMFParser.T__97)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1210
                self.match(DMFParser.T__114)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1211
                self.match(DMFParser.T__177)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1212
                self.match(DMFParser.T__179)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1213
                self.match(DMFParser.T__178)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1214
                self.match(DMFParser.T__171)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1215
                self.match(DMFParser.T__224)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1216
                self.match(DMFParser.T__16)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1217
                self.match(DMFParser.T__163)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1218
                self.match(DMFParser.T__164)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1219
                self.match(DMFParser.T__126)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1220
                self.min_max()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1221
                self.match(DMFParser.T__180)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1222
                self.match(DMFParser.T__181)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1223
                self.match(DMFParser.T__182)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1224
                self.match(DMFParser.T__183)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1225
                self.match(DMFParser.T__184)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1226
                self.match(DMFParser.T__185)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1227
                self.match(DMFParser.T__186)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1228
                self.match(DMFParser.T__187)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1229
                self.match(DMFParser.T__188)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1230
                self.match(DMFParser.T__29)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1231
                self.match(DMFParser.T__189)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1232
                self.match(DMFParser.T__190)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1233
                self.match(DMFParser.T__191)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1234
                self.match(DMFParser.T__192)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1235
                self.match(DMFParser.T__193)
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1236
                self.match(DMFParser.T__194)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1237
                self.match(DMFParser.T__39)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1238
                self.match(DMFParser.T__23)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1239
                self.match(DMFParser.T__38)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(DMFParser.STRING, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = DMFParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(DMFParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None
            self.n = None # Token

        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_old_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_attr" ):
                listener.enterOld_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_attr" ):
                listener.exitOld_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_attr" ):
                return visitor.visitOld_attr(self)
            else:
                return visitor.visitChildren(self)




    def old_attr(self):

        localctx = DMFParser.Old_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_old_attr)
        self._la = 0 # Token type
        try:
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.match(DMFParser.T__16)
                self.state = 1245
                self.match(DMFParser.T__112)
                localctx.which="#exit_pad"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1247
                self.match(DMFParser.T__162)
                self.state = 1248
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__163 or _la==DMFParser.T__164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#y_coord"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                self.match(DMFParser.T__165)
                self.state = 1251
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__163 or _la==DMFParser.T__164):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#x_coord"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1253
                self.match(DMFParser.T__16)
                self.state = 1254
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#exit_dir"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1256
                self.match(DMFParser.T__166)
                self.state = 1257
                self.match(DMFParser.T__167)
                localctx.which="#remaining_capacity"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1259
                self.match(DMFParser.T__168)
                self.state = 1260
                self.match(DMFParser.T__169)
                localctx.which="#fill_level"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1262
                self.match(DMFParser.T__170)
                self.state = 1263
                self.match(DMFParser.T__169)
                localctx.which="#refill_level"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1265
                self.match(DMFParser.T__114)
                self.state = 1266
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__101 or _la==DMFParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#target_temperature"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1268
                self.match(DMFParser.T__171)
                self.state = 1269
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__101 or _la==DMFParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#current_temperature"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1271
                self.match(DMFParser.T__124)
                self.state = 1272
                self.match(DMFParser.T__125)
                localctx.which="#power_supply"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1274
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1275
                self.match(DMFParser.T__109)
                localctx.which="#min_voltage"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1277
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__160 or _la==DMFParser.T__161):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1278
                self.match(DMFParser.T__109)
                localctx.which="#max_voltage"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1280
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__158 or _la==DMFParser.T__159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1281
                _la = self._input.LA(1)
                if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (DMFParser.T__101 - 102)) | (1 << (DMFParser.T__102 - 102)) | (1 << (DMFParser.T__114 - 102)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#min_target"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1283
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__160 or _la==DMFParser.T__161):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1284
                _la = self._input.LA(1)
                if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (DMFParser.T__101 - 102)) | (1 << (DMFParser.T__102 - 102)) | (1 << (DMFParser.T__114 - 102)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#max_target"
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1286
                self.match(DMFParser.T__124)
                self.state = 1287
                self.match(DMFParser.T__126)
                localctx.which="#power_mode"
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1289
                self.match(DMFParser.T__86)
                self.state = 1290
                self.match(DMFParser.T__121)
                localctx.which="#heating_zone"
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1292
                self.match(DMFParser.T__172)
                self.state = 1293
                self.match(DMFParser.T__173)
                localctx.which="#n_samples"
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1295
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__174):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1296
                self.match(DMFParser.T__175)
                localctx.which="#sample_rate"
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1298
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__174):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1299
                self.match(DMFParser.T__176)
                localctx.which="#sample_interval"
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1301
                self.match(DMFParser.T__177)
                self.state = 1302
                self.match(DMFParser.T__178)
                localctx.which="#first_value"
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1304
                self.match(DMFParser.T__179)
                self.state = 1305
                self.match(DMFParser.T__178)
                localctx.which="#last_value"
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1307
                localctx.n = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__34) | (1 << DMFParser.T__47))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (DMFParser.T__69 - 70)) | (1 << (DMFParser.T__71 - 70)) | (1 << (DMFParser.T__72 - 70)) | (1 << (DMFParser.T__78 - 70)) | (1 << (DMFParser.T__98 - 70)) | (1 << (DMFParser.T__101 - 70)) | (1 << (DMFParser.T__102 - 70)) | (1 << (DMFParser.T__104 - 70)) | (1 << (DMFParser.T__108 - 70)) | (1 << (DMFParser.T__109 - 70)) | (1 << (DMFParser.T__112 - 70)) | (1 << (DMFParser.T__114 - 70)) | (1 << (DMFParser.T__115 - 70)) | (1 << (DMFParser.T__119 - 70)) | (1 << (DMFParser.T__120 - 70)) | (1 << (DMFParser.T__122 - 70)) | (1 << (DMFParser.T__123 - 70)) | (1 << (DMFParser.T__126 - 70)) | (1 << (DMFParser.T__127 - 70)))) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (DMFParser.T__167 - 168)) | (1 << (DMFParser.T__177 - 168)) | (1 << (DMFParser.T__178 - 168)) | (1 << (DMFParser.T__179 - 168)))) != 0) or _la==DMFParser.ID):
                    localctx.n = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which=(None if localctx.n is None else localctx.n.text)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.expr_sempred
        self._predicates[17] = self.rc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 54)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 18)
         

    def rc_sempred(self, localctx:RcContext, predIndex:int):
            if predIndex == 27:
                return localctx.n==1
         

            if predIndex == 28:
                return localctx.n==1
         




