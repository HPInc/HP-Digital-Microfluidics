# Generated from DMF.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


from mpam.types import Dir, OnOff, Turn, ticks, unknown_reagent, waste_reagent
from langsup.type_supp import Type, Rel, PhysUnit, EnvRelativeUnit, NumberedItem
from quantities import SI


from mpam.types import Dir 


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0117")
        buf.write("\u05a6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\3")
        buf.write("\2\7\2^\n\2\f\2\16\2a\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\5\3m\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("v\n\3\3\3\3\3\3\3\5\3{\n\3\3\4\5\4~\n\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\5\4\u0089\n\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00a9")
        buf.write("\n\4\3\4\3\4\3\4\3\4\5\4\u00af\n\4\3\4\3\4\3\4\5\4\u00b4")
        buf.write("\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7")
        buf.write("\5\u00c2\n\5\f\5\16\5\u00c5\13\5\3\5\3\5\5\5\u00c9\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00d6")
        buf.write("\n\5\3\6\3\6\7\6\u00da\n\6\f\6\16\6\u00dd\13\6\3\6\3\6")
        buf.write("\3\6\7\6\u00e2\n\6\f\6\16\6\u00e5\13\6\3\6\5\6\u00e8\n")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00fd\n\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0106\n\7\5\7\u0108\n\7\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\5\b\u0112\n\b\3\b\3\b\3\b\3\b\3\b\5")
        buf.write("\b\u0119\n\b\3\b\5\b\u011c\n\b\3\t\3\t\3\t\3\t\5\t\u0122")
        buf.write("\n\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u012a\n\n\3\n\3\n\3\13")
        buf.write("\3\13\5\13\u0130\n\13\3\f\3\f\3\f\3\f\5\f\u0136\n\f\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u014a\n\r\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u0151\n\r\3\r\3\r\5\r\u0155\n\r\3\r\5\r\u0158\n\r\3\r")
        buf.write("\3\r\5\r\u015c\n\r\3\r\3\r\3\r\3\r\5\r\u0162\n\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\5\r\u016b\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\7\r\u0172\n\r\f\r\16\r\u0175\13\r\3\r\5\r\u0178\n\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\7\r\u017f\n\r\f\r\16\r\u0182\13\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u018e\n\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0196\n\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\5\r\u019d\n\r\3\r\3\r\3\r\7\r\u01a2\n\r\f\r\16\r")
        buf.write("\u01a5\13\r\5\r\u01a7\n\r\3\r\3\r\3\r\3\r\7\r\u01ad\n")
        buf.write("\r\f\r\16\r\u01b0\13\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u01be\n\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\5\r\u01c6\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u01d1\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01e6\n\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\5\r\u01fc\n\r\3\r\5\r\u01ff\n\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\7\r\u021f\n\r\f\r\16\r\u0222\13\r\5\r\u0224\n")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0231")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u023a\n\r\3\r\3\r")
        buf.write("\3\r\5\r\u023f\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0260\n\r\f\r\16")
        buf.write("\r\u0263\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u0277\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u0282\n\17\3\20\3\20\3\20\3\20\5\20\u0288\n\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u0296\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u029e\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u02ae\n\23\3\24\3")
        buf.write("\24\3\24\3\24\5\24\u02b4\n\24\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u02bc\n\26\3\27\3\27\5\27\u02c0\n\27\3\27\3")
        buf.write("\27\3\27\3\27\7\27\u02c6\n\27\f\27\16\27\u02c9\13\27\5")
        buf.write("\27\u02cb\n\27\3\27\5\27\u02ce\n\27\3\27\3\27\5\27\u02d2")
        buf.write("\n\27\3\27\3\27\3\27\3\27\3\27\7\27\u02d9\n\27\f\27\16")
        buf.write("\27\u02dc\13\27\5\27\u02de\n\27\3\27\5\27\u02e1\n\27\3")
        buf.write("\27\3\27\5\27\u02e5\n\27\3\27\3\27\5\27\u02e9\n\27\3\27")
        buf.write("\3\27\5\27\u02ed\n\27\3\27\3\27\3\27\3\27\7\27\u02f3\n")
        buf.write("\27\f\27\16\27\u02f6\13\27\5\27\u02f8\n\27\3\27\5\27\u02fb")
        buf.write("\n\27\3\27\3\27\3\27\3\27\5\27\u0301\n\27\3\27\3\27\3")
        buf.write("\27\3\27\7\27\u0307\n\27\f\27\16\27\u030a\13\27\5\27\u030c")
        buf.write("\n\27\3\27\5\27\u030f\n\27\5\27\u0311\n\27\3\30\3\30\3")
        buf.write("\30\3\30\3\30\5\30\u0318\n\30\3\30\5\30\u031b\n\30\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u0321\n\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\5\30\u0329\n\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u0331\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u033a\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u0344\n\31\3\31\3\31\3\31\3\31\5\31\u034a\n\31\3")
        buf.write("\31\5\31\u034d\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u035a\n\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\5\31\u0363\n\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0372")
        buf.write("\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\5\33\u0381\n\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u0389\n\34\3\35\3\35\3\35\3\35\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u03b1\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u03b9\n")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u03c1\n\37\3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u03d0\n \3!\3!\3")
        buf.write("!\5!\u03d5\n!\3!\3!\3!\3!\3!\3!\3!\5!\u03de\n!\3!\5!\u03e1")
        buf.write("\n!\3!\3!\3!\3!\3!\5!\u03e8\n!\3!\3!\3!\3!\3!\5!\u03ef")
        buf.write("\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\5!\u0402\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u041a")
        buf.write("\n\"\3#\3#\3#\3#\3#\5#\u0421\n#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\5#\u042b\n#\3#\5#\u042e\n#\3#\5#\u0431\n#\3$\3$\3%\3")
        buf.write("%\3&\3&\5&\u0439\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\5\'\u0456\n\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0463\n\'\3\'\3\'\5\'\u0467")
        buf.write("\n\'\3\'\3\'\5\'\u046b\n\'\3\'\5\'\u046e\n\'\3\'\3\'\5")
        buf.write("\'\u0472\n\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u047a\n\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\5\'\u049a\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u04a8\n(\3)\3)\3)\3)\5)\u04ae\n)\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\5*\u04b8\n*\3+\3+\5+\u04bc\n+\3+\3+\3+\5+\u04c1")
        buf.write("\n+\3+\3+\3+\3+\5+\u04c7\n+\3+\3+\3+\3+\3+\3+\3+\5+\u04d0")
        buf.write("\n+\3+\5+\u04d3\n+\3+\3+\3+\3+\5+\u04d9\n+\3+\5+\u04dc")
        buf.write("\n+\3+\3+\3+\3+\3+\5+\u04e3\n+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u04f6\n+\3+\3+\5+\u04fa")
        buf.write("\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0505\n+\3+\5+\u0508")
        buf.write("\n+\3+\3+\5+\u050c\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u055f")
        buf.write("\n,\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u05a4\n")
        buf.write(".\3.\2\3\30/\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\2\60\3\2\u010c\u010d")
        buf.write("\4\2\35\35$$\3\2-.\3\2:;\3\2 !\4\2\u00fe\u00fe\u0105\u0105")
        buf.write("\4\2\u00fb\u00fb\u0109\u0109\4\2\31\31\35\35\4\2\20\20")
        buf.write("FF\4\2\17\17GG\3\2HI\3\2JK\4\2JJLL\4\2HHMM\3\2QR\3\2S")
        buf.write("T\3\2UW\3\2[\\\3\2]^\3\2uv\3\2wx\4\2ll\u0080\u0081\4\2")
        buf.write("yy\u0087\u0087\3\2\u0092\u0096\3\2\u0097\u0099\3\2\u009a")
        buf.write("\u009d\3\2\u009e\u00a1\3\2\u00a2\u00a7\3\2\u00a8\u00ad")
        buf.write("\4\2}}\u00ae\u00ae\4\299\u00af\u00af\3\2\u00b0\u00b2\3")
        buf.write("\2\u00b3\u00b5\3\2\u00b6\u00b7\4\2\u009c\u009c\u00b8\u00b8")
        buf.write("\3\2\u00b9\u00ba\3\2\u00bc\u00bd\4\2wx\u0084\u0084\4\2")
        buf.write("))\u00c7\u00c7\3\2\u00d1\u00d2\3\2\u00d3\u00d4\4\2  \u00d6")
        buf.write("\u00d7\3\2\u00da\u00db\3\2\u00e2\u00e7\3\2\u00e8\u00ed")
        buf.write("\24\2 !%%99OOQR``sswxzz~\177\u0082\u0082\u0084\u0085\u0089")
        buf.write("\u008a\u008c\u008d\u0090\u0091\u00c0\u00c0\u00ca\u00cc")
        buf.write("\u0111\u0111\2\u073e\2_\3\2\2\2\4z\3\2\2\2\6\u00b3\3\2")
        buf.write("\2\2\b\u00d5\3\2\2\2\n\u00e7\3\2\2\2\f\u0107\3\2\2\2\16")
        buf.write("\u011b\3\2\2\2\20\u0121\3\2\2\2\22\u0127\3\2\2\2\24\u012d")
        buf.write("\3\2\2\2\26\u0135\3\2\2\2\30\u01e5\3\2\2\2\32\u0276\3")
        buf.write("\2\2\2\34\u0281\3\2\2\2\36\u0287\3\2\2\2 \u0295\3\2\2")
        buf.write("\2\"\u029d\3\2\2\2$\u02ad\3\2\2\2&\u02b3\3\2\2\2(\u02b5")
        buf.write("\3\2\2\2*\u02b7\3\2\2\2,\u0310\3\2\2\2.\u0339\3\2\2\2")
        buf.write("\60\u0362\3\2\2\2\62\u0371\3\2\2\2\64\u0380\3\2\2\2\66")
        buf.write("\u0388\3\2\2\28\u038a\3\2\2\2:\u03b0\3\2\2\2<\u03c0\3")
        buf.write("\2\2\2>\u03cf\3\2\2\2@\u0401\3\2\2\2B\u0419\3\2\2\2D\u0430")
        buf.write("\3\2\2\2F\u0432\3\2\2\2H\u0434\3\2\2\2J\u0438\3\2\2\2")
        buf.write("L\u0499\3\2\2\2N\u04a7\3\2\2\2P\u04ad\3\2\2\2R\u04b7\3")
        buf.write("\2\2\2T\u050b\3\2\2\2V\u055e\3\2\2\2X\u0560\3\2\2\2Z\u05a3")
        buf.write("\3\2\2\2\\^\5\b\5\2]\\\3\2\2\2^a\3\2\2\2_]\3\2\2\2_`\3")
        buf.write("\2\2\2`b\3\2\2\2a_\3\2\2\2bc\7\2\2\3c\3\3\2\2\2de\5\n")
        buf.write("\6\2ef\7\2\2\3f{\3\2\2\2gh\5\20\t\2hi\7\2\2\3i{\3\2\2")
        buf.write("\2jl\5\6\4\2km\7\u010a\2\2lk\3\2\2\2lm\3\2\2\2mn\3\2\2")
        buf.write("\2no\7\2\2\3o{\3\2\2\2pq\5(\25\2qr\7\2\2\3r{\3\2\2\2s")
        buf.write("u\5\30\r\2tv\7\u010a\2\2ut\3\2\2\2uv\3\2\2\2vw\3\2\2\2")
        buf.write("wx\7\2\2\3x{\3\2\2\2y{\7\2\2\3zd\3\2\2\2zg\3\2\2\2zj\3")
        buf.write("\2\2\2zp\3\2\2\2zs\3\2\2\2zy\3\2\2\2{\5\3\2\2\2|~\7\u0104")
        buf.write("\2\2}|\3\2\2\2}~\3\2\2\2~\177\3\2\2\2\177\u0080\7\u00ff")
        buf.write("\2\2\u0080\u0081\5\64\33\2\u0081\u0082\5R*\2\u0082\u0083")
        buf.write("\7\u0101\2\2\u0083\u0084\5\30\r\2\u0084\u0085\b\4\1\2")
        buf.write("\u0085\u0086\b\4\1\2\u0086\u00b4\3\2\2\2\u0087\u0089\7")
        buf.write("\u0104\2\2\u0088\u0087\3\2\2\2\u0088\u0089\3\2\2\2\u0089")
        buf.write("\u008a\3\2\2\2\u008a\u008b\7\u00ff\2\2\u008b\u008c\5\64")
        buf.write("\33\2\u008c\u008d\7\u0112\2\2\u008d\u008e\7\u0101\2\2")
        buf.write("\u008e\u008f\5\30\r\2\u008f\u0090\b\4\1\2\u0090\u0091")
        buf.write("\b\4\1\2\u0091\u00b4\3\2\2\2\u0092\u0093\7\u0104\2\2\u0093")
        buf.write("\u0094\5R*\2\u0094\u0095\7\u00fc\2\2\u0095\u0096\5\30")
        buf.write("\r\2\u0096\u0097\b\4\1\2\u0097\u0098\b\4\1\2\u0098\u00b4")
        buf.write("\3\2\2\2\u0099\u009a\7\u0104\2\2\u009a\u009b\5\62\32\2")
        buf.write("\u009b\u009c\7\u0112\2\2\u009c\u009d\7\u00fc\2\2\u009d")
        buf.write("\u009e\5\30\r\2\u009e\u009f\b\4\1\2\u009f\u00a0\b\4\1")
        buf.write("\2\u00a0\u00b4\3\2\2\2\u00a1\u00a2\7\u0104\2\2\u00a2\u00a3")
        buf.write("\5\62\32\2\u00a3\u00a4\7\u0112\2\2\u00a4\u00a5\b\4\1\2")
        buf.write("\u00a5\u00a6\b\4\1\2\u00a6\u00b4\3\2\2\2\u00a7\u00a9\7")
        buf.write("\u0104\2\2\u00a8\u00a7\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9")
        buf.write("\u00aa\3\2\2\2\u00aa\u00ab\5\62\32\2\u00ab\u00ae\5R*\2")
        buf.write("\u00ac\u00ad\7\u00fc\2\2\u00ad\u00af\5\30\r\2\u00ae\u00ac")
        buf.write("\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0")
        buf.write("\u00b1\b\4\1\2\u00b1\u00b2\b\4\1\2\u00b2\u00b4\3\2\2\2")
        buf.write("\u00b3}\3\2\2\2\u00b3\u0088\3\2\2\2\u00b3\u0092\3\2\2")
        buf.write("\2\u00b3\u0099\3\2\2\2\u00b3\u00a1\3\2\2\2\u00b3\u00a8")
        buf.write("\3\2\2\2\u00b4\7\3\2\2\2\u00b5\u00b6\5\6\4\2\u00b6\u00b7")
        buf.write("\7\u010a\2\2\u00b7\u00d6\3\2\2\2\u00b8\u00d6\5(\25\2\u00b9")
        buf.write("\u00ba\7\3\2\2\u00ba\u00bb\5\30\r\2\u00bb\u00c3\5\n\6")
        buf.write("\2\u00bc\u00bd\7\4\2\2\u00bd\u00be\7\3\2\2\u00be\u00bf")
        buf.write("\5\30\r\2\u00bf\u00c0\5\n\6\2\u00c0\u00c2\3\2\2\2\u00c1")
        buf.write("\u00bc\3\2\2\2\u00c2\u00c5\3\2\2\2\u00c3\u00c1\3\2\2\2")
        buf.write("\u00c3\u00c4\3\2\2\2\u00c4\u00c8\3\2\2\2\u00c5\u00c3\3")
        buf.write("\2\2\2\u00c6\u00c7\7\4\2\2\u00c7\u00c9\5\n\6\2\u00c8\u00c6")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00d6\3\2\2\2\u00ca")
        buf.write("\u00cb\5\30\r\2\u00cb\u00cc\7\u010a\2\2\u00cc\u00d6\3")
        buf.write("\2\2\2\u00cd\u00d6\5\20\t\2\u00ce\u00cf\5\22\n\2\u00cf")
        buf.write("\u00d0\7\u010a\2\2\u00d0\u00d6\3\2\2\2\u00d1\u00d2\5\24")
        buf.write("\13\2\u00d2\u00d3\7\u010a\2\2\u00d3\u00d6\3\2\2\2\u00d4")
        buf.write("\u00d6\5\n\6\2\u00d5\u00b5\3\2\2\2\u00d5\u00b8\3\2\2\2")
        buf.write("\u00d5\u00b9\3\2\2\2\u00d5\u00ca\3\2\2\2\u00d5\u00cd\3")
        buf.write("\2\2\2\u00d5\u00ce\3\2\2\2\u00d5\u00d1\3\2\2\2\u00d5\u00d4")
        buf.write("\3\2\2\2\u00d6\t\3\2\2\2\u00d7\u00db\7\5\2\2\u00d8\u00da")
        buf.write("\5\b\5\2\u00d9\u00d8\3\2\2\2\u00da\u00dd\3\2\2\2\u00db")
        buf.write("\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00de\3\2\2\2")
        buf.write("\u00dd\u00db\3\2\2\2\u00de\u00e8\7\6\2\2\u00df\u00e3\7")
        buf.write("\7\2\2\u00e0\u00e2\5\b\5\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5")
        buf.write("\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4")
        buf.write("\u00e6\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e6\u00e8\7\b\2\2")
        buf.write("\u00e7\u00d7\3\2\2\2\u00e7\u00df\3\2\2\2\u00e8\13\3\2")
        buf.write("\2\2\u00e9\u00ea\5\30\r\2\u00ea\u00eb\7\t\2\2\u00eb\u0108")
        buf.write("\3\2\2\2\u00ec\u00ed\7\n\2\2\u00ed\u0108\5\30\r\2\u00ee")
        buf.write("\u00ef\t\2\2\2\u00ef\u0108\5\30\r\2\u00f0\u00f1\7\13\2")
        buf.write("\2\u00f1\u00f2\5R*\2\u00f2\u00f3\7\f\2\2\u00f3\u00f4\5")
        buf.write("\30\r\2\u00f4\u0108\3\2\2\2\u00f5\u00f6\7\13\2\2\u00f6")
        buf.write("\u00f7\5R*\2\u00f7\u00f8\5\16\b\2\u00f8\u00f9\7\r\2\2")
        buf.write("\u00f9\u00fc\5\30\r\2\u00fa\u00fb\7\16\2\2\u00fb\u00fd")
        buf.write("\5\30\r\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd")
        buf.write("\u0108\3\2\2\2\u00fe\u00ff\7\13\2\2\u00ff\u0100\5.\30")
        buf.write("\2\u0100\u0101\5\16\b\2\u0101\u0102\7\r\2\2\u0102\u0105")
        buf.write("\5\30\r\2\u0103\u0104\7\16\2\2\u0104\u0106\5\30\r\2\u0105")
        buf.write("\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0108\3\2\2\2")
        buf.write("\u0107\u00e9\3\2\2\2\u0107\u00ec\3\2\2\2\u0107\u00ee\3")
        buf.write("\2\2\2\u0107\u00f0\3\2\2\2\u0107\u00f5\3\2\2\2\u0107\u00fe")
        buf.write("\3\2\2\2\u0108\r\3\2\2\2\u0109\u010a\7\u00fc\2\2\u010a")
        buf.write("\u010b\5\30\r\2\u010b\u010c\7\17\2\2\u010c\u010d\b\b\1")
        buf.write("\2\u010d\u011c\3\2\2\2\u010e\u010f\7\u00fc\2\2\u010f\u0111")
        buf.write("\5\30\r\2\u0110\u0112\7\20\2\2\u0111\u0110\3\2\2\2\u0111")
        buf.write("\u0112\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\b\b\1\2")
        buf.write("\u0114\u011c\3\2\2\2\u0115\u0116\7\17\2\2\u0116\u011c")
        buf.write("\b\b\1\2\u0117\u0119\7\20\2\2\u0118\u0117\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\b\b\1\2")
        buf.write("\u011b\u0109\3\2\2\2\u011b\u010e\3\2\2\2\u011b\u0115\3")
        buf.write("\2\2\2\u011b\u0118\3\2\2\2\u011c\17\3\2\2\2\u011d\u011e")
        buf.write("\7\21\2\2\u011e\u011f\5R*\2\u011f\u0120\7\u010e\2\2\u0120")
        buf.write("\u0122\3\2\2\2\u0121\u011d\3\2\2\2\u0121\u0122\3\2\2\2")
        buf.write("\u0122\u0123\3\2\2\2\u0123\u0124\7\22\2\2\u0124\u0125")
        buf.write("\5\f\7\2\u0125\u0126\5\n\6\2\u0126\21\3\2\2\2\u0127\u0129")
        buf.write("\7\23\2\2\u0128\u012a\5R*\2\u0129\u0128\3\2\2\2\u0129")
        buf.write("\u012a\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\7\24\2")
        buf.write("\2\u012c\23\3\2\2\2\u012d\u012f\7\25\2\2\u012e\u0130\5")
        buf.write("\30\r\2\u012f\u012e\3\2\2\2\u012f\u0130\3\2\2\2\u0130")
        buf.write("\25\3\2\2\2\u0131\u0132\7\u010e\2\2\u0132\u0136\b\f\1")
        buf.write("\2\u0133\u0134\7\u010f\2\2\u0134\u0136\b\f\1\2\u0135\u0131")
        buf.write("\3\2\2\2\u0135\u0133\3\2\2\2\u0136\27\3\2\2\2\u0137\u0138")
        buf.write("\b\r\1\2\u0138\u0139\7\26\2\2\u0139\u013a\5\30\r\2\u013a")
        buf.write("\u013b\7\u010f\2\2\u013b\u01e6\3\2\2\2\u013c\u013d\7\26")
        buf.write("\2\2\u013d\u013e\5\30\r\2\u013e\u013f\7\27\2\2\u013f\u0140")
        buf.write("\5\30\r\2\u0140\u0141\7\u010f\2\2\u0141\u01e6\3\2\2\2")
        buf.write("\u0142\u0143\7\u0109\2\2\u0143\u01e6\5\30\r@\u0144\u0145")
        buf.write("\5D#\2\u0145\u0146\7\30\2\2\u0146\u0147\5\30\r>\u0147")
        buf.write("\u01e6\3\2\2\2\u0148\u014a\7\31\2\2\u0149\u0148\3\2\2")
        buf.write("\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c")
        buf.write("\7\32\2\2\u014c\u01e6\58\35\2\u014d\u014e\7\u0112\2\2")
        buf.write("\u014e\u01e6\5$\23\2\u014f\u0151\7$\2\2\u0150\u014f\3")
        buf.write("\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154")
        buf.write("\5\36\20\2\u0153\u0155\7%\2\2\u0154\u0153\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0155\u01e6\3\2\2\2\u0156\u0158\t\3\2\2")
        buf.write("\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\3")
        buf.write("\2\2\2\u0159\u015b\7%\2\2\u015a\u015c\7&\2\2\u015b\u015a")
        buf.write("\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015d\3\2\2\2\u015d")
        buf.write("\u01e6\5\30\r.\u015e\u015f\7\u0106\2\2\u015f\u01e6\5\30")
        buf.write("\r\'\u0160\u0162\7\35\2\2\u0161\u0160\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\7)\2\2\u0164")
        buf.write("\u0165\7*\2\2\u0165\u0166\5\30\r\2\u0166\u0167\7+\2\2")
        buf.write("\u0167\u0168\5\30\r&\u0168\u01e6\3\2\2\2\u0169\u016b\7")
        buf.write("\35\2\2\u016a\u0169\3\2\2\2\u016a\u016b\3\2\2\2\u016b")
        buf.write("\u016c\3\2\2\2\u016c\u016d\7)\2\2\u016d\u016e\7*\2\2\u016e")
        buf.write("\u0173\5\30\r\2\u016f\u0170\7\27\2\2\u0170\u0172\5\30")
        buf.write("\r\2\u0171\u016f\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171")
        buf.write("\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u01e6\3\2\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0176\u0178\7\35\2\2\u0177\u0176\3\2\2")
        buf.write("\2\u0177\u0178\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a")
        buf.write("\7)\2\2\u017a\u017b\7*\2\2\u017b\u0180\5\30\r\2\u017c")
        buf.write("\u017d\7\27\2\2\u017d\u017f\5\30\r\2\u017e\u017c\3\2\2")
        buf.write("\2\u017f\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181")
        buf.write("\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183")
        buf.write("\u0184\7\27\2\2\u0184\u0185\7+\2\2\u0185\u0186\5\30\r")
        buf.write("$\u0186\u01e6\3\2\2\2\u0187\u0188\5 \21\2\u0188\u0189")
        buf.write("\5\30\r!\u0189\u01e6\3\2\2\2\u018a\u01e6\5 \21\2\u018b")
        buf.write("\u018d\7\r\2\2\u018c\u018e\5&\24\2\u018d\u018c\3\2\2\2")
        buf.write("\u018d\u018e\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u01e6\5")
        buf.write("\30\r\37\u0190\u0191\t\4\2\2\u0191\u0192\7\u010c\2\2\u0192")
        buf.write("\u01e6\5\30\r\36\u0193\u0195\t\4\2\2\u0194\u0196\7\n\2")
        buf.write("\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197")
        buf.write("\3\2\2\2\u0197\u01e6\5\30\r\35\u0198\u0199\t\4\2\2\u0199")
        buf.write("\u019a\7\n\2\2\u019a\u019d\7/\2\2\u019b\u019d\7\60\2\2")
        buf.write("\u019c\u0198\3\2\2\2\u019c\u019b\3\2\2\2\u019d\u01a6\3")
        buf.write("\2\2\2\u019e\u01a3\5\30\r\2\u019f\u01a0\7\27\2\2\u01a0")
        buf.write("\u01a2\5\30\r\2\u01a1\u019f\3\2\2\2\u01a2\u01a5\3\2\2")
        buf.write("\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a7")
        buf.write("\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u019e\3\2\2\2\u01a6")
        buf.write("\u01a7\3\2\2\2\u01a7\u01e6\3\2\2\2\u01a8\u01a9\7\61\2")
        buf.write("\2\u01a9\u01ae\5\30\r\2\u01aa\u01ab\7\27\2\2\u01ab\u01ad")
        buf.write("\5\30\r\2\u01ac\u01aa\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae")
        buf.write("\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01e6\3\2\2\2")
        buf.write("\u01b0\u01ae\3\2\2\2\u01b1\u01b2\7\62\2\2\u01b2\u01b3")
        buf.write("\7\63\2\2\u01b3\u01b4\7\64\2\2\u01b4\u01e6\5\30\r\32\u01b5")
        buf.write("\u01b6\7\63\2\2\u01b6\u01b7\7\65\2\2\u01b7\u01e6\5\30")
        buf.write("\r\31\u01b8\u01b9\7\66\2\2\u01b9\u01ba\7\13\2\2\u01ba")
        buf.write("\u01e6\5\30\r\30\u01bb\u01bd\7\67\2\2\u01bc\u01be\7\r")
        buf.write("\2\2\u01bd\u01bc\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf")
        buf.write("\3\2\2\2\u01bf\u01c0\5\30\r\2\u01c0\u01c1\7\34\2\2\u01c1")
        buf.write("\u01c2\5R*\2\u01c2\u01e6\3\2\2\2\u01c3\u01c5\7\67\2\2")
        buf.write("\u01c4\u01c6\7\r\2\2\u01c5\u01c4\3\2\2\2\u01c5\u01c6\3")
        buf.write("\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01e6\5\30\r\26\u01c8")
        buf.write("\u01c9\78\2\2\u01c9\u01e6\5\30\r\25\u01ca\u01cb\79\2\2")
        buf.write("\u01cb\u01cc\t\5\2\2\u01cc\u01e6\5\30\r\23\u01cd\u01e6")
        buf.write("\5*\26\2\u01ce\u01e6\5\60\31\2\u01cf\u01d1\7$\2\2\u01d0")
        buf.write("\u01cf\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d2\3\2\2\2")
        buf.write("\u01d2\u01e6\5\62\32\2\u01d3\u01d4\5\62\32\2\u01d4\u01d5")
        buf.write("\7\u0112\2\2\u01d5\u01e6\3\2\2\2\u01d6\u01e6\5P)\2\u01d7")
        buf.write("\u01e6\5R*\2\u01d8\u01e6\5T+\2\u01d9\u01da\5R*\2\u01da")
        buf.write("\u01db\7\u00fc\2\2\u01db\u01dc\5\30\r\b\u01dc\u01e6\3")
        buf.write("\2\2\2\u01dd\u01de\5\62\32\2\u01de\u01df\7\u0112\2\2\u01df")
        buf.write("\u01e0\7\u00fc\2\2\u01e0\u01e1\5\30\r\6\u01e1\u01e6\3")
        buf.write("\2\2\2\u01e2\u01e6\5X-\2\u01e3\u01e6\7\u0112\2\2\u01e4")
        buf.write("\u01e6\7\u0113\2\2\u01e5\u0137\3\2\2\2\u01e5\u013c\3\2")
        buf.write("\2\2\u01e5\u0142\3\2\2\2\u01e5\u0144\3\2\2\2\u01e5\u0149")
        buf.write("\3\2\2\2\u01e5\u014d\3\2\2\2\u01e5\u0150\3\2\2\2\u01e5")
        buf.write("\u0157\3\2\2\2\u01e5\u015e\3\2\2\2\u01e5\u0161\3\2\2\2")
        buf.write("\u01e5\u016a\3\2\2\2\u01e5\u0177\3\2\2\2\u01e5\u0187\3")
        buf.write("\2\2\2\u01e5\u018a\3\2\2\2\u01e5\u018b\3\2\2\2\u01e5\u0190")
        buf.write("\3\2\2\2\u01e5\u0193\3\2\2\2\u01e5\u019c\3\2\2\2\u01e5")
        buf.write("\u01a8\3\2\2\2\u01e5\u01b1\3\2\2\2\u01e5\u01b5\3\2\2\2")
        buf.write("\u01e5\u01b8\3\2\2\2\u01e5\u01bb\3\2\2\2\u01e5\u01c3\3")
        buf.write("\2\2\2\u01e5\u01c8\3\2\2\2\u01e5\u01ca\3\2\2\2\u01e5\u01cd")
        buf.write("\3\2\2\2\u01e5\u01ce\3\2\2\2\u01e5\u01d0\3\2\2\2\u01e5")
        buf.write("\u01d3\3\2\2\2\u01e5\u01d6\3\2\2\2\u01e5\u01d7\3\2\2\2")
        buf.write("\u01e5\u01d8\3\2\2\2\u01e5\u01d9\3\2\2\2\u01e5\u01dd\3")
        buf.write("\2\2\2\u01e5\u01e2\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e4")
        buf.write("\3\2\2\2\u01e6\u0261\3\2\2\2\u01e7\u01e8\f\65\2\2\u01e8")
        buf.write("\u01e9\7\f\2\2\u01e9\u01ea\t\6\2\2\u01ea\u0260\5\30\r")
        buf.write("\66\u01eb\u01ec\f-\2\2\u01ec\u01ed\7\'\2\2\u01ed\u0260")
        buf.write("\5\30\r.\u01ee\u01ef\f,\2\2\u01ef\u01f0\t\7\2\2\u01f0")
        buf.write("\u0260\5\30\r-\u01f1\u01f2\f+\2\2\u01f2\u01f3\t\b\2\2")
        buf.write("\u01f3\u0260\5\30\r,\u01f4\u01f5\f*\2\2\u01f5\u01f6\5")
        buf.write("N(\2\u01f6\u01f7\5\30\r+\u01f7\u0260\3\2\2\2\u01f8\u01fe")
        buf.write("\f(\2\2\u01f9\u01fb\7(\2\2\u01fa\u01fc\7\u0106\2\2\u01fb")
        buf.write("\u01fa\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01ff\3\2\2\2")
        buf.write("\u01fd\u01ff\7\u0103\2\2\u01fe\u01f9\3\2\2\2\u01fe\u01fd")
        buf.write("\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0260\5\30\r)\u0201")
        buf.write("\u0202\f#\2\2\u0202\u0203\7+\2\2\u0203\u0260\5\30\r$\u0204")
        buf.write("\u0205\f\"\2\2\u0205\u0206\7,\2\2\u0206\u0260\5\30\r#")
        buf.write("\u0207\u0208\f\22\2\2\u0208\u0209\t\5\2\2\u0209\u0260")
        buf.write("\5\30\r\23\u020a\u020b\f\21\2\2\u020b\u020c\7\u0101\2")
        buf.write("\2\u020c\u0260\5\30\r\22\u020d\u020e\f\20\2\2\u020e\u020f")
        buf.write("\7\3\2\2\u020f\u0210\5\30\r\2\u0210\u0211\7\4\2\2\u0211")
        buf.write("\u0212\5\30\r\21\u0212\u0260\3\2\2\2\u0213\u0214\f\7\2")
        buf.write("\2\u0214\u0215\7\u00fd\2\2\u0215\u0216\5L\'\2\u0216\u0217")
        buf.write("\7\u00fc\2\2\u0217\u0218\5\30\r\b\u0218\u0260\3\2\2\2")
        buf.write("\u0219\u021a\fB\2\2\u021a\u0223\7\26\2\2\u021b\u0220\5")
        buf.write("\30\r\2\u021c\u021d\7\27\2\2\u021d\u021f\5\30\r\2\u021e")
        buf.write("\u021c\3\2\2\2\u021f\u0222\3\2\2\2\u0220\u021e\3\2\2\2")
        buf.write("\u0220\u0221\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220\3")
        buf.write("\2\2\2\u0223\u021b\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225")
        buf.write("\3\2\2\2\u0225\u0260\7\u010f\2\2\u0226\u0227\f?\2\2\u0227")
        buf.write("\u0260\5 \21\2\u0228\u0229\f<\2\2\u0229\u022a\7\u00fd")
        buf.write("\2\2\u022a\u022b\7\33\2\2\u022b\u022c\7\f\2\2\u022c\u0260")
        buf.write("\5B\"\2\u022d\u022e\f;\2\2\u022e\u0230\7\34\2\2\u022f")
        buf.write("\u0231\7\35\2\2\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2")
        buf.write("\2\u0231\u0232\3\2\2\2\u0232\u0233\7\36\2\2\u0233\u0234")
        buf.write("\7\f\2\2\u0234\u0260\5B\"\2\u0235\u0236\f:\2\2\u0236\u0237")
        buf.write("\7\u00fd\2\2\u0237\u0239\5L\'\2\u0238\u023a\5\32\16\2")
        buf.write("\u0239\u0238\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u0260\3")
        buf.write("\2\2\2\u023b\u023c\f9\2\2\u023c\u023e\7\u00fd\2\2\u023d")
        buf.write("\u023f\7\u0110\2\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2")
        buf.write("\2\2\u023f\u0240\3\2\2\2\u0240\u0260\5L\'\2\u0241\u0242")
        buf.write("\f8\2\2\u0242\u0243\7\u00fd\2\2\u0243\u0244\7\26\2\2\u0244")
        buf.write("\u0245\7\u0110\2\2\u0245\u0246\7\u010f\2\2\u0246\u0260")
        buf.write("\5L\'\2\u0247\u0248\f\67\2\2\u0248\u0260\5\32\16\2\u0249")
        buf.write("\u024a\f\66\2\2\u024a\u024b\7\37\2\2\u024b\u0260\5\"\22")
        buf.write("\2\u024c\u024d\f\63\2\2\u024d\u0260\5$\23\2\u024e\u024f")
        buf.write("\f\62\2\2\u024f\u0260\5B\"\2\u0250\u0251\f\61\2\2\u0251")
        buf.write("\u0252\7\"\2\2\u0252\u0260\5B\"\2\u0253\u0254\f\60\2\2")
        buf.write("\u0254\u0260\7#\2\2\u0255\u0256\f)\2\2\u0256\u0257\5\34")
        buf.write("\17\2\u0257\u0258\t\t\2\2\u0258\u0259\5L\'\2\u0259\u0260")
        buf.write("\3\2\2\2\u025a\u025b\f\24\2\2\u025b\u025c\7\21\2\2\u025c")
        buf.write("\u025d\5\30\r\2\u025d\u025e\7\u010e\2\2\u025e\u0260\3")
        buf.write("\2\2\2\u025f\u01e7\3\2\2\2\u025f\u01eb\3\2\2\2\u025f\u01ee")
        buf.write("\3\2\2\2\u025f\u01f1\3\2\2\2\u025f\u01f4\3\2\2\2\u025f")
        buf.write("\u01f8\3\2\2\2\u025f\u0201\3\2\2\2\u025f\u0204\3\2\2\2")
        buf.write("\u025f\u0207\3\2\2\2\u025f\u020a\3\2\2\2\u025f\u020d\3")
        buf.write("\2\2\2\u025f\u0213\3\2\2\2\u025f\u0219\3\2\2\2\u025f\u0226")
        buf.write("\3\2\2\2\u025f\u0228\3\2\2\2\u025f\u022d\3\2\2\2\u025f")
        buf.write("\u0235\3\2\2\2\u025f\u023b\3\2\2\2\u025f\u0241\3\2\2\2")
        buf.write("\u025f\u0247\3\2\2\2\u025f\u0249\3\2\2\2\u025f\u024c\3")
        buf.write("\2\2\2\u025f\u024e\3\2\2\2\u025f\u0250\3\2\2\2\u025f\u0253")
        buf.write("\3\2\2\2\u025f\u0255\3\2\2\2\u025f\u025a\3\2\2\2\u0260")
        buf.write("\u0263\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2\2\2")
        buf.write("\u0262\31\3\2\2\2\u0263\u0261\3\2\2\2\u0264\u0265\7<\2")
        buf.write("\2\u0265\u0277\b\16\1\2\u0266\u0267\7=\2\2\u0267\u0268")
        buf.write("\7\u0106\2\2\u0268\u0269\7>\2\2\u0269\u0277\b\16\1\2\u026a")
        buf.write("\u026b\7?\2\2\u026b\u026c\7>\2\2\u026c\u0277\b\16\1\2")
        buf.write("\u026d\u026e\7@\2\2\u026e\u0277\b\16\1\2\u026f\u0270\7")
        buf.write("(\2\2\u0270\u0271\7\u0106\2\2\u0271\u0272\7A\2\2\u0272")
        buf.write("\u0277\b\16\1\2\u0273\u0274\7\u0103\2\2\u0274\u0275\7")
        buf.write("A\2\2\u0275\u0277\b\16\1\2\u0276\u0264\3\2\2\2\u0276\u0266")
        buf.write("\3\2\2\2\u0276\u026a\3\2\2\2\u0276\u026d\3\2\2\2\u0276")
        buf.write("\u026f\3\2\2\2\u0276\u0273\3\2\2\2\u0277\33\3\2\2\2\u0278")
        buf.write("\u0279\7B\2\2\u0279\u0282\b\17\1\2\u027a\u027b\7=\2\2")
        buf.write("\u027b\u027c\7\u0106\2\2\u027c\u027d\7C\2\2\u027d\u0282")
        buf.write("\b\17\1\2\u027e\u027f\7?\2\2\u027f\u0280\7C\2\2\u0280")
        buf.write("\u0282\b\17\1\2\u0281\u0278\3\2\2\2\u0281\u027a\3\2\2")
        buf.write("\2\u0281\u027e\3\2\2\2\u0282\35\3\2\2\2\u0283\u0284\7")
        buf.write("D\2\2\u0284\u0288\b\20\1\2\u0285\u0286\7E\2\2\u0286\u0288")
        buf.write("\b\20\1\2\u0287\u0283\3\2\2\2\u0287\u0285\3\2\2\2\u0288")
        buf.write("\37\3\2\2\2\u0289\u028a\t\n\2\2\u028a\u028b\b\21\1\2\u028b")
        buf.write("\u0296\b\21\1\2\u028c\u028d\t\13\2\2\u028d\u028e\b\21")
        buf.write("\1\2\u028e\u0296\b\21\1\2\u028f\u0290\t\f\2\2\u0290\u0291")
        buf.write("\b\21\1\2\u0291\u0296\b\21\1\2\u0292\u0293\t\r\2\2\u0293")
        buf.write("\u0294\b\21\1\2\u0294\u0296\b\21\1\2\u0295\u0289\3\2\2")
        buf.write("\2\u0295\u028c\3\2\2\2\u0295\u028f\3\2\2\2\u0295\u0292")
        buf.write("\3\2\2\2\u0296!\3\2\2\2\u0297\u0298\t\16\2\2\u0298\u029e")
        buf.write("\b\22\1\2\u0299\u029a\t\17\2\2\u029a\u029e\b\22\1\2\u029b")
        buf.write("\u029c\7N\2\2\u029c\u029e\b\22\1\2\u029d\u0297\3\2\2\2")
        buf.write("\u029d\u0299\3\2\2\2\u029d\u029b\3\2\2\2\u029e#\3\2\2")
        buf.write("\2\u029f\u02a0\6\23\35\3\u02a0\u02a1\7O\2\2\u02a1\u02a2")
        buf.write("\b\23\1\2\u02a2\u02ae\b\23\1\2\u02a3\u02a4\7P\2\2\u02a4")
        buf.write("\u02a5\b\23\1\2\u02a5\u02ae\b\23\1\2\u02a6\u02a7\6\23")
        buf.write("\36\3\u02a7\u02a8\t\20\2\2\u02a8\u02a9\b\23\1\2\u02a9")
        buf.write("\u02ae\b\23\1\2\u02aa\u02ab\t\21\2\2\u02ab\u02ac\b\23")
        buf.write("\1\2\u02ac\u02ae\b\23\1\2\u02ad\u029f\3\2\2\2\u02ad\u02a3")
        buf.write("\3\2\2\2\u02ad\u02a6\3\2\2\2\u02ad\u02aa\3\2\2\2\u02ae")
        buf.write("%\3\2\2\2\u02af\u02b0\7O\2\2\u02b0\u02b4\b\24\1\2\u02b1")
        buf.write("\u02b2\t\20\2\2\u02b2\u02b4\b\24\1\2\u02b3\u02af\3\2\2")
        buf.write("\2\u02b3\u02b1\3\2\2\2\u02b4\'\3\2\2\2\u02b5\u02b6\5*")
        buf.write("\26\2\u02b6)\3\2\2\2\u02b7\u02bb\5,\27\2\u02b8\u02bc\5")
        buf.write("\n\6\2\u02b9\u02ba\7\u0101\2\2\u02ba\u02bc\5\30\r\2\u02bb")
        buf.write("\u02b8\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc+\3\2\2\2\u02bd")
        buf.write("\u02bf\t\22\2\2\u02be\u02c0\5R*\2\u02bf\u02be\3\2\2\2")
        buf.write("\u02bf\u02c0\3\2\2\2\u02c0\u02cd\3\2\2\2\u02c1\u02ca\7")
        buf.write("\26\2\2\u02c2\u02c7\5.\30\2\u02c3\u02c4\7\27\2\2\u02c4")
        buf.write("\u02c6\5.\30\2\u02c5\u02c3\3\2\2\2\u02c6\u02c9\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02cb\3")
        buf.write("\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02c2\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce\7\u010f\2\2\u02cd")
        buf.write("\u02c1\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d1\3\2\2\2")
        buf.write("\u02cf\u02d0\7X\2\2\u02d0\u02d2\5\62\32\2\u02d1\u02cf")
        buf.write("\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u0311\3\2\2\2\u02d3")
        buf.write("\u02e0\7Y\2\2\u02d4\u02dd\7\26\2\2\u02d5\u02da\5.\30\2")
        buf.write("\u02d6\u02d7\7\27\2\2\u02d7\u02d9\5.\30\2\u02d8\u02d6")
        buf.write("\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da\u02d8\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da\3\2\2\2")
        buf.write("\u02dd\u02d5\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3")
        buf.write("\2\2\2\u02df\u02e1\7\u010f\2\2\u02e0\u02d4\3\2\2\2\u02e0")
        buf.write("\u02e1\3\2\2\2\u02e1\u02e4\3\2\2\2\u02e2\u02e3\7X\2\2")
        buf.write("\u02e3\u02e5\5\62\32\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5")
        buf.write("\3\2\2\2\u02e5\u0311\3\2\2\2\u02e6\u02e8\7Z\2\2\u02e7")
        buf.write("\u02e9\5R*\2\u02e8\u02e7\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9")
        buf.write("\u0311\3\2\2\2\u02ea\u02ec\t\23\2\2\u02eb\u02ed\5R*\2")
        buf.write("\u02ec\u02eb\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02fa\3")
        buf.write("\2\2\2\u02ee\u02f7\7\26\2\2\u02ef\u02f4\5.\30\2\u02f0")
        buf.write("\u02f1\7\27\2\2\u02f1\u02f3\5.\30\2\u02f2\u02f0\3\2\2")
        buf.write("\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f7")
        buf.write("\u02ef\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2")
        buf.write("\u02f9\u02fb\7\u010f\2\2\u02fa\u02ee\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\7X\2\2\u02fd")
        buf.write("\u0311\5\62\32\2\u02fe\u0300\t\24\2\2\u02ff\u0301\5R*")
        buf.write("\2\u0300\u02ff\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u030e")
        buf.write("\3\2\2\2\u0302\u030b\7\26\2\2\u0303\u0308\5.\30\2\u0304")
        buf.write("\u0305\7\27\2\2\u0305\u0307\5.\30\2\u0306\u0304\3\2\2")
        buf.write("\2\u0307\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0308\u0309")
        buf.write("\3\2\2\2\u0309\u030c\3\2\2\2\u030a\u0308\3\2\2\2\u030b")
        buf.write("\u0303\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030d\3\2\2\2")
        buf.write("\u030d\u030f\7\u010f\2\2\u030e\u0302\3\2\2\2\u030e\u030f")
        buf.write("\3\2\2\2\u030f\u0311\3\2\2\2\u0310\u02bd\3\2\2\2\u0310")
        buf.write("\u02d3\3\2\2\2\u0310\u02e6\3\2\2\2\u0310\u02ea\3\2\2\2")
        buf.write("\u0310\u02fe\3\2\2\2\u0311-\3\2\2\2\u0312\u0313\7\35\2")
        buf.write("\2\u0313\u0314\5\62\32\2\u0314\u0315\b\30\1\2\u0315\u033a")
        buf.write("\3\2\2\2\u0316\u0318\7\31\2\2\u0317\u0316\3\2\2\2\u0317")
        buf.write("\u0318\3\2\2\2\u0318\u031a\3\2\2\2\u0319\u031b\7\u0102")
        buf.write("\2\2\u031a\u0319\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c")
        buf.write("\3\2\2\2\u031c\u031d\5\62\32\2\u031d\u031e\b\30\1\2\u031e")
        buf.write("\u033a\3\2\2\2\u031f\u0321\7\u0102\2\2\u0320\u031f\3\2")
        buf.write("\2\2\u0320\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323")
        buf.write("\5\62\32\2\u0323\u0324\b\30\1\2\u0324\u0325\7\u0112\2")
        buf.write("\2\u0325\u0326\b\30\1\2\u0326\u033a\3\2\2\2\u0327\u0329")
        buf.write("\7\u0102\2\2\u0328\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032a\u032b\5\62\32\2\u032b\u032c\5R*\2")
        buf.write("\u032c\u032d\b\30\1\2\u032d\u032e\b\30\1\2\u032e\u033a")
        buf.write("\3\2\2\2\u032f\u0331\7\u0102\2\2\u0330\u032f\3\2\2\2\u0330")
        buf.write("\u0331\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\5R*\2\u0333")
        buf.write("\u0334\7\u0101\2\2\u0334\u0335\5\62\32\2\u0335\u0336\b")
        buf.write("\30\1\2\u0336\u0337\b\30\1\2\u0337\u0338\b\30\1\2\u0338")
        buf.write("\u033a\3\2\2\2\u0339\u0312\3\2\2\2\u0339\u0317\3\2\2\2")
        buf.write("\u0339\u0320\3\2\2\2\u0339\u0328\3\2\2\2\u0339\u0330\3")
        buf.write("\2\2\2\u033a/\3\2\2\2\u033b\u033c\7_\2\2\u033c\u033d\7")
        buf.write("\u0108\2\2\u033d\u0363\b\31\1\2\u033e\u033f\7_\2\2\u033f")
        buf.write("\u0340\7\u0107\2\2\u0340\u0363\b\31\1\2\u0341\u0343\7")
        buf.write("\u010b\2\2\u0342\u0344\7`\2\2\u0343\u0342\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0363\b\31\1")
        buf.write("\2\u0346\u034c\7a\2\2\u0347\u0349\7\64\2\2\u0348\u034a")
        buf.write("\7$\2\2\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a")
        buf.write("\u034b\3\2\2\2\u034b\u034d\7b\2\2\u034c\u0347\3\2\2\2")
        buf.write("\u034c\u034d\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0363\b")
        buf.write("\31\1\2\u034f\u0350\7c\2\2\u0350\u0351\7d\2\2\u0351\u0363")
        buf.write("\b\31\1\2\u0352\u0353\7c\2\2\u0353\u0354\7e\2\2\u0354")
        buf.write("\u0363\b\31\1\2\u0355\u0359\7c\2\2\u0356\u035a\7f\2\2")
        buf.write("\u0357\u0358\7g\2\2\u0358\u035a\7h\2\2\u0359\u0356\3\2")
        buf.write("\2\2\u0359\u0357\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u0363")
        buf.write("\b\31\1\2\u035c\u035d\7c\2\2\u035d\u035e\7i\2\2\u035e")
        buf.write("\u0363\b\31\1\2\u035f\u0360\7c\2\2\u0360\u0361\7j\2\2")
        buf.write("\u0361\u0363\b\31\1\2\u0362\u033b\3\2\2\2\u0362\u033e")
        buf.write("\3\2\2\2\u0362\u0341\3\2\2\2\u0362\u0346\3\2\2\2\u0362")
        buf.write("\u034f\3\2\2\2\u0362\u0352\3\2\2\2\u0362\u0355\3\2\2\2")
        buf.write("\u0362\u035c\3\2\2\2\u0362\u035f\3\2\2\2\u0363\61\3\2")
        buf.write("\2\2\u0364\u0365\7\u00ff\2\2\u0365\u0366\5\64\33\2\u0366")
        buf.write("\u0367\b\32\1\2\u0367\u0372\3\2\2\2\u0368\u0369\7\26\2")
        buf.write("\2\u0369\u036a\7\u00ff\2\2\u036a\u036b\7\u010f\2\2\u036b")
        buf.write("\u036c\5\64\33\2\u036c\u036d\b\32\1\2\u036d\u0372\3\2")
        buf.write("\2\2\u036e\u036f\5\64\33\2\u036f\u0370\b\32\1\2\u0370")
        buf.write("\u0372\3\2\2\2\u0371\u0364\3\2\2\2\u0371\u0368\3\2\2\2")
        buf.write("\u0371\u036e\3\2\2\2\u0372\63\3\2\2\2\u0373\u0374\7\u0110")
        buf.write("\2\2\u0374\u0375\5\66\34\2\u0375\u0376\b\33\1\2\u0376")
        buf.write("\u0381\3\2\2\2\u0377\u0378\7\26\2\2\u0378\u0379\7\u0110")
        buf.write("\2\2\u0379\u037a\7\u010f\2\2\u037a\u037b\5\66\34\2\u037b")
        buf.write("\u037c\b\33\1\2\u037c\u0381\3\2\2\2\u037d\u037e\5\66\34")
        buf.write("\2\u037e\u037f\b\33\1\2\u037f\u0381\3\2\2\2\u0380\u0373")
        buf.write("\3\2\2\2\u0380\u0377\3\2\2\2\u0380\u037d\3\2\2\2\u0381")
        buf.write("\65\3\2\2\2\u0382\u0383\58\35\2\u0383\u0384\b\34\1\2\u0384")
        buf.write("\u0389\3\2\2\2\u0385\u0386\5:\36\2\u0386\u0387\b\34\1")
        buf.write("\2\u0387\u0389\3\2\2\2\u0388\u0382\3\2\2\2\u0388\u0385")
        buf.write("\3\2\2\2\u0389\67\3\2\2\2\u038a\u038b\5<\37\2\u038b\u038c")
        buf.write("\7)\2\2\u038c\u038d\b\35\1\2\u038d9\3\2\2\2\u038e\u038f")
        buf.write("\79\2\2\u038f\u03b1\b\36\1\2\u0390\u0391\7\36\2\2\u0391")
        buf.write("\u03b1\b\36\1\2\u0392\u0393\7`\2\2\u0393\u03b1\b\36\1")
        buf.write("\2\u0394\u0395\7k\2\2\u0395\u03b1\b\36\1\2\u0396\u0397")
        buf.write("\7l\2\2\u0397\u03b1\b\36\1\2\u0398\u0399\7m\2\2\u0399")
        buf.write("\u03b1\b\36\1\2\u039a\u039b\7n\2\2\u039b\u03b1\b\36\1")
        buf.write("\2\u039c\u039d\7o\2\2\u039d\u03b1\b\36\1\2\u039e\u039f")
        buf.write("\t\6\2\2\u039f\u03b1\b\36\1\2\u03a0\u03a1\7%\2\2\u03a1")
        buf.write("\u03b1\b\36\1\2\u03a2\u03a3\7p\2\2\u03a3\u03b1\b\36\1")
        buf.write("\2\u03a4\u03a5\7q\2\2\u03a5\u03a6\7r\2\2\u03a6\u03b1\b")
        buf.write("\36\1\2\u03a7\u03a8\7s\2\2\u03a8\u03a9\7r\2\2\u03a9\u03b1")
        buf.write("\b\36\1\2\u03aa\u03ab\5@!\2\u03ab\u03ac\b\36\1\2\u03ac")
        buf.write("\u03b1\3\2\2\2\u03ad\u03ae\5<\37\2\u03ae\u03af\b\36\1")
        buf.write("\2\u03af\u03b1\3\2\2\2\u03b0\u038e\3\2\2\2\u03b0\u0390")
        buf.write("\3\2\2\2\u03b0\u0392\3\2\2\2\u03b0\u0394\3\2\2\2\u03b0")
        buf.write("\u0396\3\2\2\2\u03b0\u0398\3\2\2\2\u03b0\u039a\3\2\2\2")
        buf.write("\u03b0\u039c\3\2\2\2\u03b0\u039e\3\2\2\2\u03b0\u03a0\3")
        buf.write("\2\2\2\u03b0\u03a2\3\2\2\2\u03b0\u03a4\3\2\2\2\u03b0\u03a7")
        buf.write("\3\2\2\2\u03b0\u03aa\3\2\2\2\u03b0\u03ad\3\2\2\2\u03b1")
        buf.write(";\3\2\2\2\u03b2\u03b3\7t\2\2\u03b3\u03c1\b\37\1\2\u03b4")
        buf.write("\u03b5\t\25\2\2\u03b5\u03c1\b\37\1\2\u03b6\u03b8\t\26")
        buf.write("\2\2\u03b7\u03b9\7y\2\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9")
        buf.write("\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03c1\b\37\1\2\u03bb")
        buf.write("\u03bc\7z\2\2\u03bc\u03c1\b\37\1\2\u03bd\u03be\5> \2\u03be")
        buf.write("\u03bf\b\37\1\2\u03bf\u03c1\3\2\2\2\u03c0\u03b2\3\2\2")
        buf.write("\2\u03c0\u03b4\3\2\2\2\u03c0\u03b6\3\2\2\2\u03c0\u03bb")
        buf.write("\3\2\2\2\u03c0\u03bd\3\2\2\2\u03c1=\3\2\2\2\u03c2\u03c3")
        buf.write("\7{\2\2\u03c3\u03d0\b \1\2\u03c4\u03c5\7|\2\2\u03c5\u03d0")
        buf.write("\b \1\2\u03c6\u03c7\7}\2\2\u03c7\u03d0\b \1\2\u03c8\u03c9")
        buf.write("\7~\2\2\u03c9\u03d0\b \1\2\u03ca\u03cb\7\177\2\2\u03cb")
        buf.write("\u03d0\b \1\2\u03cc\u03cd\t\26\2\2\u03cd\u03ce\t\27\2")
        buf.write("\2\u03ce\u03d0\b \1\2\u03cf\u03c2\3\2\2\2\u03cf\u03c4")
        buf.write("\3\2\2\2\u03cf\u03c6\3\2\2\2\u03cf\u03c8\3\2\2\2\u03cf")
        buf.write("\u03ca\3\2\2\2\u03cf\u03cc\3\2\2\2\u03d0?\3\2\2\2\u03d1")
        buf.write("\u03d2\7\u0082\2\2\u03d2\u0402\b!\1\2\u03d3\u03d5\7\u0083")
        buf.write("\2\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6")
        buf.write("\3\2\2\2\u03d6\u03d7\7\u0084\2\2\u03d7\u0402\b!\1\2\u03d8")
        buf.write("\u03d9\7\u0085\2\2\u03d9\u0402\b!\1\2\u03da\u03db\7\u0086")
        buf.write("\2\2\u03db\u03e1\t\30\2\2\u03dc\u03de\7\u0086\2\2\u03dd")
        buf.write("\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3\2\2\2")
        buf.write("\u03df\u03e1\7\u0088\2\2\u03e0\u03da\3\2\2\2\u03e0\u03dd")
        buf.write("\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u0402\b!\1\2\u03e3")
        buf.write("\u03e4\7\u0085\2\2\u03e4\u03e5\7\u0082\2\2\u03e5\u0402")
        buf.write("\b!\1\2\u03e6\u03e8\7\u0085\2\2\u03e7\u03e6\3\2\2\2\u03e7")
        buf.write("\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\7\u0089")
        buf.write("\2\2\u03ea\u0402\b!\1\2\u03eb\u03ef\7\u008a\2\2\u03ec")
        buf.write("\u03ed\7g\2\2\u03ed\u03ef\7\u008b\2\2\u03ee\u03eb\3\2")
        buf.write("\2\2\u03ee\u03ec\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u0402")
        buf.write("\b!\1\2\u03f1\u03f2\7\u008c\2\2\u03f2\u0402\b!\1\2\u03f3")
        buf.write("\u03f4\7\u008d\2\2\u03f4\u0402\b!\1\2\u03f5\u03f6\7\u008e")
        buf.write("\2\2\u03f6\u03f7\7\u008f\2\2\u03f7\u0402\b!\1\2\u03f8")
        buf.write("\u03f9\7\u008e\2\2\u03f9\u03fa\7\u0090\2\2\u03fa\u0402")
        buf.write("\b!\1\2\u03fb\u03fc\7\u0091\2\2\u03fc\u0402\b!\1\2\u03fd")
        buf.write("\u03fe\7q\2\2\u03fe\u0402\b!\1\2\u03ff\u0400\7s\2\2\u0400")
        buf.write("\u0402\b!\1\2\u0401\u03d1\3\2\2\2\u0401\u03d4\3\2\2\2")
        buf.write("\u0401\u03d8\3\2\2\2\u0401\u03e0\3\2\2\2\u0401\u03e3\3")
        buf.write("\2\2\2\u0401\u03e7\3\2\2\2\u0401\u03ee\3\2\2\2\u0401\u03f1")
        buf.write("\3\2\2\2\u0401\u03f3\3\2\2\2\u0401\u03f5\3\2\2\2\u0401")
        buf.write("\u03f8\3\2\2\2\u0401\u03fb\3\2\2\2\u0401\u03fd\3\2\2\2")
        buf.write("\u0401\u03ff\3\2\2\2\u0402A\3\2\2\2\u0403\u0404\t\31\2")
        buf.write("\2\u0404\u041a\b\"\1\2\u0405\u0406\t\32\2\2\u0406\u041a")
        buf.write("\b\"\1\2\u0407\u0408\t\33\2\2\u0408\u041a\b\"\1\2\u0409")
        buf.write("\u040a\t\34\2\2\u040a\u041a\b\"\1\2\u040b\u040c\t\35\2")
        buf.write("\2\u040c\u041a\b\"\1\2\u040d\u040e\t\36\2\2\u040e\u041a")
        buf.write("\b\"\1\2\u040f\u0410\t\37\2\2\u0410\u041a\b\"\1\2\u0411")
        buf.write("\u0412\t \2\2\u0412\u041a\b\"\1\2\u0413\u0414\t!\2\2\u0414")
        buf.write("\u041a\b\"\1\2\u0415\u0416\t\"\2\2\u0416\u041a\b\"\1\2")
        buf.write("\u0417\u0418\t#\2\2\u0418\u041a\b\"\1\2\u0419\u0403\3")
        buf.write("\2\2\2\u0419\u0405\3\2\2\2\u0419\u0407\3\2\2\2\u0419\u0409")
        buf.write("\3\2\2\2\u0419\u040b\3\2\2\2\u0419\u040d\3\2\2\2\u0419")
        buf.write("\u040f\3\2\2\2\u0419\u0411\3\2\2\2\u0419\u0413\3\2\2\2")
        buf.write("\u0419\u0415\3\2\2\2\u0419\u0417\3\2\2\2\u041aC\3\2\2")
        buf.write("\2\u041b\u041c\7\u0085\2\2\u041c\u0431\b#\1\2\u041d\u0421")
        buf.write("\7\u008a\2\2\u041e\u041f\7g\2\2\u041f\u0421\7\u008b\2")
        buf.write("\2\u0420\u041d\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422")
        buf.write("\3\2\2\2\u0422\u0431\b#\1\2\u0423\u0424\7\u008c\2\2\u0424")
        buf.write("\u0431\b#\1\2\u0425\u0426\7\u008d\2\2\u0426\u0431\b#\1")
        buf.write("\2\u0427\u0428\7\u0086\2\2\u0428\u042e\t\30\2\2\u0429")
        buf.write("\u042b\7\u0086\2\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2")
        buf.write("\2\2\u042b\u042c\3\2\2\2\u042c\u042e\7\u0088\2\2\u042d")
        buf.write("\u0427\3\2\2\2\u042d\u042a\3\2\2\2\u042e\u042f\3\2\2\2")
        buf.write("\u042f\u0431\b#\1\2\u0430\u041b\3\2\2\2\u0430\u0420\3")
        buf.write("\2\2\2\u0430\u0423\3\2\2\2\u0430\u0425\3\2\2\2\u0430\u042d")
        buf.write("\3\2\2\2\u0431E\3\2\2\2\u0432\u0433\t$\2\2\u0433G\3\2")
        buf.write("\2\2\u0434\u0435\t%\2\2\u0435I\3\2\2\2\u0436\u0439\5F")
        buf.write("$\2\u0437\u0439\5H%\2\u0438\u0436\3\2\2\2\u0438\u0437")
        buf.write("\3\2\2\2\u0439K\3\2\2\2\u043a\u043b\7\23\2\2\u043b\u049a")
        buf.write("\7\u0082\2\2\u043c\u043d\7\u00bb\2\2\u043d\u049a\t&\2")
        buf.write("\2\u043e\u043f\7\u00be\2\2\u043f\u049a\t&\2\2\u0440\u0441")
        buf.write("\7\23\2\2\u0441\u049a\t\6\2\2\u0442\u0443\7\u00bf\2\2")
        buf.write("\u0443\u049a\7\u00c0\2\2\u0444\u0445\7\u00c1\2\2\u0445")
        buf.write("\u049a\7\u00c2\2\2\u0446\u0447\7\u00c3\2\2\u0447\u049a")
        buf.write("\7\u00c2\2\2\u0448\u0449\7\u0084\2\2\u0449\u049a\t\26")
        buf.write("\2\2\u044a\u044b\7\u00c4\2\2\u044b\u049a\t\26\2\2\u044c")
        buf.write("\u044d\7\u008e\2\2\u044d\u049a\7\u008f\2\2\u044e\u044f")
        buf.write("\5J&\2\u044f\u0450\7\177\2\2\u0450\u049a\3\2\2\2\u0451")
        buf.write("\u0452\5J&\2\u0452\u0453\t\'\2\2\u0453\u049a\3\2\2\2\u0454")
        buf.write("\u0456\7\u008e\2\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2")
        buf.write("\2\2\u0456\u0457\3\2\2\2\u0457\u049a\7\u0090\2\2\u0458")
        buf.write("\u0459\7g\2\2\u0459\u049a\7\u008b\2\2\u045a\u045b\7\u00c5")
        buf.write("\2\2\u045b\u049a\7\u00c6\2\2\u045c\u045d\t(\2\2\u045d")
        buf.write("\u049a\7\u00c8\2\2\u045e\u045f\t(\2\2\u045f\u049a\7\u00c9")
        buf.write("\2\2\u0460\u0462\7\u00ca\2\2\u0461\u0463\7\u00cb\2\2\u0462")
        buf.write("\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u049a\3\2\2\2")
        buf.write("\u0464\u0466\7\u00cc\2\2\u0465\u0467\7\u00cb\2\2\u0466")
        buf.write("\u0465\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u049a\3\2\2\2")
        buf.write("\u0468\u046a\5J&\2\u0469\u046b\7\u00cb\2\2\u046a\u0469")
        buf.write("\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u049a\3\2\2\2\u046c")
        buf.write("\u046e\7\u00cd\2\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2")
        buf.write("\2\2\u046e\u0472\3\2\2\2\u046f\u0472\7\u00ce\2\2\u0470")
        buf.write("\u0472\7\u00cf\2\2\u0471\u046d\3\2\2\2\u0471\u046f\3\2")
        buf.write("\2\2\u0471\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u049a")
        buf.write("\7\u00d0\2\2\u0474\u0475\t)\2\2\u0475\u049a\t*\2\2\u0476")
        buf.write("\u0477\7\u00d5\2\2\u0477\u049a\t+\2\2\u0478\u047a\7\u00d8")
        buf.write("\2\2\u0479\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b")
        buf.write("\3\2\2\2\u047b\u047c\7\u00d9\2\2\u047c\u049a\t,\2\2\u047d")
        buf.write("\u047e\7\u0086\2\2\u047e\u049a\t\30\2\2\u047f\u049a\5")
        buf.write("V,\2\u0480\u049a\79\2\2\u0481\u049a\7\u0082\2\2\u0482")
        buf.write("\u049a\7\u0085\2\2\u0483\u049a\7~\2\2\u0484\u049a\7%\2")
        buf.write("\2\u0485\u049a\7\u008a\2\2\u0486\u049a\7\u008c\2\2\u0487")
        buf.write("\u049a\7\u008d\2\2\u0488\u049a\7`\2\2\u0489\u049a\7\u0091")
        buf.write("\2\2\u048a\u049a\7\u00c0\2\2\u048b\u049a\7s\2\2\u048c")
        buf.write("\u049a\7z\2\2\u048d\u049a\7x\2\2\u048e\u049a\7w\2\2\u048f")
        buf.write("\u049a\7\u0089\2\2\u0490\u049a\7 \2\2\u0491\u049a\7!\2")
        buf.write("\2\u0492\u049a\7O\2\2\u0493\u049a\7Q\2\2\u0494\u049a\7")
        buf.write("R\2\2\u0495\u049a\7\177\2\2\u0496\u049a\7\u0090\2\2\u0497")
        buf.write("\u049a\7\u00cb\2\2\u0498\u049a\7\u0111\2\2\u0499\u043a")
        buf.write("\3\2\2\2\u0499\u043c\3\2\2\2\u0499\u043e\3\2\2\2\u0499")
        buf.write("\u0440\3\2\2\2\u0499\u0442\3\2\2\2\u0499\u0444\3\2\2\2")
        buf.write("\u0499\u0446\3\2\2\2\u0499\u0448\3\2\2\2\u0499\u044a\3")
        buf.write("\2\2\2\u0499\u044c\3\2\2\2\u0499\u044e\3\2\2\2\u0499\u0451")
        buf.write("\3\2\2\2\u0499\u0455\3\2\2\2\u0499\u0458\3\2\2\2\u0499")
        buf.write("\u045a\3\2\2\2\u0499\u045c\3\2\2\2\u0499\u045e\3\2\2\2")
        buf.write("\u0499\u0460\3\2\2\2\u0499\u0464\3\2\2\2\u0499\u0468\3")
        buf.write("\2\2\2\u0499\u0471\3\2\2\2\u0499\u0474\3\2\2\2\u0499\u0476")
        buf.write("\3\2\2\2\u0499\u0479\3\2\2\2\u0499\u047d\3\2\2\2\u0499")
        buf.write("\u047f\3\2\2\2\u0499\u0480\3\2\2\2\u0499\u0481\3\2\2\2")
        buf.write("\u0499\u0482\3\2\2\2\u0499\u0483\3\2\2\2\u0499\u0484\3")
        buf.write("\2\2\2\u0499\u0485\3\2\2\2\u0499\u0486\3\2\2\2\u0499\u0487")
        buf.write("\3\2\2\2\u0499\u0488\3\2\2\2\u0499\u0489\3\2\2\2\u0499")
        buf.write("\u048a\3\2\2\2\u0499\u048b\3\2\2\2\u0499\u048c\3\2\2\2")
        buf.write("\u0499\u048d\3\2\2\2\u0499\u048e\3\2\2\2\u0499\u048f\3")
        buf.write("\2\2\2\u0499\u0490\3\2\2\2\u0499\u0491\3\2\2\2\u0499\u0492")
        buf.write("\3\2\2\2\u0499\u0493\3\2\2\2\u0499\u0494\3\2\2\2\u0499")
        buf.write("\u0495\3\2\2\2\u0499\u0496\3\2\2\2\u0499\u0497\3\2\2\2")
        buf.write("\u0499\u0498\3\2\2\2\u049aM\3\2\2\2\u049b\u049c\7\u00dc")
        buf.write("\2\2\u049c\u04a8\b(\1\2\u049d\u049e\7\u00dd\2\2\u049e")
        buf.write("\u04a8\b(\1\2\u049f\u04a0\7\u00de\2\2\u04a0\u04a8\b(\1")
        buf.write("\2\u04a1\u04a2\7\u00df\2\2\u04a2\u04a8\b(\1\2\u04a3\u04a4")
        buf.write("\7\u00e0\2\2\u04a4\u04a8\b(\1\2\u04a5\u04a6\7\u00e1\2")
        buf.write("\2\u04a6\u04a8\b(\1\2\u04a7\u049b\3\2\2\2\u04a7\u049d")
        buf.write("\3\2\2\2\u04a7\u049f\3\2\2\2\u04a7\u04a1\3\2\2\2\u04a7")
        buf.write("\u04a3\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a8O\3\2\2\2\u04a9")
        buf.write("\u04aa\t-\2\2\u04aa\u04ae\b)\1\2\u04ab\u04ac\t.\2\2\u04ac")
        buf.write("\u04ae\b)\1\2\u04ad\u04a9\3\2\2\2\u04ad\u04ab\3\2\2\2")
        buf.write("\u04aeQ\3\2\2\2\u04af\u04b0\5T+\2\u04b0\u04b1\b*\1\2\u04b1")
        buf.write("\u04b8\3\2\2\2\u04b2\u04b3\7\u0111\2\2\u04b3\u04b8\b*")
        buf.write("\1\2\u04b4\u04b5\5V,\2\u04b5\u04b6\b*\1\2\u04b6\u04b8")
        buf.write("\3\2\2\2\u04b7\u04af\3\2\2\2\u04b7\u04b2\3\2\2\2\u04b7")
        buf.write("\u04b4\3\2\2\2\u04b8S\3\2\2\2\u04b9\u04bb\7\u0108\2\2")
        buf.write("\u04ba\u04bc\7$\2\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3")
        buf.write("\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be\7b\2\2\u04be\u050c")
        buf.write("\b+\1\2\u04bf\u04c1\7$\2\2\u04c0\u04bf\3\2\2\2\u04c0\u04c1")
        buf.write("\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\7\u0100\2\2\u04c3")
        buf.write("\u04c4\7%\2\2\u04c4\u050c\b+\1\2\u04c5\u04c7\7$\2\2\u04c6")
        buf.write("\u04c5\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2\2")
        buf.write("\u04c8\u04c9\7\u0100\2\2\u04c9\u04ca\7~\2\2\u04ca\u050c")
        buf.write("\b+\1\2\u04cb\u04cc\7$\2\2\u04cc\u04cd\7b\2\2\u04cd\u050c")
        buf.write("\b+\1\2\u04ce\u04d0\7$\2\2\u04cf\u04ce\3\2\2\2\u04cf\u04d0")
        buf.write("\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04d3\7\u00cc\2\2\u04d2")
        buf.write("\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\3\2\2\2")
        buf.write("\u04d4\u04d5\7\u00ee\2\2\u04d5\u04d6\7\u0082\2\2\u04d6")
        buf.write("\u050c\b+\1\2\u04d7\u04d9\7$\2\2\u04d8\u04d7\3\2\2\2\u04d8")
        buf.write("\u04d9\3\2\2\2\u04d9\u04db\3\2\2\2\u04da\u04dc\7\u00cc")
        buf.write("\2\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04de\7\u00ee\2\2\u04de\u04df\79\2\2\u04df")
        buf.write("\u050c\b+\1\2\u04e0\u04e2\7\u00ef\2\2\u04e1\u04e3\7\35")
        buf.write("\2\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4")
        buf.write("\3\2\2\2\u04e4\u04e5\79\2\2\u04e5\u050c\b+\1\2\u04e6\u04e7")
        buf.write("\7\u00f0\2\2\u04e7\u04e8\7\u0085\2\2\u04e8\u050c\b+\1")
        buf.write("\2\u04e9\u04ea\7\u00f1\2\2\u04ea\u04eb\7\f\2\2\u04eb\u050c")
        buf.write("\b+\1\2\u04ec\u04ed\7\u00f1\2\2\u04ed\u04ee\7\u00f2\2")
        buf.write("\2\u04ee\u050c\b+\1\2\u04ef\u04f0\7\u00f3\2\2\u04f0\u04f1")
        buf.write("\7\r\2\2\u04f1\u04f2\7\u00ef\2\2\u04f2\u050c\b+\1\2\u04f3")
        buf.write("\u04f9\7\u00f4\2\2\u04f4\u04f6\7\35\2\2\u04f5\u04f4\3")
        buf.write("\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04fa")
        buf.write("\7r\2\2\u04f8\u04fa\7\u00f5\2\2\u04f9\u04f5\3\2\2\2\u04f9")
        buf.write("\u04f8\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u050c\b+\1\2")
        buf.write("\u04fc\u04fd\7\u00c4\2\2\u04fd\u04fe\7{\2\2\u04fe\u050c")
        buf.write("\b+\1\2\u04ff\u0500\7{\2\2\u0500\u0501\7\u00f6\2\2\u0501")
        buf.write("\u050c\b+\1\2\u0502\u0504\7\u00f7\2\2\u0503\u0505\7\r")
        buf.write("\2\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507")
        buf.write("\3\2\2\2\u0506\u0508\7\u00d8\2\2\u0507\u0506\3\2\2\2\u0507")
        buf.write("\u0508\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050a\7\u00d9")
        buf.write("\2\2\u050a\u050c\b+\1\2\u050b\u04b9\3\2\2\2\u050b\u04c0")
        buf.write("\3\2\2\2\u050b\u04c6\3\2\2\2\u050b\u04cb\3\2\2\2\u050b")
        buf.write("\u04cf\3\2\2\2\u050b\u04d8\3\2\2\2\u050b\u04e0\3\2\2\2")
        buf.write("\u050b\u04e6\3\2\2\2\u050b\u04e9\3\2\2\2\u050b\u04ec\3")
        buf.write("\2\2\2\u050b\u04ef\3\2\2\2\u050b\u04f3\3\2\2\2\u050b\u04fc")
        buf.write("\3\2\2\2\u050b\u04ff\3\2\2\2\u050b\u0502\3\2\2\2\u050c")
        buf.write("U\3\2\2\2\u050d\u055f\7\u0092\2\2\u050e\u055f\7\u0097")
        buf.write("\2\2\u050f\u055f\7\u00be\2\2\u0510\u055f\7\u00bb\2\2\u0511")
        buf.write("\u055f\7\35\2\2\u0512\u055f\7\31\2\2\u0513\u055f\7\u00c5")
        buf.write("\2\2\u0514\u055f\7\u00f8\2\2\u0515\u055f\7#\2\2\u0516")
        buf.write("\u055f\7\u0108\2\2\u0517\u055f\7\u0107\2\2\u0518\u055f")
        buf.write("\7\"\2\2\u0519\u055f\7\u009c\2\2\u051a\u055f\7\u00b9\2")
        buf.write("\2\u051b\u055f\7\u00b8\2\2\u051c\u055f\7\u00ba\2\2\u051d")
        buf.write("\u055f\7\u0080\2\2\u051e\u055f\7\u0081\2\2\u051f\u055f")
        buf.write("\7l\2\2\u0520\u055f\7y\2\2\u0521\u055f\7\u00f9\2\2\u0522")
        buf.write("\u055f\7\u00fa\2\2\u0523\u055f\7\u00ef\2\2\u0524\u055f")
        buf.write("\7\u00f0\2\2\u0525\u055f\7c\2\2\u0526\u055f\7e\2\2\u0527")
        buf.write("\u055f\7d\2\2\u0528\u055f\7f\2\2\u0529\u055f\7i\2\2\u052a")
        buf.write("\u055f\7j\2\2\u052b\u055f\7A\2\2\u052c\u055f\7\u00cc\2")
        buf.write("\2\u052d\u055f\7\u00ee\2\2\u052e\u055f\7\u0087\2\2\u052f")
        buf.write("\u055f\7\u00f1\2\2\u0530\u055f\7\f\2\2\u0531\u055f\7\u00f2")
        buf.write("\2\2\u0532\u055f\7g\2\2\u0533\u055f\7\u008b\2\2\u0534")
        buf.write("\u055f\7h\2\2\u0535\u055f\7\u00c1\2\2\u0536\u055f\7\u00c3")
        buf.write("\2\2\u0537\u055f\7\u00c2\2\2\u0538\u055f\7\u00f3\2\2\u0539")
        buf.write("\u055f\7\r\2\2\u053a\u055f\7\u00ef\2\2\u053b\u055f\7\u00c6")
        buf.write("\2\2\u053c\u055f\7\u00c7\2\2\u053d\u055f\7\u00c8\2\2\u053e")
        buf.write("\u055f\7\u00c9\2\2\u053f\u055f\7r\2\2\u0540\u055f\7\u0084")
        buf.write("\2\2\u0541\u055f\7\u00ca\2\2\u0542\u055f\7\u00cc\2\2\u0543")
        buf.write("\u055f\7\u00cb\2\2\u0544\u055f\7\u00c4\2\2\u0545\u055f")
        buf.write("\7\u00f6\2\2\u0546\u055f\7\23\2\2\u0547\u055f\7\u00bc")
        buf.write("\2\2\u0548\u055f\7\u00bd\2\2\u0549\u055f\7\u0090\2\2\u054a")
        buf.write("\u055f\5J&\2\u054b\u055f\7\u00cd\2\2\u054c\u055f\7\u00ce")
        buf.write("\2\2\u054d\u055f\7\u00cf\2\2\u054e\u055f\7\u00d0\2\2\u054f")
        buf.write("\u055f\7\u00d1\2\2\u0550\u055f\7\u00d2\2\2\u0551\u055f")
        buf.write("\7\u00d3\2\2\u0552\u055f\7\u00d4\2\2\u0553\u055f\7\u00d5")
        buf.write("\2\2\u0554\u055f\7 \2\2\u0555\u055f\7\u00d6\2\2\u0556")
        buf.write("\u055f\7\u00d7\2\2\u0557\u055f\7\u00d8\2\2\u0558\u055f")
        buf.write("\7\u00d9\2\2\u0559\u055f\7\u00da\2\2\u055a\u055f\7\u00db")
        buf.write("\2\2\u055b\u055f\7*\2\2\u055c\u055f\7\32\2\2\u055d\u055f")
        buf.write("\7)\2\2\u055e\u050d\3\2\2\2\u055e\u050e\3\2\2\2\u055e")
        buf.write("\u050f\3\2\2\2\u055e\u0510\3\2\2\2\u055e\u0511\3\2\2\2")
        buf.write("\u055e\u0512\3\2\2\2\u055e\u0513\3\2\2\2\u055e\u0514\3")
        buf.write("\2\2\2\u055e\u0515\3\2\2\2\u055e\u0516\3\2\2\2\u055e\u0517")
        buf.write("\3\2\2\2\u055e\u0518\3\2\2\2\u055e\u0519\3\2\2\2\u055e")
        buf.write("\u051a\3\2\2\2\u055e\u051b\3\2\2\2\u055e\u051c\3\2\2\2")
        buf.write("\u055e\u051d\3\2\2\2\u055e\u051e\3\2\2\2\u055e\u051f\3")
        buf.write("\2\2\2\u055e\u0520\3\2\2\2\u055e\u0521\3\2\2\2\u055e\u0522")
        buf.write("\3\2\2\2\u055e\u0523\3\2\2\2\u055e\u0524\3\2\2\2\u055e")
        buf.write("\u0525\3\2\2\2\u055e\u0526\3\2\2\2\u055e\u0527\3\2\2\2")
        buf.write("\u055e\u0528\3\2\2\2\u055e\u0529\3\2\2\2\u055e\u052a\3")
        buf.write("\2\2\2\u055e\u052b\3\2\2\2\u055e\u052c\3\2\2\2\u055e\u052d")
        buf.write("\3\2\2\2\u055e\u052e\3\2\2\2\u055e\u052f\3\2\2\2\u055e")
        buf.write("\u0530\3\2\2\2\u055e\u0531\3\2\2\2\u055e\u0532\3\2\2\2")
        buf.write("\u055e\u0533\3\2\2\2\u055e\u0534\3\2\2\2\u055e\u0535\3")
        buf.write("\2\2\2\u055e\u0536\3\2\2\2\u055e\u0537\3\2\2\2\u055e\u0538")
        buf.write("\3\2\2\2\u055e\u0539\3\2\2\2\u055e\u053a\3\2\2\2\u055e")
        buf.write("\u053b\3\2\2\2\u055e\u053c\3\2\2\2\u055e\u053d\3\2\2\2")
        buf.write("\u055e\u053e\3\2\2\2\u055e\u053f\3\2\2\2\u055e\u0540\3")
        buf.write("\2\2\2\u055e\u0541\3\2\2\2\u055e\u0542\3\2\2\2\u055e\u0543")
        buf.write("\3\2\2\2\u055e\u0544\3\2\2\2\u055e\u0545\3\2\2\2\u055e")
        buf.write("\u0546\3\2\2\2\u055e\u0547\3\2\2\2\u055e\u0548\3\2\2\2")
        buf.write("\u055e\u0549\3\2\2\2\u055e\u054a\3\2\2\2\u055e\u054b\3")
        buf.write("\2\2\2\u055e\u054c\3\2\2\2\u055e\u054d\3\2\2\2\u055e\u054e")
        buf.write("\3\2\2\2\u055e\u054f\3\2\2\2\u055e\u0550\3\2\2\2\u055e")
        buf.write("\u0551\3\2\2\2\u055e\u0552\3\2\2\2\u055e\u0553\3\2\2\2")
        buf.write("\u055e\u0554\3\2\2\2\u055e\u0555\3\2\2\2\u055e\u0556\3")
        buf.write("\2\2\2\u055e\u0557\3\2\2\2\u055e\u0558\3\2\2\2\u055e\u0559")
        buf.write("\3\2\2\2\u055e\u055a\3\2\2\2\u055e\u055b\3\2\2\2\u055e")
        buf.write("\u055c\3\2\2\2\u055e\u055d\3\2\2\2\u055fW\3\2\2\2\u0560")
        buf.write("\u0561\7\u0114\2\2\u0561Y\3\2\2\2\u0562\u0563\7\23\2\2")
        buf.write("\u0563\u0564\7\u0082\2\2\u0564\u05a4\b.\1\2\u0565\u0566")
        buf.write("\7\u00bb\2\2\u0566\u0567\t&\2\2\u0567\u05a4\b.\1\2\u0568")
        buf.write("\u0569\7\u00be\2\2\u0569\u056a\t&\2\2\u056a\u05a4\b.\1")
        buf.write("\2\u056b\u056c\7\23\2\2\u056c\u056d\t\6\2\2\u056d\u05a4")
        buf.write("\b.\1\2\u056e\u056f\7\u00bf\2\2\u056f\u0570\7\u00c0\2")
        buf.write("\2\u0570\u05a4\b.\1\2\u0571\u0572\7\u00c1\2\2\u0572\u0573")
        buf.write("\7\u00c2\2\2\u0573\u05a4\b.\1\2\u0574\u0575\7\u00c3\2")
        buf.write("\2\u0575\u0576\7\u00c2\2\2\u0576\u05a4\b.\1\2\u0577\u0578")
        buf.write("\7\u0084\2\2\u0578\u0579\t\26\2\2\u0579\u05a4\b.\1\2\u057a")
        buf.write("\u057b\7\u00c4\2\2\u057b\u057c\t\26\2\2\u057c\u05a4\b")
        buf.write(".\1\2\u057d\u057e\7\u008e\2\2\u057e\u057f\7\u008f\2\2")
        buf.write("\u057f\u05a4\b.\1\2\u0580\u0581\t$\2\2\u0581\u0582\7\177")
        buf.write("\2\2\u0582\u05a4\b.\1\2\u0583\u0584\t%\2\2\u0584\u0585")
        buf.write("\7\177\2\2\u0585\u05a4\b.\1\2\u0586\u0587\t$\2\2\u0587")
        buf.write("\u0588\t\'\2\2\u0588\u05a4\b.\1\2\u0589\u058a\t%\2\2\u058a")
        buf.write("\u058b\t\'\2\2\u058b\u05a4\b.\1\2\u058c\u058d\7\u008e")
        buf.write("\2\2\u058d\u058e\7\u0090\2\2\u058e\u05a4\b.\1\2\u058f")
        buf.write("\u0590\7g\2\2\u0590\u0591\7\u008b\2\2\u0591\u05a4\b.\1")
        buf.write("\2\u0592\u0593\7\u00c5\2\2\u0593\u0594\7\u00c6\2\2\u0594")
        buf.write("\u05a4\b.\1\2\u0595\u0596\t(\2\2\u0596\u0597\7\u00c8\2")
        buf.write("\2\u0597\u05a4\b.\1\2\u0598\u0599\t(\2\2\u0599\u059a\7")
        buf.write("\u00c9\2\2\u059a\u05a4\b.\1\2\u059b\u059c\7\u00ca\2\2")
        buf.write("\u059c\u059d\7\u00cb\2\2\u059d\u05a4\b.\1\2\u059e\u059f")
        buf.write("\7\u00cc\2\2\u059f\u05a0\7\u00cb\2\2\u05a0\u05a4\b.\1")
        buf.write("\2\u05a1\u05a2\t/\2\2\u05a2\u05a4\b.\1\2\u05a3\u0562\3")
        buf.write("\2\2\2\u05a3\u0565\3\2\2\2\u05a3\u0568\3\2\2\2\u05a3\u056b")
        buf.write("\3\2\2\2\u05a3\u056e\3\2\2\2\u05a3\u0571\3\2\2\2\u05a3")
        buf.write("\u0574\3\2\2\2\u05a3\u0577\3\2\2\2\u05a3\u057a\3\2\2\2")
        buf.write("\u05a3\u057d\3\2\2\2\u05a3\u0580\3\2\2\2\u05a3\u0583\3")
        buf.write("\2\2\2\u05a3\u0586\3\2\2\2\u05a3\u0589\3\2\2\2\u05a3\u058c")
        buf.write("\3\2\2\2\u05a3\u058f\3\2\2\2\u05a3\u0592\3\2\2\2\u05a3")
        buf.write("\u0595\3\2\2\2\u05a3\u0598\3\2\2\2\u05a3\u059b\3\2\2\2")
        buf.write("\u05a3\u059e\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4[\3\2\2")
        buf.write("\2\u008b_luz}\u0088\u00a8\u00ae\u00b3\u00c3\u00c8\u00d5")
        buf.write("\u00db\u00e3\u00e7\u00fc\u0105\u0107\u0111\u0118\u011b")
        buf.write("\u0121\u0129\u012f\u0135\u0149\u0150\u0154\u0157\u015b")
        buf.write("\u0161\u016a\u0173\u0177\u0180\u018d\u0195\u019c\u01a3")
        buf.write("\u01a6\u01ae\u01bd\u01c5\u01d0\u01e5\u01fb\u01fe\u0220")
        buf.write("\u0223\u0230\u0239\u023e\u025f\u0261\u0276\u0281\u0287")
        buf.write("\u0295\u029d\u02ad\u02b3\u02bb\u02bf\u02c7\u02ca\u02cd")
        buf.write("\u02d1\u02da\u02dd\u02e0\u02e4\u02e8\u02ec\u02f4\u02f7")
        buf.write("\u02fa\u0300\u0308\u030b\u030e\u0310\u0317\u031a\u0320")
        buf.write("\u0328\u0330\u0339\u0343\u0349\u034c\u0359\u0362\u0371")
        buf.write("\u0380\u0388\u03b0\u03b8\u03c0\u03cf\u03d4\u03dd\u03e0")
        buf.write("\u03e7\u03ee\u0401\u0419\u0420\u042a\u042d\u0430\u0438")
        buf.write("\u0455\u0462\u0466\u046a\u046d\u0471\u0479\u0499\u04a7")
        buf.write("\u04ad\u04b7\u04bb\u04c0\u04c6\u04cf\u04d2\u04d8\u04db")
        buf.write("\u04e2\u04f5\u04f9\u0504\u0507\u050b\u055e\u05a3")
        return buf.getvalue()


class DMFParser ( Parser ):

    grammarFileName = "DMF.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'{'", "'}'", "'[['", 
                     "']]'", "'times'", "'for'", "'with'", "'in'", "'to'", 
                     "'by'", "'down'", "'up'", "'['", "'repeat'", "'exit'", 
                     "'loop'", "'return'", "'('", "','", "'#'", "'an'", 
                     "'empty'", "'magnitude'", "'as'", "'a'", "'string'", 
                     "'turned'", "'dir'", "'direction'", "'per'", "'C'", 
                     "'the'", "'reagent'", "'named'", "'of'", "'is'", "'sample'", 
                     "'containing'", "'and'", "'or'", "'pause'", "'wait'", 
                     "'user'", "'prompt'", "'print'", "'accept'", "'merge'", 
                     "'from'", "'into'", "'mix'", "'split'", "'become'", 
                     "'drop'", "'@'", "'at'", "'exists'", "'does'", "'exist'", 
                     "'doesn't'", "'is missing'", "'missing'", "'has'", 
                     "'have'", "'unknown'", "'waste'", "'north'", "'south'", 
                     "'left'", "'west'", "'right'", "'east'", "'clockwise'", 
                     "'counterclockwise'", "'around'", "'row'", "'rows'", 
                     "'col'", "'column'", "'cols'", "'columns'", "'macro'", 
                     "'define'", "'def'", "'->'", "'lambda'", "'action'", 
                     "'function'", "'func'", "'procedure'", "'proc'", "'turn'", 
                     "'state'", "'remove'", "'board'", "'reset'", "'pads'", 
                     "'magnets'", "'heaters'", "'heating'", "'zones'", "'chillers'", 
                     "'all'", "'binary'", "'delta'", "'motion'", "'delay'", 
                     "'bool'", "'liquid'", "'sensor'", "'reading'", "'eselog'", 
                     "'int'", "'float'", "'real'", "'temp'", "'temperature'", 
                     "'point'", "'timestamp'", "'time'", "'frequency'", 
                     "'ticks'", "'volume'", "'voltage'", "'diff'", "'difference'", 
                     "'pad'", "'pipetting'", "'target'", "'well'", "'extraction'", 
                     "'port'", "'hole'", "'gate'", "'heater'", "'zone'", 
                     "'chiller'", "'magnet'", "'power'", "'supply'", "'mode'", 
                     "'fan'", "'s'", "'sec'", "'secs'", "'second'", "'seconds'", 
                     "'ms'", "'millisecond'", "'milliseconds'", "'minute'", 
                     "'minutes'", "'min'", "'mins'", "'hour'", "'hours'", 
                     "'hr'", "'hrs'", "'uL'", "'ul'", "'microliter'", "'microlitre'", 
                     "'microliters'", "'microlitres'", "'mL'", "'ml'", "'milliliter'", 
                     "'millilitre'", "'milliliters'", "'millilitres'", "'tick'", 
                     "'drops'", "'V'", "'volt'", "'volts'", "'mV'", "'millivolt'", 
                     "'millivolts'", "'Hz'", "'hz'", "'minimum'", "'max'", 
                     "'maximum'", "'y'", "'coord'", "'coordinate'", "'x'", 
                     "'remaining'", "'capacity'", "'fill'", "'level'", "'refill'", 
                     "'current'", "'n'", "'samples'", "'sampling'", "'rate'", 
                     "'interval'", "'first'", "'value'", "'last'", "'arithmetic'", 
                     "'harmonic'", "'geometric'", "'mean'", "'std'", "'standard'", 
                     "'dev'", "'deviation'", "'log'", "'directory'", "'folder'", 
                     "'csv'", "'file'", "'name'", "'template'", "'=='", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'True'", "'true'", 
                     "'TRUE'", "'Yes'", "'yes'", "'YES'", "'False'", "'false'", 
                     "'FALSE'", "'No'", "'no'", "'NO'", "'clicked'", "'dispense'", 
                     "'enter'", "'transfer'", "'out'", "'prepare'", "'take'", 
                     "'readings'", "'now'", "'write'", "'F'", "'index'", 
                     "'base'", "'+'", "'='", "<INVALID>", "'/'", "'future'", 
                     "'interactive'", "':'", "'injectable'", "'isn't'", 
                     "'local'", "'*'", "'not'", "'off'", "'on'", "'-'", 
                     "';'", "'toggle'", "'until'", "'while'", "']'", "')'", 
                     "'maybe'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ADD", "ASSIGN", "ATTR", "DIV", "FUTURE", 
                      "INTERACTIVE", "INJECT", "INJECTABLE", "ISNT", "LOCAL", 
                      "MUL", "NOT", "OFF", "ON", "SUB", "TERMINATOR", "TOGGLE", 
                      "UNTIL", "WHILE", "CLOSE_BRACKET", "CLOSE_PAREN", 
                      "MAYBE", "ID", "INT", "FLOAT", "STRING", "EOL_COMMENT", 
                      "COMMENT", "WS" ]

    RULE_macro_file = 0
    RULE_interactive = 1
    RULE_declaration = 2
    RULE_stat = 3
    RULE_compound = 4
    RULE_loop_header = 5
    RULE_step_first_and_dir = 6
    RULE_loop = 7
    RULE_exit = 8
    RULE_ret = 9
    RULE_term_punct = 10
    RULE_expr = 11
    RULE_existence = 12
    RULE_possession = 13
    RULE_reagent = 14
    RULE_direction = 15
    RULE_turn = 16
    RULE_rc = 17
    RULE_axis = 18
    RULE_macro_declaration = 19
    RULE_macro_def = 20
    RULE_macro_header = 21
    RULE_param = 22
    RULE_no_arg_action = 23
    RULE_value_type = 24
    RULE_not_future_type = 25
    RULE_not_maybe_type = 26
    RULE_sample_type = 27
    RULE_atomic_type = 28
    RULE_sampleable_type = 29
    RULE_quantity_type = 30
    RULE_component_type = 31
    RULE_dim_unit = 32
    RULE_numbered_type = 33
    RULE_minimum = 34
    RULE_maximum = 35
    RULE_min_max = 36
    RULE_attr = 37
    RULE_rel = 38
    RULE_bool_val = 39
    RULE_name = 40
    RULE_multi_word_name = 41
    RULE_kwd_names = 42
    RULE_string = 43
    RULE_old_attr = 44

    ruleNames =  [ "macro_file", "interactive", "declaration", "stat", "compound", 
                   "loop_header", "step_first_and_dir", "loop", "exit", 
                   "ret", "term_punct", "expr", "existence", "possession", 
                   "reagent", "direction", "turn", "rc", "axis", "macro_declaration", 
                   "macro_def", "macro_header", "param", "no_arg_action", 
                   "value_type", "not_future_type", "not_maybe_type", "sample_type", 
                   "atomic_type", "sampleable_type", "quantity_type", "component_type", 
                   "dim_unit", "numbered_type", "minimum", "maximum", "min_max", 
                   "attr", "rel", "bool_val", "name", "multi_word_name", 
                   "kwd_names", "string", "old_attr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    T__216=217
    T__217=218
    T__218=219
    T__219=220
    T__220=221
    T__221=222
    T__222=223
    T__223=224
    T__224=225
    T__225=226
    T__226=227
    T__227=228
    T__228=229
    T__229=230
    T__230=231
    T__231=232
    T__232=233
    T__233=234
    T__234=235
    T__235=236
    T__236=237
    T__237=238
    T__238=239
    T__239=240
    T__240=241
    T__241=242
    T__242=243
    T__243=244
    T__244=245
    T__245=246
    T__246=247
    T__247=248
    ADD=249
    ASSIGN=250
    ATTR=251
    DIV=252
    FUTURE=253
    INTERACTIVE=254
    INJECT=255
    INJECTABLE=256
    ISNT=257
    LOCAL=258
    MUL=259
    NOT=260
    OFF=261
    ON=262
    SUB=263
    TERMINATOR=264
    TOGGLE=265
    UNTIL=266
    WHILE=267
    CLOSE_BRACKET=268
    CLOSE_PAREN=269
    MAYBE=270
    ID=271
    INT=272
    FLOAT=273
    STRING=274
    EOL_COMMENT=275
    COMMENT=276
    WS=277

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Macro_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_file" ):
                listener.enterMacro_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_file" ):
                listener.exitMacro_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_file" ):
                return visitor.visitMacro_file(self)
            else:
                return visitor.visitChildren(self)




    def macro_file(self):

        localctx = DMFParser.Macro_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_macro_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__48) | (1 << DMFParser.T__51) | (1 << DMFParser.T__52) | (1 << DMFParser.T__53) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (DMFParser.T__65 - 66)) | (1 << (DMFParser.T__66 - 66)) | (1 << (DMFParser.T__67 - 66)) | (1 << (DMFParser.T__68 - 66)) | (1 << (DMFParser.T__69 - 66)) | (1 << (DMFParser.T__70 - 66)) | (1 << (DMFParser.T__71 - 66)) | (1 << (DMFParser.T__72 - 66)) | (1 << (DMFParser.T__82 - 66)) | (1 << (DMFParser.T__83 - 66)) | (1 << (DMFParser.T__84 - 66)) | (1 << (DMFParser.T__86 - 66)) | (1 << (DMFParser.T__87 - 66)) | (1 << (DMFParser.T__88 - 66)) | (1 << (DMFParser.T__89 - 66)) | (1 << (DMFParser.T__90 - 66)) | (1 << (DMFParser.T__91 - 66)) | (1 << (DMFParser.T__92 - 66)) | (1 << (DMFParser.T__93 - 66)) | (1 << (DMFParser.T__94 - 66)) | (1 << (DMFParser.T__96 - 66)) | (1 << (DMFParser.T__97 - 66)) | (1 << (DMFParser.T__98 - 66)) | (1 << (DMFParser.T__99 - 66)) | (1 << (DMFParser.T__100 - 66)) | (1 << (DMFParser.T__101 - 66)) | (1 << (DMFParser.T__102 - 66)) | (1 << (DMFParser.T__103 - 66)) | (1 << (DMFParser.T__104 - 66)) | (1 << (DMFParser.T__105 - 66)) | (1 << (DMFParser.T__106 - 66)) | (1 << (DMFParser.T__107 - 66)) | (1 << (DMFParser.T__108 - 66)) | (1 << (DMFParser.T__109 - 66)) | (1 << (DMFParser.T__110 - 66)) | (1 << (DMFParser.T__111 - 66)) | (1 << (DMFParser.T__112 - 66)) | (1 << (DMFParser.T__113 - 66)) | (1 << (DMFParser.T__114 - 66)) | (1 << (DMFParser.T__115 - 66)) | (1 << (DMFParser.T__116 - 66)) | (1 << (DMFParser.T__117 - 66)) | (1 << (DMFParser.T__118 - 66)) | (1 << (DMFParser.T__119 - 66)) | (1 << (DMFParser.T__120 - 66)) | (1 << (DMFParser.T__121 - 66)) | (1 << (DMFParser.T__122 - 66)) | (1 << (DMFParser.T__123 - 66)) | (1 << (DMFParser.T__124 - 66)) | (1 << (DMFParser.T__125 - 66)) | (1 << (DMFParser.T__126 - 66)) | (1 << (DMFParser.T__127 - 66)) | (1 << (DMFParser.T__128 - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (DMFParser.T__129 - 130)) | (1 << (DMFParser.T__130 - 130)) | (1 << (DMFParser.T__131 - 130)) | (1 << (DMFParser.T__132 - 130)) | (1 << (DMFParser.T__133 - 130)) | (1 << (DMFParser.T__134 - 130)) | (1 << (DMFParser.T__135 - 130)) | (1 << (DMFParser.T__136 - 130)) | (1 << (DMFParser.T__137 - 130)) | (1 << (DMFParser.T__138 - 130)) | (1 << (DMFParser.T__139 - 130)) | (1 << (DMFParser.T__141 - 130)) | (1 << (DMFParser.T__142 - 130)) | (1 << (DMFParser.T__143 - 130)) | (1 << (DMFParser.T__148 - 130)) | (1 << (DMFParser.T__153 - 130)) | (1 << (DMFParser.T__181 - 130)) | (1 << (DMFParser.T__182 - 130)) | (1 << (DMFParser.T__183 - 130)) | (1 << (DMFParser.T__184 - 130)) | (1 << (DMFParser.T__185 - 130)) | (1 << (DMFParser.T__186 - 130)) | (1 << (DMFParser.T__187 - 130)) | (1 << (DMFParser.T__190 - 130)) | (1 << (DMFParser.T__191 - 130)) | (1 << (DMFParser.T__192 - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (DMFParser.T__193 - 194)) | (1 << (DMFParser.T__194 - 194)) | (1 << (DMFParser.T__195 - 194)) | (1 << (DMFParser.T__196 - 194)) | (1 << (DMFParser.T__197 - 194)) | (1 << (DMFParser.T__198 - 194)) | (1 << (DMFParser.T__199 - 194)) | (1 << (DMFParser.T__200 - 194)) | (1 << (DMFParser.T__201 - 194)) | (1 << (DMFParser.T__202 - 194)) | (1 << (DMFParser.T__203 - 194)) | (1 << (DMFParser.T__204 - 194)) | (1 << (DMFParser.T__205 - 194)) | (1 << (DMFParser.T__206 - 194)) | (1 << (DMFParser.T__207 - 194)) | (1 << (DMFParser.T__208 - 194)) | (1 << (DMFParser.T__209 - 194)) | (1 << (DMFParser.T__210 - 194)) | (1 << (DMFParser.T__211 - 194)) | (1 << (DMFParser.T__212 - 194)) | (1 << (DMFParser.T__213 - 194)) | (1 << (DMFParser.T__214 - 194)) | (1 << (DMFParser.T__215 - 194)) | (1 << (DMFParser.T__216 - 194)) | (1 << (DMFParser.T__223 - 194)) | (1 << (DMFParser.T__224 - 194)) | (1 << (DMFParser.T__225 - 194)) | (1 << (DMFParser.T__226 - 194)) | (1 << (DMFParser.T__227 - 194)) | (1 << (DMFParser.T__228 - 194)) | (1 << (DMFParser.T__229 - 194)) | (1 << (DMFParser.T__230 - 194)) | (1 << (DMFParser.T__231 - 194)) | (1 << (DMFParser.T__232 - 194)) | (1 << (DMFParser.T__233 - 194)) | (1 << (DMFParser.T__234 - 194)) | (1 << (DMFParser.T__235 - 194)) | (1 << (DMFParser.T__236 - 194)) | (1 << (DMFParser.T__237 - 194)) | (1 << (DMFParser.T__238 - 194)) | (1 << (DMFParser.T__239 - 194)) | (1 << (DMFParser.T__240 - 194)) | (1 << (DMFParser.T__241 - 194)) | (1 << (DMFParser.T__243 - 194)) | (1 << (DMFParser.T__244 - 194)) | (1 << (DMFParser.T__245 - 194)) | (1 << (DMFParser.T__246 - 194)) | (1 << (DMFParser.T__247 - 194)) | (1 << (DMFParser.FUTURE - 194)) | (1 << (DMFParser.INTERACTIVE - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (DMFParser.LOCAL - 258)) | (1 << (DMFParser.NOT - 258)) | (1 << (DMFParser.OFF - 258)) | (1 << (DMFParser.ON - 258)) | (1 << (DMFParser.SUB - 258)) | (1 << (DMFParser.TOGGLE - 258)) | (1 << (DMFParser.MAYBE - 258)) | (1 << (DMFParser.ID - 258)) | (1 << (DMFParser.INT - 258)) | (1 << (DMFParser.FLOAT - 258)) | (1 << (DMFParser.STRING - 258)))) != 0):
                self.state = 90
                self.stat()
                self.state = 95
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 96
            self.match(DMFParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_interactive

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Macro_def_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_declaration(self):
            return self.getTypedRuleContext(DMFParser.Macro_declarationContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def_interactive" ):
                listener.enterMacro_def_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def_interactive" ):
                listener.exitMacro_def_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def_interactive" ):
                return visitor.visitMacro_def_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Compound_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_interactive" ):
                listener.enterCompound_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_interactive" ):
                listener.exitCompound_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_interactive" ):
                return visitor.visitCompound_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Decl_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_interactive" ):
                listener.enterDecl_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_interactive" ):
                listener.exitDecl_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_interactive" ):
                return visitor.visitDecl_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Empty_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_interactive" ):
                listener.enterEmpty_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_interactive" ):
                listener.exitEmpty_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_interactive" ):
                return visitor.visitEmpty_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Loop_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_interactive" ):
                listener.enterLoop_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_interactive" ):
                listener.exitLoop_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_interactive" ):
                return visitor.visitLoop_interactive(self)
            else:
                return visitor.visitChildren(self)


    class Expr_interactiveContext(InteractiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.InteractiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def EOF(self):
            return self.getToken(DMFParser.EOF, 0)
        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_interactive" ):
                listener.enterExpr_interactive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_interactive" ):
                listener.exitExpr_interactive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_interactive" ):
                return visitor.visitExpr_interactive(self)
            else:
                return visitor.visitChildren(self)



    def interactive(self):

        localctx = DMFParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        self._la = 0 # Token type
        try:
            self.state = 120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Compound_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 98
                self.compound()
                self.state = 99
                self.match(DMFParser.EOF)
                pass

            elif la_ == 2:
                localctx = DMFParser.Loop_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 101
                self.loop()
                self.state = 102
                self.match(DMFParser.EOF)
                pass

            elif la_ == 3:
                localctx = DMFParser.Decl_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 104
                self.declaration()
                self.state = 106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 105
                    self.match(DMFParser.TERMINATOR)


                self.state = 108
                self.match(DMFParser.EOF)
                pass

            elif la_ == 4:
                localctx = DMFParser.Macro_def_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 110
                self.macro_declaration()
                self.state = 111
                self.match(DMFParser.EOF)
                pass

            elif la_ == 5:
                localctx = DMFParser.Expr_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 113
                self.expr(0)
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.TERMINATOR:
                    self.state = 114
                    self.match(DMFParser.TERMINATOR)


                self.state = 117
                self.match(DMFParser.EOF)
                pass

            elif la_ == 6:
                localctx = DMFParser.Empty_interactiveContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 119
                self.match(DMFParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self._not_future_type = None # Not_future_typeContext
            self._name = None # NameContext
            self.target = None # ExprContext
            self._INT = None # Token
            self.init = None # ExprContext
            self._value_type = None # Value_typeContext

        def FUTURE(self):
            return self.getToken(DMFParser.FUTURE, 0)

        def not_future_type(self):
            return self.getTypedRuleContext(DMFParser.Not_future_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def LOCAL(self):
            return self.getToken(DMFParser.LOCAL, 0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = DMFParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 122
                    self.match(DMFParser.LOCAL)


                self.state = 125
                self.match(DMFParser.FUTURE)
                self.state = 126
                localctx._not_future_type = self.not_future_type()
                self.state = 127
                localctx._name = self.name()
                self.state = 128
                self.match(DMFParser.INJECT)
                self.state = 129
                localctx.target = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 133
                    self.match(DMFParser.LOCAL)


                self.state = 136
                self.match(DMFParser.FUTURE)
                self.state = 137
                localctx._not_future_type = self.not_future_type()
                self.state = 138
                localctx._INT = self.match(DMFParser.INT)
                self.state = 139
                self.match(DMFParser.INJECT)
                self.state = 140
                localctx.target = self.expr(0)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 144
                self.match(DMFParser.LOCAL)
                self.state = 145
                localctx._name = self.name()
                self.state = 146
                self.match(DMFParser.ASSIGN)
                self.state = 147
                localctx.init = self.expr(0)
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.type=None
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.match(DMFParser.LOCAL)
                self.state = 152
                localctx._value_type = self.value_type()
                self.state = 153
                localctx._INT = self.match(DMFParser.INT)
                self.state = 154
                self.match(DMFParser.ASSIGN)
                self.state = 155
                localctx.init = self.expr(0)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 159
                self.match(DMFParser.LOCAL)
                self.state = 160
                localctx._value_type = self.value_type()
                self.state = 161
                localctx._INT = self.match(DMFParser.INT)
                localctx.type=localctx._value_type.type
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.LOCAL:
                    self.state = 165
                    self.match(DMFParser.LOCAL)


                self.state = 168
                localctx._value_type = self.value_type()
                self.state = 169
                localctx._name = self.name()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.ASSIGN:
                    self.state = 170
                    self.match(DMFParser.ASSIGN)
                    self.state = 171
                    localctx.init = self.expr(0)


                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Expr_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stat" ):
                listener.enterExpr_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stat" ):
                listener.exitExpr_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stat" ):
                return visitor.visitExpr_stat(self)
            else:
                return visitor.visitChildren(self)


    class Compound_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stat" ):
                listener.enterCompound_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stat" ):
                listener.exitCompound_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stat" ):
                return visitor.visitCompound_stat(self)
            else:
                return visitor.visitChildren(self)


    class Macro_def_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_declaration(self):
            return self.getTypedRuleContext(DMFParser.Macro_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def_stat" ):
                listener.enterMacro_def_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def_stat" ):
                listener.exitMacro_def_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def_stat" ):
                return visitor.visitMacro_def_stat(self)
            else:
                return visitor.visitChildren(self)


    class Return_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ret(self):
            return self.getTypedRuleContext(DMFParser.RetContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stat" ):
                listener.enterReturn_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stat" ):
                listener.exitReturn_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stat" ):
                return visitor.visitReturn_stat(self)
            else:
                return visitor.visitChildren(self)


    class If_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.tests = list() # of ExprContexts
            self._compound = None # CompoundContext
            self.bodies = list() # of CompoundContexts
            self.else_body = None # CompoundContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def compound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.CompoundContext)
            else:
                return self.getTypedRuleContext(DMFParser.CompoundContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stat" ):
                listener.enterIf_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stat" ):
                listener.exitIf_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stat" ):
                return visitor.visitIf_stat(self)
            else:
                return visitor.visitChildren(self)


    class Loop_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def loop(self):
            return self.getTypedRuleContext(DMFParser.LoopContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_stat" ):
                listener.enterLoop_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_stat" ):
                listener.exitLoop_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_stat" ):
                return visitor.visitLoop_stat(self)
            else:
                return visitor.visitChildren(self)


    class Exit_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def exit(self):
            return self.getTypedRuleContext(DMFParser.ExitContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_stat" ):
                listener.enterExit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_stat" ):
                listener.exitExit_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_stat" ):
                return visitor.visitExit_stat(self)
            else:
                return visitor.visitChildren(self)


    class Decl_statContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(DMFParser.DeclarationContext,0)

        def TERMINATOR(self):
            return self.getToken(DMFParser.TERMINATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_stat" ):
                listener.enterDecl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_stat" ):
                listener.exitDecl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl_stat" ):
                return visitor.visitDecl_stat(self)
            else:
                return visitor.visitChildren(self)



    def stat(self):

        localctx = DMFParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stat)
        self._la = 0 # Token type
        try:
            self.state = 211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Decl_statContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 179
                self.declaration()
                self.state = 180
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 2:
                localctx = DMFParser.Macro_def_statContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self.macro_declaration()
                pass

            elif la_ == 3:
                localctx = DMFParser.If_statContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.match(DMFParser.T__0)
                self.state = 184
                localctx._expr = self.expr(0)
                localctx.tests.append(localctx._expr)
                self.state = 185
                localctx._compound = self.compound()
                localctx.bodies.append(localctx._compound)
                self.state = 193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 186
                        self.match(DMFParser.T__1)
                        self.state = 187
                        self.match(DMFParser.T__0)
                        self.state = 188
                        localctx._expr = self.expr(0)
                        localctx.tests.append(localctx._expr)
                        self.state = 189
                        localctx._compound = self.compound()
                        localctx.bodies.append(localctx._compound) 
                    self.state = 195
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__1:
                    self.state = 196
                    self.match(DMFParser.T__1)
                    self.state = 197
                    localctx.else_body = self.compound()


                pass

            elif la_ == 4:
                localctx = DMFParser.Expr_statContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 200
                self.expr(0)
                self.state = 201
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 5:
                localctx = DMFParser.Loop_statContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 203
                self.loop()
                pass

            elif la_ == 6:
                localctx = DMFParser.Exit_statContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 204
                self.exit()
                self.state = 205
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 7:
                localctx = DMFParser.Return_statContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 207
                self.ret()
                self.state = 208
                self.match(DMFParser.TERMINATOR)
                pass

            elif la_ == 8:
                localctx = DMFParser.Compound_statContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 210
                self.compound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_compound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Par_blockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_block" ):
                listener.enterPar_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_block" ):
                listener.exitPar_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPar_block" ):
                return visitor.visitPar_block(self)
            else:
                return visitor.visitChildren(self)


    class BlockContext(CompoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.CompoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.StatContext)
            else:
                return self.getTypedRuleContext(DMFParser.StatContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)



    def compound(self):

        localctx = DMFParser.CompoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_compound)
        self._la = 0 # Token type
        try:
            self.state = 229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2]:
                localctx = DMFParser.BlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.match(DMFParser.T__2)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__48) | (1 << DMFParser.T__51) | (1 << DMFParser.T__52) | (1 << DMFParser.T__53) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (DMFParser.T__65 - 66)) | (1 << (DMFParser.T__66 - 66)) | (1 << (DMFParser.T__67 - 66)) | (1 << (DMFParser.T__68 - 66)) | (1 << (DMFParser.T__69 - 66)) | (1 << (DMFParser.T__70 - 66)) | (1 << (DMFParser.T__71 - 66)) | (1 << (DMFParser.T__72 - 66)) | (1 << (DMFParser.T__82 - 66)) | (1 << (DMFParser.T__83 - 66)) | (1 << (DMFParser.T__84 - 66)) | (1 << (DMFParser.T__86 - 66)) | (1 << (DMFParser.T__87 - 66)) | (1 << (DMFParser.T__88 - 66)) | (1 << (DMFParser.T__89 - 66)) | (1 << (DMFParser.T__90 - 66)) | (1 << (DMFParser.T__91 - 66)) | (1 << (DMFParser.T__92 - 66)) | (1 << (DMFParser.T__93 - 66)) | (1 << (DMFParser.T__94 - 66)) | (1 << (DMFParser.T__96 - 66)) | (1 << (DMFParser.T__97 - 66)) | (1 << (DMFParser.T__98 - 66)) | (1 << (DMFParser.T__99 - 66)) | (1 << (DMFParser.T__100 - 66)) | (1 << (DMFParser.T__101 - 66)) | (1 << (DMFParser.T__102 - 66)) | (1 << (DMFParser.T__103 - 66)) | (1 << (DMFParser.T__104 - 66)) | (1 << (DMFParser.T__105 - 66)) | (1 << (DMFParser.T__106 - 66)) | (1 << (DMFParser.T__107 - 66)) | (1 << (DMFParser.T__108 - 66)) | (1 << (DMFParser.T__109 - 66)) | (1 << (DMFParser.T__110 - 66)) | (1 << (DMFParser.T__111 - 66)) | (1 << (DMFParser.T__112 - 66)) | (1 << (DMFParser.T__113 - 66)) | (1 << (DMFParser.T__114 - 66)) | (1 << (DMFParser.T__115 - 66)) | (1 << (DMFParser.T__116 - 66)) | (1 << (DMFParser.T__117 - 66)) | (1 << (DMFParser.T__118 - 66)) | (1 << (DMFParser.T__119 - 66)) | (1 << (DMFParser.T__120 - 66)) | (1 << (DMFParser.T__121 - 66)) | (1 << (DMFParser.T__122 - 66)) | (1 << (DMFParser.T__123 - 66)) | (1 << (DMFParser.T__124 - 66)) | (1 << (DMFParser.T__125 - 66)) | (1 << (DMFParser.T__126 - 66)) | (1 << (DMFParser.T__127 - 66)) | (1 << (DMFParser.T__128 - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (DMFParser.T__129 - 130)) | (1 << (DMFParser.T__130 - 130)) | (1 << (DMFParser.T__131 - 130)) | (1 << (DMFParser.T__132 - 130)) | (1 << (DMFParser.T__133 - 130)) | (1 << (DMFParser.T__134 - 130)) | (1 << (DMFParser.T__135 - 130)) | (1 << (DMFParser.T__136 - 130)) | (1 << (DMFParser.T__137 - 130)) | (1 << (DMFParser.T__138 - 130)) | (1 << (DMFParser.T__139 - 130)) | (1 << (DMFParser.T__141 - 130)) | (1 << (DMFParser.T__142 - 130)) | (1 << (DMFParser.T__143 - 130)) | (1 << (DMFParser.T__148 - 130)) | (1 << (DMFParser.T__153 - 130)) | (1 << (DMFParser.T__181 - 130)) | (1 << (DMFParser.T__182 - 130)) | (1 << (DMFParser.T__183 - 130)) | (1 << (DMFParser.T__184 - 130)) | (1 << (DMFParser.T__185 - 130)) | (1 << (DMFParser.T__186 - 130)) | (1 << (DMFParser.T__187 - 130)) | (1 << (DMFParser.T__190 - 130)) | (1 << (DMFParser.T__191 - 130)) | (1 << (DMFParser.T__192 - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (DMFParser.T__193 - 194)) | (1 << (DMFParser.T__194 - 194)) | (1 << (DMFParser.T__195 - 194)) | (1 << (DMFParser.T__196 - 194)) | (1 << (DMFParser.T__197 - 194)) | (1 << (DMFParser.T__198 - 194)) | (1 << (DMFParser.T__199 - 194)) | (1 << (DMFParser.T__200 - 194)) | (1 << (DMFParser.T__201 - 194)) | (1 << (DMFParser.T__202 - 194)) | (1 << (DMFParser.T__203 - 194)) | (1 << (DMFParser.T__204 - 194)) | (1 << (DMFParser.T__205 - 194)) | (1 << (DMFParser.T__206 - 194)) | (1 << (DMFParser.T__207 - 194)) | (1 << (DMFParser.T__208 - 194)) | (1 << (DMFParser.T__209 - 194)) | (1 << (DMFParser.T__210 - 194)) | (1 << (DMFParser.T__211 - 194)) | (1 << (DMFParser.T__212 - 194)) | (1 << (DMFParser.T__213 - 194)) | (1 << (DMFParser.T__214 - 194)) | (1 << (DMFParser.T__215 - 194)) | (1 << (DMFParser.T__216 - 194)) | (1 << (DMFParser.T__223 - 194)) | (1 << (DMFParser.T__224 - 194)) | (1 << (DMFParser.T__225 - 194)) | (1 << (DMFParser.T__226 - 194)) | (1 << (DMFParser.T__227 - 194)) | (1 << (DMFParser.T__228 - 194)) | (1 << (DMFParser.T__229 - 194)) | (1 << (DMFParser.T__230 - 194)) | (1 << (DMFParser.T__231 - 194)) | (1 << (DMFParser.T__232 - 194)) | (1 << (DMFParser.T__233 - 194)) | (1 << (DMFParser.T__234 - 194)) | (1 << (DMFParser.T__235 - 194)) | (1 << (DMFParser.T__236 - 194)) | (1 << (DMFParser.T__237 - 194)) | (1 << (DMFParser.T__238 - 194)) | (1 << (DMFParser.T__239 - 194)) | (1 << (DMFParser.T__240 - 194)) | (1 << (DMFParser.T__241 - 194)) | (1 << (DMFParser.T__243 - 194)) | (1 << (DMFParser.T__244 - 194)) | (1 << (DMFParser.T__245 - 194)) | (1 << (DMFParser.T__246 - 194)) | (1 << (DMFParser.T__247 - 194)) | (1 << (DMFParser.FUTURE - 194)) | (1 << (DMFParser.INTERACTIVE - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (DMFParser.LOCAL - 258)) | (1 << (DMFParser.NOT - 258)) | (1 << (DMFParser.OFF - 258)) | (1 << (DMFParser.ON - 258)) | (1 << (DMFParser.SUB - 258)) | (1 << (DMFParser.TOGGLE - 258)) | (1 << (DMFParser.MAYBE - 258)) | (1 << (DMFParser.ID - 258)) | (1 << (DMFParser.INT - 258)) | (1 << (DMFParser.FLOAT - 258)) | (1 << (DMFParser.STRING - 258)))) != 0):
                    self.state = 214
                    self.stat()
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 220
                self.match(DMFParser.T__3)
                pass
            elif token in [DMFParser.T__4]:
                localctx = DMFParser.Par_blockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self.match(DMFParser.T__4)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__0) | (1 << DMFParser.T__2) | (1 << DMFParser.T__4) | (1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__12) | (1 << DMFParser.T__13) | (1 << DMFParser.T__14) | (1 << DMFParser.T__15) | (1 << DMFParser.T__16) | (1 << DMFParser.T__18) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__42) | (1 << DMFParser.T__43) | (1 << DMFParser.T__45) | (1 << DMFParser.T__46) | (1 << DMFParser.T__47) | (1 << DMFParser.T__48) | (1 << DMFParser.T__51) | (1 << DMFParser.T__52) | (1 << DMFParser.T__53) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (DMFParser.T__65 - 66)) | (1 << (DMFParser.T__66 - 66)) | (1 << (DMFParser.T__67 - 66)) | (1 << (DMFParser.T__68 - 66)) | (1 << (DMFParser.T__69 - 66)) | (1 << (DMFParser.T__70 - 66)) | (1 << (DMFParser.T__71 - 66)) | (1 << (DMFParser.T__72 - 66)) | (1 << (DMFParser.T__82 - 66)) | (1 << (DMFParser.T__83 - 66)) | (1 << (DMFParser.T__84 - 66)) | (1 << (DMFParser.T__86 - 66)) | (1 << (DMFParser.T__87 - 66)) | (1 << (DMFParser.T__88 - 66)) | (1 << (DMFParser.T__89 - 66)) | (1 << (DMFParser.T__90 - 66)) | (1 << (DMFParser.T__91 - 66)) | (1 << (DMFParser.T__92 - 66)) | (1 << (DMFParser.T__93 - 66)) | (1 << (DMFParser.T__94 - 66)) | (1 << (DMFParser.T__96 - 66)) | (1 << (DMFParser.T__97 - 66)) | (1 << (DMFParser.T__98 - 66)) | (1 << (DMFParser.T__99 - 66)) | (1 << (DMFParser.T__100 - 66)) | (1 << (DMFParser.T__101 - 66)) | (1 << (DMFParser.T__102 - 66)) | (1 << (DMFParser.T__103 - 66)) | (1 << (DMFParser.T__104 - 66)) | (1 << (DMFParser.T__105 - 66)) | (1 << (DMFParser.T__106 - 66)) | (1 << (DMFParser.T__107 - 66)) | (1 << (DMFParser.T__108 - 66)) | (1 << (DMFParser.T__109 - 66)) | (1 << (DMFParser.T__110 - 66)) | (1 << (DMFParser.T__111 - 66)) | (1 << (DMFParser.T__112 - 66)) | (1 << (DMFParser.T__113 - 66)) | (1 << (DMFParser.T__114 - 66)) | (1 << (DMFParser.T__115 - 66)) | (1 << (DMFParser.T__116 - 66)) | (1 << (DMFParser.T__117 - 66)) | (1 << (DMFParser.T__118 - 66)) | (1 << (DMFParser.T__119 - 66)) | (1 << (DMFParser.T__120 - 66)) | (1 << (DMFParser.T__121 - 66)) | (1 << (DMFParser.T__122 - 66)) | (1 << (DMFParser.T__123 - 66)) | (1 << (DMFParser.T__124 - 66)) | (1 << (DMFParser.T__125 - 66)) | (1 << (DMFParser.T__126 - 66)) | (1 << (DMFParser.T__127 - 66)) | (1 << (DMFParser.T__128 - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (DMFParser.T__129 - 130)) | (1 << (DMFParser.T__130 - 130)) | (1 << (DMFParser.T__131 - 130)) | (1 << (DMFParser.T__132 - 130)) | (1 << (DMFParser.T__133 - 130)) | (1 << (DMFParser.T__134 - 130)) | (1 << (DMFParser.T__135 - 130)) | (1 << (DMFParser.T__136 - 130)) | (1 << (DMFParser.T__137 - 130)) | (1 << (DMFParser.T__138 - 130)) | (1 << (DMFParser.T__139 - 130)) | (1 << (DMFParser.T__141 - 130)) | (1 << (DMFParser.T__142 - 130)) | (1 << (DMFParser.T__143 - 130)) | (1 << (DMFParser.T__148 - 130)) | (1 << (DMFParser.T__153 - 130)) | (1 << (DMFParser.T__181 - 130)) | (1 << (DMFParser.T__182 - 130)) | (1 << (DMFParser.T__183 - 130)) | (1 << (DMFParser.T__184 - 130)) | (1 << (DMFParser.T__185 - 130)) | (1 << (DMFParser.T__186 - 130)) | (1 << (DMFParser.T__187 - 130)) | (1 << (DMFParser.T__190 - 130)) | (1 << (DMFParser.T__191 - 130)) | (1 << (DMFParser.T__192 - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (DMFParser.T__193 - 194)) | (1 << (DMFParser.T__194 - 194)) | (1 << (DMFParser.T__195 - 194)) | (1 << (DMFParser.T__196 - 194)) | (1 << (DMFParser.T__197 - 194)) | (1 << (DMFParser.T__198 - 194)) | (1 << (DMFParser.T__199 - 194)) | (1 << (DMFParser.T__200 - 194)) | (1 << (DMFParser.T__201 - 194)) | (1 << (DMFParser.T__202 - 194)) | (1 << (DMFParser.T__203 - 194)) | (1 << (DMFParser.T__204 - 194)) | (1 << (DMFParser.T__205 - 194)) | (1 << (DMFParser.T__206 - 194)) | (1 << (DMFParser.T__207 - 194)) | (1 << (DMFParser.T__208 - 194)) | (1 << (DMFParser.T__209 - 194)) | (1 << (DMFParser.T__210 - 194)) | (1 << (DMFParser.T__211 - 194)) | (1 << (DMFParser.T__212 - 194)) | (1 << (DMFParser.T__213 - 194)) | (1 << (DMFParser.T__214 - 194)) | (1 << (DMFParser.T__215 - 194)) | (1 << (DMFParser.T__216 - 194)) | (1 << (DMFParser.T__223 - 194)) | (1 << (DMFParser.T__224 - 194)) | (1 << (DMFParser.T__225 - 194)) | (1 << (DMFParser.T__226 - 194)) | (1 << (DMFParser.T__227 - 194)) | (1 << (DMFParser.T__228 - 194)) | (1 << (DMFParser.T__229 - 194)) | (1 << (DMFParser.T__230 - 194)) | (1 << (DMFParser.T__231 - 194)) | (1 << (DMFParser.T__232 - 194)) | (1 << (DMFParser.T__233 - 194)) | (1 << (DMFParser.T__234 - 194)) | (1 << (DMFParser.T__235 - 194)) | (1 << (DMFParser.T__236 - 194)) | (1 << (DMFParser.T__237 - 194)) | (1 << (DMFParser.T__238 - 194)) | (1 << (DMFParser.T__239 - 194)) | (1 << (DMFParser.T__240 - 194)) | (1 << (DMFParser.T__241 - 194)) | (1 << (DMFParser.T__243 - 194)) | (1 << (DMFParser.T__244 - 194)) | (1 << (DMFParser.T__245 - 194)) | (1 << (DMFParser.T__246 - 194)) | (1 << (DMFParser.T__247 - 194)) | (1 << (DMFParser.FUTURE - 194)) | (1 << (DMFParser.INTERACTIVE - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (DMFParser.LOCAL - 258)) | (1 << (DMFParser.NOT - 258)) | (1 << (DMFParser.OFF - 258)) | (1 << (DMFParser.ON - 258)) | (1 << (DMFParser.SUB - 258)) | (1 << (DMFParser.TOGGLE - 258)) | (1 << (DMFParser.MAYBE - 258)) | (1 << (DMFParser.ID - 258)) | (1 << (DMFParser.INT - 258)) | (1 << (DMFParser.FLOAT - 258)) | (1 << (DMFParser.STRING - 258)))) != 0):
                    self.state = 222
                    self.stat()
                    self.state = 227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 228
                self.match(DMFParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_loop_header

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Duration_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration_loop_header" ):
                listener.enterDuration_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration_loop_header" ):
                listener.exitDuration_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuration_loop_header" ):
                return visitor.visitDuration_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Test_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.cond = None # ExprContext
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(DMFParser.WHILE, 0)
        def UNTIL(self):
            return self.getToken(DMFParser.UNTIL, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_loop_header" ):
                listener.enterTest_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_loop_header" ):
                listener.exitTest_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_loop_header" ):
                return visitor.visitTest_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Seq_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.seq = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_iter_loop_header" ):
                listener.enterSeq_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_iter_loop_header" ):
                listener.exitSeq_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_iter_loop_header" ):
                return visitor.visitSeq_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class Step_iter_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.var = None # NameContext
            self.first = None # Step_first_and_dirContext
            self.bound = None # ExprContext
            self.step = None # ExprContext
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def step_first_and_dir(self):
            return self.getTypedRuleContext(DMFParser.Step_first_and_dirContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def param(self):
            return self.getTypedRuleContext(DMFParser.ParamContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_iter_loop_header" ):
                listener.enterStep_iter_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_iter_loop_header" ):
                listener.exitStep_iter_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_iter_loop_header" ):
                return visitor.visitStep_iter_loop_header(self)
            else:
                return visitor.visitChildren(self)


    class N_times_loop_headerContext(Loop_headerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.Loop_headerContext
            super().__init__(parser)
            self.n = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_times_loop_header" ):
                listener.enterN_times_loop_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_times_loop_header" ):
                listener.exitN_times_loop_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_times_loop_header" ):
                return visitor.visitN_times_loop_header(self)
            else:
                return visitor.visitChildren(self)



    def loop_header(self):

        localctx = DMFParser.Loop_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_loop_header)
        self._la = 0 # Token type
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = DMFParser.N_times_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                localctx.n = self.expr(0)
                self.state = 232
                self.match(DMFParser.T__6)
                pass

            elif la_ == 2:
                localctx = DMFParser.Duration_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.match(DMFParser.T__7)
                self.state = 235
                localctx.duration = self.expr(0)
                pass

            elif la_ == 3:
                localctx = DMFParser.Test_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                _la = self._input.LA(1)
                if not(_la==DMFParser.UNTIL or _la==DMFParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 237
                localctx.cond = self.expr(0)
                pass

            elif la_ == 4:
                localctx = DMFParser.Seq_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 238
                self.match(DMFParser.T__8)
                self.state = 239
                localctx.var = self.name()
                self.state = 240
                self.match(DMFParser.T__9)
                self.state = 241
                localctx.seq = self.expr(0)
                pass

            elif la_ == 5:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 243
                self.match(DMFParser.T__8)
                self.state = 244
                localctx.var = self.name()
                self.state = 245
                localctx.first = self.step_first_and_dir()
                self.state = 246
                self.match(DMFParser.T__10)
                self.state = 247
                localctx.bound = self.expr(0)
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 248
                    self.match(DMFParser.T__11)
                    self.state = 249
                    localctx.step = self.expr(0)


                pass

            elif la_ == 6:
                localctx = DMFParser.Step_iter_loop_headerContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 252
                self.match(DMFParser.T__8)
                self.state = 253
                localctx.var = self.param()
                self.state = 254
                localctx.first = self.step_first_and_dir()
                self.state = 255
                self.match(DMFParser.T__10)
                self.state = 256
                localctx.bound = self.expr(0)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__11:
                    self.state = 257
                    self.match(DMFParser.T__11)
                    self.state = 258
                    localctx.step = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Step_first_and_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_down = None

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_step_first_and_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStep_first_and_dir" ):
                listener.enterStep_first_and_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStep_first_and_dir" ):
                listener.exitStep_first_and_dir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStep_first_and_dir" ):
                return visitor.visitStep_first_and_dir(self)
            else:
                return visitor.visitChildren(self)




    def step_first_and_dir(self):

        localctx = DMFParser.Step_first_and_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_step_first_and_dir)
        self._la = 0 # Token type
        try:
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.match(DMFParser.ASSIGN)
                self.state = 264
                self.expr(0)
                self.state = 265
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.match(DMFParser.ASSIGN)
                self.state = 269
                self.expr(0)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__13:
                    self.state = 270
                    self.match(DMFParser.T__13)


                localctx.is_down=False
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 275
                self.match(DMFParser.T__12)
                localctx.is_down=True
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__13:
                    self.state = 277
                    self.match(DMFParser.T__13)


                localctx.is_down=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext
            self.header = None # Loop_headerContext
            self.body = None # CompoundContext

        def loop_header(self):
            return self.getTypedRuleContext(DMFParser.Loop_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = DMFParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==DMFParser.T__14:
                self.state = 283
                self.match(DMFParser.T__14)
                self.state = 284
                localctx.loop_name = self.name()
                self.state = 285
                self.match(DMFParser.CLOSE_BRACKET)


            self.state = 289
            self.match(DMFParser.T__15)
            self.state = 290
            localctx.header = self.loop_header()
            self.state = 291
            localctx.body = self.compound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loop_name = None # NameContext

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit" ):
                return visitor.visitExit(self)
            else:
                return visitor.visitChildren(self)




    def exit(self):

        localctx = DMFParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(DMFParser.T__16)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__62))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (DMFParser.T__96 - 97)) | (1 << (DMFParser.T__97 - 97)) | (1 << (DMFParser.T__98 - 97)) | (1 << (DMFParser.T__99 - 97)) | (1 << (DMFParser.T__100 - 97)) | (1 << (DMFParser.T__101 - 97)) | (1 << (DMFParser.T__102 - 97)) | (1 << (DMFParser.T__103 - 97)) | (1 << (DMFParser.T__105 - 97)) | (1 << (DMFParser.T__111 - 97)) | (1 << (DMFParser.T__118 - 97)) | (1 << (DMFParser.T__120 - 97)) | (1 << (DMFParser.T__125 - 97)) | (1 << (DMFParser.T__126 - 97)) | (1 << (DMFParser.T__129 - 97)) | (1 << (DMFParser.T__132 - 97)) | (1 << (DMFParser.T__136 - 97)) | (1 << (DMFParser.T__141 - 97)) | (1 << (DMFParser.T__143 - 97)) | (1 << (DMFParser.T__148 - 97)) | (1 << (DMFParser.T__153 - 97)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                self.state = 294
                localctx.loop_name = self.name()


            self.state = 297
            self.match(DMFParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_ret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRet" ):
                listener.enterRet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRet" ):
                listener.exitRet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRet" ):
                return visitor.visitRet(self)
            else:
                return visitor.visitChildren(self)




    def ret(self):

        localctx = DMFParser.RetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_ret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(DMFParser.T__18)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (DMFParser.T__9 - 10)) | (1 << (DMFParser.T__10 - 10)) | (1 << (DMFParser.T__12 - 10)) | (1 << (DMFParser.T__13 - 10)) | (1 << (DMFParser.T__16 - 10)) | (1 << (DMFParser.T__19 - 10)) | (1 << (DMFParser.T__22 - 10)) | (1 << (DMFParser.T__23 - 10)) | (1 << (DMFParser.T__26 - 10)) | (1 << (DMFParser.T__27 - 10)) | (1 << (DMFParser.T__29 - 10)) | (1 << (DMFParser.T__30 - 10)) | (1 << (DMFParser.T__31 - 10)) | (1 << (DMFParser.T__32 - 10)) | (1 << (DMFParser.T__33 - 10)) | (1 << (DMFParser.T__34 - 10)) | (1 << (DMFParser.T__38 - 10)) | (1 << (DMFParser.T__39 - 10)) | (1 << (DMFParser.T__42 - 10)) | (1 << (DMFParser.T__43 - 10)) | (1 << (DMFParser.T__45 - 10)) | (1 << (DMFParser.T__46 - 10)) | (1 << (DMFParser.T__47 - 10)) | (1 << (DMFParser.T__48 - 10)) | (1 << (DMFParser.T__51 - 10)) | (1 << (DMFParser.T__52 - 10)) | (1 << (DMFParser.T__53 - 10)) | (1 << (DMFParser.T__54 - 10)) | (1 << (DMFParser.T__62 - 10)) | (1 << (DMFParser.T__65 - 10)) | (1 << (DMFParser.T__66 - 10)) | (1 << (DMFParser.T__67 - 10)) | (1 << (DMFParser.T__68 - 10)) | (1 << (DMFParser.T__69 - 10)) | (1 << (DMFParser.T__70 - 10)) | (1 << (DMFParser.T__71 - 10)) | (1 << (DMFParser.T__72 - 10)))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (DMFParser.T__82 - 83)) | (1 << (DMFParser.T__83 - 83)) | (1 << (DMFParser.T__84 - 83)) | (1 << (DMFParser.T__86 - 83)) | (1 << (DMFParser.T__87 - 83)) | (1 << (DMFParser.T__88 - 83)) | (1 << (DMFParser.T__89 - 83)) | (1 << (DMFParser.T__90 - 83)) | (1 << (DMFParser.T__91 - 83)) | (1 << (DMFParser.T__92 - 83)) | (1 << (DMFParser.T__93 - 83)) | (1 << (DMFParser.T__94 - 83)) | (1 << (DMFParser.T__96 - 83)) | (1 << (DMFParser.T__97 - 83)) | (1 << (DMFParser.T__98 - 83)) | (1 << (DMFParser.T__99 - 83)) | (1 << (DMFParser.T__100 - 83)) | (1 << (DMFParser.T__101 - 83)) | (1 << (DMFParser.T__102 - 83)) | (1 << (DMFParser.T__103 - 83)) | (1 << (DMFParser.T__104 - 83)) | (1 << (DMFParser.T__105 - 83)) | (1 << (DMFParser.T__106 - 83)) | (1 << (DMFParser.T__107 - 83)) | (1 << (DMFParser.T__108 - 83)) | (1 << (DMFParser.T__109 - 83)) | (1 << (DMFParser.T__110 - 83)) | (1 << (DMFParser.T__111 - 83)) | (1 << (DMFParser.T__112 - 83)) | (1 << (DMFParser.T__113 - 83)) | (1 << (DMFParser.T__114 - 83)) | (1 << (DMFParser.T__115 - 83)) | (1 << (DMFParser.T__116 - 83)) | (1 << (DMFParser.T__117 - 83)) | (1 << (DMFParser.T__118 - 83)) | (1 << (DMFParser.T__119 - 83)) | (1 << (DMFParser.T__120 - 83)) | (1 << (DMFParser.T__121 - 83)) | (1 << (DMFParser.T__122 - 83)) | (1 << (DMFParser.T__123 - 83)) | (1 << (DMFParser.T__124 - 83)) | (1 << (DMFParser.T__125 - 83)) | (1 << (DMFParser.T__126 - 83)) | (1 << (DMFParser.T__127 - 83)) | (1 << (DMFParser.T__128 - 83)) | (1 << (DMFParser.T__129 - 83)) | (1 << (DMFParser.T__130 - 83)) | (1 << (DMFParser.T__131 - 83)) | (1 << (DMFParser.T__132 - 83)) | (1 << (DMFParser.T__133 - 83)) | (1 << (DMFParser.T__134 - 83)) | (1 << (DMFParser.T__135 - 83)) | (1 << (DMFParser.T__136 - 83)) | (1 << (DMFParser.T__137 - 83)) | (1 << (DMFParser.T__138 - 83)) | (1 << (DMFParser.T__139 - 83)) | (1 << (DMFParser.T__141 - 83)) | (1 << (DMFParser.T__142 - 83)) | (1 << (DMFParser.T__143 - 83)))) != 0) or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (DMFParser.T__148 - 149)) | (1 << (DMFParser.T__153 - 149)) | (1 << (DMFParser.T__181 - 149)) | (1 << (DMFParser.T__182 - 149)) | (1 << (DMFParser.T__183 - 149)) | (1 << (DMFParser.T__184 - 149)) | (1 << (DMFParser.T__185 - 149)) | (1 << (DMFParser.T__186 - 149)) | (1 << (DMFParser.T__187 - 149)) | (1 << (DMFParser.T__190 - 149)) | (1 << (DMFParser.T__191 - 149)) | (1 << (DMFParser.T__192 - 149)) | (1 << (DMFParser.T__193 - 149)) | (1 << (DMFParser.T__194 - 149)) | (1 << (DMFParser.T__195 - 149)) | (1 << (DMFParser.T__196 - 149)) | (1 << (DMFParser.T__197 - 149)) | (1 << (DMFParser.T__198 - 149)) | (1 << (DMFParser.T__199 - 149)) | (1 << (DMFParser.T__200 - 149)) | (1 << (DMFParser.T__201 - 149)) | (1 << (DMFParser.T__202 - 149)) | (1 << (DMFParser.T__203 - 149)) | (1 << (DMFParser.T__204 - 149)) | (1 << (DMFParser.T__205 - 149)) | (1 << (DMFParser.T__206 - 149)) | (1 << (DMFParser.T__207 - 149)) | (1 << (DMFParser.T__208 - 149)) | (1 << (DMFParser.T__209 - 149)) | (1 << (DMFParser.T__210 - 149)) | (1 << (DMFParser.T__211 - 149)))) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & ((1 << (DMFParser.T__212 - 213)) | (1 << (DMFParser.T__213 - 213)) | (1 << (DMFParser.T__214 - 213)) | (1 << (DMFParser.T__215 - 213)) | (1 << (DMFParser.T__216 - 213)) | (1 << (DMFParser.T__223 - 213)) | (1 << (DMFParser.T__224 - 213)) | (1 << (DMFParser.T__225 - 213)) | (1 << (DMFParser.T__226 - 213)) | (1 << (DMFParser.T__227 - 213)) | (1 << (DMFParser.T__228 - 213)) | (1 << (DMFParser.T__229 - 213)) | (1 << (DMFParser.T__230 - 213)) | (1 << (DMFParser.T__231 - 213)) | (1 << (DMFParser.T__232 - 213)) | (1 << (DMFParser.T__233 - 213)) | (1 << (DMFParser.T__234 - 213)) | (1 << (DMFParser.T__235 - 213)) | (1 << (DMFParser.T__236 - 213)) | (1 << (DMFParser.T__237 - 213)) | (1 << (DMFParser.T__238 - 213)) | (1 << (DMFParser.T__239 - 213)) | (1 << (DMFParser.T__240 - 213)) | (1 << (DMFParser.T__241 - 213)) | (1 << (DMFParser.T__243 - 213)) | (1 << (DMFParser.T__244 - 213)) | (1 << (DMFParser.T__245 - 213)) | (1 << (DMFParser.T__246 - 213)) | (1 << (DMFParser.T__247 - 213)) | (1 << (DMFParser.FUTURE - 213)) | (1 << (DMFParser.INTERACTIVE - 213)) | (1 << (DMFParser.NOT - 213)) | (1 << (DMFParser.OFF - 213)) | (1 << (DMFParser.ON - 213)) | (1 << (DMFParser.SUB - 213)) | (1 << (DMFParser.TOGGLE - 213)) | (1 << (DMFParser.MAYBE - 213)) | (1 << (DMFParser.ID - 213)) | (1 << (DMFParser.INT - 213)) | (1 << (DMFParser.FLOAT - 213)) | (1 << (DMFParser.STRING - 213)))) != 0):
                self.state = 300
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_punctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.is_closed = None

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_term_punct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_punct" ):
                listener.enterTerm_punct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_punct" ):
                listener.exitTerm_punct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm_punct" ):
                return visitor.visitTerm_punct(self)
            else:
                return visitor.visitChildren(self)




    def term_punct(self):

        localctx = DMFParser.Term_punctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_term_punct)
        try:
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.CLOSE_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.match(DMFParser.CLOSE_BRACKET)
                localctx.is_closed=True
                pass
            elif token in [DMFParser.CLOSE_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.match(DMFParser.CLOSE_PAREN)
                localctx.is_closed=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Neg_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeg_expr" ):
                listener.enterNeg_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeg_expr" ):
                listener.exitNeg_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeg_expr" ):
                return visitor.visitNeg_expr(self)
            else:
                return visitor.visitChildren(self)


    class Const_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)
        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_rc_expr" ):
                listener.enterConst_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_rc_expr" ):
                listener.exitConst_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_rc_expr" ):
                return visitor.visitConst_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_string_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_string_expr" ):
                listener.enterUnit_string_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_string_expr" ):
                listener.exitUnit_string_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_string_expr" ):
                return visitor.visitUnit_string_expr(self)
            else:
                return visitor.visitChildren(self)


    class Action_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def no_arg_action(self):
            return self.getTypedRuleContext(DMFParser.No_arg_actionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_expr" ):
                listener.enterAction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_expr" ):
                listener.exitAction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_expr" ):
                return visitor.visitAction_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_assign_expr" ):
                listener.enterAttr_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_assign_expr" ):
                listener.exitAttr_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_assign_expr" ):
                return visitor.visitAttr_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_expr" ):
                listener.enterUnit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_expr" ):
                listener.exitUnit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_expr" ):
                return visitor.visitUnit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Temperature_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemperature_expr" ):
                listener.enterTemperature_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemperature_expr" ):
                listener.exitTemperature_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemperature_expr" ):
                return visitor.visitTemperature_expr(self)
            else:
                return visitor.visitChildren(self)


    class Mix_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.to_dir = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMix_expr" ):
                listener.enterMix_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMix_expr" ):
                listener.exitMix_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMix_expr" ):
                return visitor.visitMix_expr(self)
            else:
                return visitor.visitChildren(self)


    class Print_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_expr" ):
                listener.enterPrint_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_expr" ):
                listener.exitPrint_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_expr" ):
                return visitor.visitPrint_expr(self)
            else:
                return visitor.visitChildren(self)


    class Become_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.result = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBecome_expr" ):
                listener.enterBecome_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBecome_expr" ):
                listener.exitBecome_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBecome_expr" ):
                return visitor.visitBecome_expr(self)
            else:
                return visitor.visitChildren(self)


    class Numbered_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.kind = None # Numbered_typeContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def numbered_type(self):
            return self.getTypedRuleContext(DMFParser.Numbered_typeContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_expr" ):
                listener.enterNumbered_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_expr" ):
                listener.exitNumbered_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_expr" ):
                return visitor.visitNumbered_expr(self)
            else:
                return visitor.visitChildren(self)


    class Rel_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def rel(self):
            return self.getTypedRuleContext(DMFParser.RelContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_expr" ):
                listener.enterRel_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_expr" ):
                listener.exitRel_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel_expr" ):
                return visitor.visitRel_expr(self)
            else:
                return visitor.visitChildren(self)


    class Existence_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # ExprContext
            self.copyFrom(ctx)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence_expr" ):
                listener.enterExistence_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence_expr" ):
                listener.exitExistence_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence_expr" ):
                return visitor.visitExistence_expr(self)
            else:
                return visitor.visitChildren(self)


    class Not_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_expr" ):
                listener.enterNot_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_expr" ):
                listener.exitNot_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_expr" ):
                return visitor.visitNot_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reagent(self):
            return self.getTypedRuleContext(DMFParser.ReagentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_lit_expr" ):
                listener.enterReagent_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_lit_expr" ):
                listener.exitReagent_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_lit_expr" ):
                return visitor.visitReagent_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class And_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)


    class Prompt_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_expr" ):
                listener.enterPrompt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_expr" ):
                listener.exitPrompt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_expr" ):
                return visitor.visitPrompt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Or_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expr" ):
                listener.enterOr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expr" ):
                listener.exitOr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_expr" ):
                return visitor.visitOr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Injection_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.what = None # ExprContext
            self.copyFrom(ctx)

        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInjection_expr" ):
                listener.enterInjection_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInjection_expr" ):
                listener.exitInjection_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInjection_expr" ):
                return visitor.visitInjection_expr(self)
            else:
                return visitor.visitChildren(self)


    class Drop_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.loc = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_expr" ):
                listener.enterDrop_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_expr" ):
                listener.exitDrop_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_expr" ):
                return visitor.visitDrop_expr(self)
            else:
                return visitor.visitChildren(self)


    class Function_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.func = None # ExprContext
            self._expr = None # ExprContext
            self.args = list() # of ExprContexts
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_expr" ):
                listener.enterFunction_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_expr" ):
                listener.exitFunction_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_expr" ):
                return visitor.visitFunction_expr(self)
            else:
                return visitor.visitChildren(self)


    class To_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def axis(self):
            return self.getTypedRuleContext(DMFParser.AxisContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTo_expr" ):
                listener.enterTo_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTo_expr" ):
                listener.exitTo_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTo_expr" ):
                return visitor.visitTo_expr(self)
            else:
                return visitor.visitChildren(self)


    class Bool_const_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.val = None # Bool_valContext
            self.copyFrom(ctx)

        def bool_val(self):
            return self.getTypedRuleContext(DMFParser.Bool_valContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_const_expr" ):
                listener.enterBool_const_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_const_expr" ):
                listener.exitBool_const_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_const_expr" ):
                return visitor.visitBool_const_expr(self)
            else:
                return visitor.visitChildren(self)


    class Has_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def possession(self):
            return self.getTypedRuleContext(DMFParser.PossessionContext,0)

        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_expr" ):
                listener.enterHas_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_expr" ):
                listener.exitHas_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHas_expr" ):
                return visitor.visitHas_expr(self)
            else:
                return visitor.visitChildren(self)


    class Float_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLOAT(self):
            return self.getToken(DMFParser.FLOAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_expr" ):
                listener.enterFloat_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_expr" ):
                listener.exitFloat_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_expr" ):
                return visitor.visitFloat_expr(self)
            else:
                return visitor.visitChildren(self)


    class N_rc_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def rc(self):
            return self.getTypedRuleContext(DMFParser.RcContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterN_rc_expr" ):
                listener.enterN_rc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitN_rc_expr" ):
                listener.exitN_rc_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitN_rc_expr" ):
                return visitor.visitN_rc_expr(self)
            else:
                return visitor.visitChildren(self)


    class Macro_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_def(self):
            return self.getTypedRuleContext(DMFParser.Macro_defContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_expr" ):
                listener.enterMacro_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_expr" ):
                listener.exitMacro_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_expr" ):
                return visitor.visitMacro_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_expr" ):
                listener.enterName_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_expr" ):
                listener.exitName_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_expr" ):
                return visitor.visitName_expr(self)
            else:
                return visitor.visitChildren(self)


    class Addsub_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ADD(self):
            return self.getToken(DMFParser.ADD, 0)
        def SUB(self):
            return self.getToken(DMFParser.SUB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddsub_expr" ):
                listener.enterAddsub_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddsub_expr" ):
                listener.exitAddsub_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddsub_expr" ):
                return visitor.visitAddsub_expr(self)
            else:
                return visitor.visitChildren(self)


    class Liquid_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.vol = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiquid_expr" ):
                listener.enterLiquid_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiquid_expr" ):
                listener.exitLiquid_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiquid_expr" ):
                return visitor.visitLiquid_expr(self)
            else:
                return visitor.visitChildren(self)


    class Reagent_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent_expr" ):
                listener.enterReagent_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent_expr" ):
                listener.exitReagent_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent_expr" ):
                return visitor.visitReagent_expr(self)
            else:
                return visitor.visitChildren(self)


    class Dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDir_expr" ):
                listener.enterDir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDir_expr" ):
                listener.exitDir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDir_expr" ):
                return visitor.visitDir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Coord_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.x = None # ExprContext
            self.y = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_expr" ):
                listener.enterCoord_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_expr" ):
                listener.exitCoord_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_expr" ):
                return visitor.visitCoord_expr(self)
            else:
                return visitor.visitChildren(self)


    class Pause_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.duration = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPause_expr" ):
                listener.enterPause_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPause_expr" ):
                listener.exitPause_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPause_expr" ):
                return visitor.visitPause_expr(self)
            else:
                return visitor.visitChildren(self)


    class Accept_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.from_dir = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccept_expr" ):
                listener.enterAccept_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccept_expr" ):
                listener.exitAccept_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccept_expr" ):
                return visitor.visitAccept_expr(self)
            else:
                return visitor.visitChildren(self)


    class Attr_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def attr(self):
            return self.getTypedRuleContext(DMFParser.AttrContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def existence(self):
            return self.getTypedRuleContext(DMFParser.ExistenceContext,0)

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)
        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_expr" ):
                listener.enterAttr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_expr" ):
                listener.exitAttr_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr_expr" ):
                return visitor.visitAttr_expr(self)
            else:
                return visitor.visitChildren(self)


    class Paren_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParen_expr" ):
                listener.enterParen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParen_expr" ):
                listener.exitParen_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParen_expr" ):
                return visitor.visitParen_expr(self)
            else:
                return visitor.visitChildren(self)


    class Split_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.to_dir = None # ExprContext
            self.var = None # NameContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplit_expr" ):
                listener.enterSplit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplit_expr" ):
                listener.exitSplit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSplit_expr" ):
                return visitor.visitSplit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Type_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.n = None # Token
            self.copyFrom(ctx)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_expr" ):
                listener.enterType_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_expr" ):
                listener.exitType_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name_expr" ):
                return visitor.visitType_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Index_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.who = None # ExprContext
            self.which = None # ExprContext
            self.copyFrom(ctx)

        def CLOSE_BRACKET(self):
            return self.getToken(DMFParser.CLOSE_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_expr" ):
                listener.enterIndex_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_expr" ):
                listener.exitIndex_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_expr" ):
                return visitor.visitIndex_expr(self)
            else:
                return visitor.visitChildren(self)


    class Name_assign_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.which = None # NameContext
            self.what = None # ExprContext
            self.ptype = None # Value_typeContext
            self.n = None # Token
            self.copyFrom(ctx)

        def ASSIGN(self):
            return self.getToken(DMFParser.ASSIGN, 0)
        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_assign_expr" ):
                listener.enterName_assign_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_assign_expr" ):
                listener.exitName_assign_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_assign_expr" ):
                return visitor.visitName_assign_expr(self)
            else:
                return visitor.visitChildren(self)


    class String_lit_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(DMFParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_lit_expr" ):
                listener.enterString_lit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_lit_expr" ):
                listener.exitString_lit_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_lit_expr" ):
                return visitor.visitString_lit_expr(self)
            else:
                return visitor.visitChildren(self)


    class Magnitude_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.quant = None # ExprContext
            self.copyFrom(ctx)

        def ATTR(self):
            return self.getToken(DMFParser.ATTR, 0)
        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagnitude_expr" ):
                listener.enterMagnitude_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagnitude_expr" ):
                listener.exitMagnitude_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMagnitude_expr" ):
                return visitor.visitMagnitude_expr(self)
            else:
                return visitor.visitChildren(self)


    class In_dir_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.d = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_dir_expr" ):
                listener.enterIn_dir_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_dir_expr" ):
                listener.exitIn_dir_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_dir_expr" ):
                return visitor.visitIn_dir_expr(self)
            else:
                return visitor.visitChildren(self)


    class Pause_until_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.condition = None # ExprContext
            self.copyFrom(ctx)

        def UNTIL(self):
            return self.getToken(DMFParser.UNTIL, 0)
        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPause_until_expr" ):
                listener.enterPause_until_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPause_until_expr" ):
                listener.exitPause_until_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPause_until_expr" ):
                return visitor.visitPause_until_expr(self)
            else:
                return visitor.visitChildren(self)


    class Muldiv_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def MUL(self):
            return self.getToken(DMFParser.MUL, 0)
        def DIV(self):
            return self.getToken(DMFParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMuldiv_expr" ):
                listener.enterMuldiv_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMuldiv_expr" ):
                listener.exitMuldiv_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMuldiv_expr" ):
                return visitor.visitMuldiv_expr(self)
            else:
                return visitor.visitChildren(self)


    class Int_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self._INT = None # Token
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_expr" ):
                listener.enterInt_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_expr" ):
                listener.exitInt_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt_expr" ):
                return visitor.visitInt_expr(self)
            else:
                return visitor.visitChildren(self)


    class Turn_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.start_dir = None # ExprContext
            self.copyFrom(ctx)

        def turn(self):
            return self.getTypedRuleContext(DMFParser.TurnContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn_expr" ):
                listener.enterTurn_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn_expr" ):
                listener.exitTurn_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn_expr" ):
                return visitor.visitTurn_expr(self)
            else:
                return visitor.visitChildren(self)


    class Cond_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.first = None # ExprContext
            self.cond = None # ExprContext
            self.second = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_expr" ):
                listener.enterCond_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_expr" ):
                listener.exitCond_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond_expr" ):
                return visitor.visitCond_expr(self)
            else:
                return visitor.visitChildren(self)


    class Merge_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.to_dir = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_expr" ):
                listener.enterMerge_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_expr" ):
                listener.exitMerge_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_expr" ):
                return visitor.visitMerge_expr(self)
            else:
                return visitor.visitChildren(self)


    class Mw_name_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMw_name_expr" ):
                listener.enterMw_name_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMw_name_expr" ):
                listener.exitMw_name_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMw_name_expr" ):
                return visitor.visitMw_name_expr(self)
            else:
                return visitor.visitChildren(self)


    class Delta_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.dist = None # ExprContext
            self.copyFrom(ctx)

        def direction(self):
            return self.getTypedRuleContext(DMFParser.DirectionContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelta_expr" ):
                listener.enterDelta_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelta_expr" ):
                listener.exitDelta_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelta_expr" ):
                return visitor.visitDelta_expr(self)
            else:
                return visitor.visitChildren(self)


    class Sample_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.empty = None # Token
            self._expr = None # ExprContext
            self.vals = list() # of ExprContexts
            self.copyFrom(ctx)

        def sample_type(self):
            return self.getTypedRuleContext(DMFParser.Sample_typeContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_expr" ):
                listener.enterSample_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_expr" ):
                listener.exitSample_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_expr" ):
                return visitor.visitSample_expr(self)
            else:
                return visitor.visitChildren(self)


    class Unit_recip_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.amount = None # ExprContext
            self.copyFrom(ctx)

        def dim_unit(self):
            return self.getTypedRuleContext(DMFParser.Dim_unitContext,0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_recip_expr" ):
                listener.enterUnit_recip_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_recip_expr" ):
                listener.exitUnit_recip_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_recip_expr" ):
                return visitor.visitUnit_recip_expr(self)
            else:
                return visitor.visitChildren(self)


    class Is_exprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a DMFParser.ExprContext
            super().__init__(parser)
            self.obj = None # ExprContext
            self.pred = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ExprContext)
            else:
                return self.getTypedRuleContext(DMFParser.ExprContext,i)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)
        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_expr" ):
                listener.enterIs_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_expr" ):
                listener.exitIs_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_expr" ):
                return visitor.visitIs_expr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = DMFParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                localctx = DMFParser.Paren_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 310
                self.match(DMFParser.T__19)
                self.state = 311
                self.expr(0)
                self.state = 312
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                localctx = DMFParser.Coord_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 314
                self.match(DMFParser.T__19)
                self.state = 315
                localctx.x = self.expr(0)
                self.state = 316
                self.match(DMFParser.T__20)
                self.state = 317
                localctx.y = self.expr(0)
                self.state = 318
                self.match(DMFParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                localctx = DMFParser.Neg_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 320
                self.match(DMFParser.SUB)
                self.state = 321
                localctx.rhs = self.expr(62)
                pass

            elif la_ == 4:
                localctx = DMFParser.Numbered_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 322
                localctx.kind = self.numbered_type()
                self.state = 323
                self.match(DMFParser.T__21)
                self.state = 324
                localctx.which = self.expr(60)
                pass

            elif la_ == 5:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__22:
                    self.state = 326
                    self.match(DMFParser.T__22)


                self.state = 329
                localctx.empty = self.match(DMFParser.T__23)
                self.state = 330
                self.sample_type()
                pass

            elif la_ == 6:
                localctx = DMFParser.Const_rc_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 331
                localctx._INT = self.match(DMFParser.INT)
                self.state = 332
                self.rc((0 if localctx._INT is None else int(localctx._INT.text)))
                pass

            elif la_ == 7:
                localctx = DMFParser.Reagent_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 333
                    self.match(DMFParser.T__33)


                self.state = 336
                self.reagent()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 337
                    self.match(DMFParser.T__34)


                pass

            elif la_ == 8:
                localctx = DMFParser.Reagent_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26 or _la==DMFParser.T__33:
                    self.state = 340
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__26 or _la==DMFParser.T__33):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 343
                self.match(DMFParser.T__34)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__35:
                    self.state = 344
                    self.match(DMFParser.T__35)


                self.state = 347
                localctx.which = self.expr(44)
                pass

            elif la_ == 9:
                localctx = DMFParser.Not_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 348
                self.match(DMFParser.NOT)
                self.state = 349
                self.expr(37)
                pass

            elif la_ == 10:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 350
                    self.match(DMFParser.T__26)


                self.state = 353
                self.match(DMFParser.T__38)
                self.state = 354
                self.match(DMFParser.T__39)
                self.state = 355
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 356
                self.match(DMFParser.T__40)
                self.state = 357
                localctx._expr = self.expr(36)
                localctx.vals.append(localctx._expr)
                pass

            elif la_ == 11:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 359
                    self.match(DMFParser.T__26)


                self.state = 362
                self.match(DMFParser.T__38)
                self.state = 363
                self.match(DMFParser.T__39)
                self.state = 364
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 365
                        self.match(DMFParser.T__20)
                        self.state = 366
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass

            elif la_ == 12:
                localctx = DMFParser.Sample_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 372
                    self.match(DMFParser.T__26)


                self.state = 375
                self.match(DMFParser.T__38)
                self.state = 376
                self.match(DMFParser.T__39)
                self.state = 377
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 378
                        self.match(DMFParser.T__20)
                        self.state = 379
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 385
                self.match(DMFParser.T__20)
                self.state = 386
                self.match(DMFParser.T__40)
                self.state = 387
                localctx._expr = self.expr(34)
                localctx.vals.append(localctx._expr)
                pass

            elif la_ == 13:
                localctx = DMFParser.Delta_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 389
                self.direction()
                self.state = 390
                localctx.dist = self.expr(31)
                pass

            elif la_ == 14:
                localctx = DMFParser.Dir_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 392
                self.direction()
                pass

            elif la_ == 15:
                localctx = DMFParser.To_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 393
                self.match(DMFParser.T__10)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (DMFParser.T__76 - 77)) | (1 << (DMFParser.T__78 - 77)) | (1 << (DMFParser.T__79 - 77)))) != 0):
                    self.state = 394
                    self.axis()


                self.state = 397
                localctx.which = self.expr(29)
                pass

            elif la_ == 16:
                localctx = DMFParser.Pause_until_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 398
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 399
                self.match(DMFParser.UNTIL)
                self.state = 400
                localctx.condition = self.expr(28)
                pass

            elif la_ == 17:
                localctx = DMFParser.Pause_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 401
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__7:
                    self.state = 402
                    self.match(DMFParser.T__7)


                self.state = 405
                localctx.duration = self.expr(27)
                pass

            elif la_ == 18:
                localctx = DMFParser.Prompt_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__42, DMFParser.T__43]:
                    self.state = 406
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__42 or _la==DMFParser.T__43):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 407
                    self.match(DMFParser.T__7)
                    self.state = 408
                    self.match(DMFParser.T__44)
                    pass
                elif token in [DMFParser.T__45]:
                    self.state = 409
                    self.match(DMFParser.T__45)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 412
                    localctx._expr = self.expr(0)
                    localctx.vals.append(localctx._expr)
                    self.state = 417
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 413
                            self.match(DMFParser.T__20)
                            self.state = 414
                            localctx._expr = self.expr(0)
                            localctx.vals.append(localctx._expr) 
                        self.state = 419
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,38,self._ctx)



                pass

            elif la_ == 19:
                localctx = DMFParser.Print_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 422
                self.match(DMFParser.T__46)
                self.state = 423
                localctx._expr = self.expr(0)
                localctx.vals.append(localctx._expr)
                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 424
                        self.match(DMFParser.T__20)
                        self.state = 425
                        localctx._expr = self.expr(0)
                        localctx.vals.append(localctx._expr) 
                    self.state = 430
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

                pass

            elif la_ == 20:
                localctx = DMFParser.Accept_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 431
                self.match(DMFParser.T__47)
                self.state = 432
                self.match(DMFParser.T__48)
                self.state = 433
                self.match(DMFParser.T__49)
                self.state = 434
                localctx.from_dir = self.expr(24)
                pass

            elif la_ == 21:
                localctx = DMFParser.Merge_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 435
                self.match(DMFParser.T__48)
                self.state = 436
                self.match(DMFParser.T__50)
                self.state = 437
                localctx.to_dir = self.expr(23)
                pass

            elif la_ == 22:
                localctx = DMFParser.Mix_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 438
                self.match(DMFParser.T__51)
                self.state = 439
                self.match(DMFParser.T__8)
                self.state = 440
                localctx.to_dir = self.expr(22)
                pass

            elif la_ == 23:
                localctx = DMFParser.Split_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 441
                self.match(DMFParser.T__52)
                self.state = 443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(DMFParser.T__10)


                self.state = 445
                localctx.to_dir = self.expr(0)
                self.state = 446
                self.match(DMFParser.T__25)
                self.state = 447
                localctx.var = self.name()
                pass

            elif la_ == 24:
                localctx = DMFParser.Split_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 449
                self.match(DMFParser.T__52)
                self.state = 451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.match(DMFParser.T__10)


                self.state = 453
                localctx.to_dir = self.expr(20)
                pass

            elif la_ == 25:
                localctx = DMFParser.Become_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 454
                self.match(DMFParser.T__53)
                self.state = 455
                localctx.result = self.expr(19)
                pass

            elif la_ == 26:
                localctx = DMFParser.Drop_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 456
                self.match(DMFParser.T__54)
                self.state = 457
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__55 or _la==DMFParser.T__56):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 458
                localctx.loc = self.expr(17)
                pass

            elif la_ == 27:
                localctx = DMFParser.Macro_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 459
                self.macro_def()
                pass

            elif la_ == 28:
                localctx = DMFParser.Action_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 460
                self.no_arg_action()
                pass

            elif la_ == 29:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 461
                    self.match(DMFParser.T__33)


                self.state = 464
                self.value_type()
                pass

            elif la_ == 30:
                localctx = DMFParser.Type_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 465
                self.value_type()
                self.state = 466
                localctx.n = self.match(DMFParser.INT)
                pass

            elif la_ == 31:
                localctx = DMFParser.Bool_const_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 468
                localctx.val = self.bool_val()
                pass

            elif la_ == 32:
                localctx = DMFParser.Name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 469
                self.name()
                pass

            elif la_ == 33:
                localctx = DMFParser.Mw_name_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 470
                self.multi_word_name()
                pass

            elif la_ == 34:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 471
                localctx.which = self.name()
                self.state = 472
                self.match(DMFParser.ASSIGN)
                self.state = 473
                localctx.what = self.expr(6)
                pass

            elif la_ == 35:
                localctx = DMFParser.Name_assign_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 475
                localctx.ptype = self.value_type()
                self.state = 476
                localctx.n = self.match(DMFParser.INT)
                self.state = 477
                self.match(DMFParser.ASSIGN)
                self.state = 478
                localctx.what = self.expr(4)
                pass

            elif la_ == 36:
                localctx = DMFParser.String_lit_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 480
                self.string()
                pass

            elif la_ == 37:
                localctx = DMFParser.Int_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 481
                localctx._INT = self.match(DMFParser.INT)
                pass

            elif la_ == 38:
                localctx = DMFParser.Float_exprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 482
                self.match(DMFParser.FLOAT)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 607
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 605
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        localctx = DMFParser.In_dir_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 485
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 486
                        self.match(DMFParser.T__9)
                        self.state = 487
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 488
                        localctx.d = self.expr(52)
                        pass

                    elif la_ == 2:
                        localctx = DMFParser.Liquid_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 489
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 490
                        self.match(DMFParser.T__36)
                        self.state = 491
                        localctx.which = self.expr(44)
                        pass

                    elif la_ == 3:
                        localctx = DMFParser.Muldiv_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 492
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 493
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.DIV or _la==DMFParser.MUL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 494
                        localctx.rhs = self.expr(43)
                        pass

                    elif la_ == 4:
                        localctx = DMFParser.Addsub_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 495
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 496
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.ADD or _la==DMFParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 497
                        localctx.rhs = self.expr(42)
                        pass

                    elif la_ == 5:
                        localctx = DMFParser.Rel_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 498
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 499
                        self.rel()
                        self.state = 500
                        localctx.rhs = self.expr(41)
                        pass

                    elif la_ == 6:
                        localctx = DMFParser.Is_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 502
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 508
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [DMFParser.T__37]:
                            self.state = 503
                            self.match(DMFParser.T__37)
                            self.state = 505
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                            if la_ == 1:
                                self.state = 504
                                self.match(DMFParser.NOT)


                            pass
                        elif token in [DMFParser.ISNT]:
                            self.state = 507
                            self.match(DMFParser.ISNT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 510
                        localctx.pred = self.expr(39)
                        pass

                    elif la_ == 7:
                        localctx = DMFParser.And_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 511
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 512
                        self.match(DMFParser.T__40)
                        self.state = 513
                        localctx.rhs = self.expr(34)
                        pass

                    elif la_ == 8:
                        localctx = DMFParser.Or_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 514
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 515
                        self.match(DMFParser.T__41)
                        self.state = 516
                        localctx.rhs = self.expr(33)
                        pass

                    elif la_ == 9:
                        localctx = DMFParser.Drop_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.vol = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 517
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 518
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__55 or _la==DMFParser.T__56):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 519
                        localctx.loc = self.expr(17)
                        pass

                    elif la_ == 10:
                        localctx = DMFParser.Injection_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 520
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 521
                        self.match(DMFParser.INJECT)
                        self.state = 522
                        localctx.what = self.expr(16)
                        pass

                    elif la_ == 11:
                        localctx = DMFParser.Cond_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.first = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 523
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 524
                        self.match(DMFParser.T__0)
                        self.state = 525
                        localctx.cond = self.expr(0)
                        self.state = 526
                        self.match(DMFParser.T__1)
                        self.state = 527
                        localctx.second = self.expr(15)
                        pass

                    elif la_ == 12:
                        localctx = DMFParser.Attr_assign_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 529
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 530
                        self.match(DMFParser.ATTR)
                        self.state = 531
                        self.attr()
                        self.state = 532
                        self.match(DMFParser.ASSIGN)
                        self.state = 533
                        localctx.what = self.expr(6)
                        pass

                    elif la_ == 13:
                        localctx = DMFParser.Function_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.func = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 535
                        if not self.precpred(self._ctx, 64):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 64)")
                        self.state = 536
                        self.match(DMFParser.T__19)
                        self.state = 545
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (DMFParser.T__9 - 10)) | (1 << (DMFParser.T__10 - 10)) | (1 << (DMFParser.T__12 - 10)) | (1 << (DMFParser.T__13 - 10)) | (1 << (DMFParser.T__16 - 10)) | (1 << (DMFParser.T__19 - 10)) | (1 << (DMFParser.T__22 - 10)) | (1 << (DMFParser.T__23 - 10)) | (1 << (DMFParser.T__26 - 10)) | (1 << (DMFParser.T__27 - 10)) | (1 << (DMFParser.T__29 - 10)) | (1 << (DMFParser.T__30 - 10)) | (1 << (DMFParser.T__31 - 10)) | (1 << (DMFParser.T__32 - 10)) | (1 << (DMFParser.T__33 - 10)) | (1 << (DMFParser.T__34 - 10)) | (1 << (DMFParser.T__38 - 10)) | (1 << (DMFParser.T__39 - 10)) | (1 << (DMFParser.T__42 - 10)) | (1 << (DMFParser.T__43 - 10)) | (1 << (DMFParser.T__45 - 10)) | (1 << (DMFParser.T__46 - 10)) | (1 << (DMFParser.T__47 - 10)) | (1 << (DMFParser.T__48 - 10)) | (1 << (DMFParser.T__51 - 10)) | (1 << (DMFParser.T__52 - 10)) | (1 << (DMFParser.T__53 - 10)) | (1 << (DMFParser.T__54 - 10)) | (1 << (DMFParser.T__62 - 10)) | (1 << (DMFParser.T__65 - 10)) | (1 << (DMFParser.T__66 - 10)) | (1 << (DMFParser.T__67 - 10)) | (1 << (DMFParser.T__68 - 10)) | (1 << (DMFParser.T__69 - 10)) | (1 << (DMFParser.T__70 - 10)) | (1 << (DMFParser.T__71 - 10)) | (1 << (DMFParser.T__72 - 10)))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (DMFParser.T__82 - 83)) | (1 << (DMFParser.T__83 - 83)) | (1 << (DMFParser.T__84 - 83)) | (1 << (DMFParser.T__86 - 83)) | (1 << (DMFParser.T__87 - 83)) | (1 << (DMFParser.T__88 - 83)) | (1 << (DMFParser.T__89 - 83)) | (1 << (DMFParser.T__90 - 83)) | (1 << (DMFParser.T__91 - 83)) | (1 << (DMFParser.T__92 - 83)) | (1 << (DMFParser.T__93 - 83)) | (1 << (DMFParser.T__94 - 83)) | (1 << (DMFParser.T__96 - 83)) | (1 << (DMFParser.T__97 - 83)) | (1 << (DMFParser.T__98 - 83)) | (1 << (DMFParser.T__99 - 83)) | (1 << (DMFParser.T__100 - 83)) | (1 << (DMFParser.T__101 - 83)) | (1 << (DMFParser.T__102 - 83)) | (1 << (DMFParser.T__103 - 83)) | (1 << (DMFParser.T__104 - 83)) | (1 << (DMFParser.T__105 - 83)) | (1 << (DMFParser.T__106 - 83)) | (1 << (DMFParser.T__107 - 83)) | (1 << (DMFParser.T__108 - 83)) | (1 << (DMFParser.T__109 - 83)) | (1 << (DMFParser.T__110 - 83)) | (1 << (DMFParser.T__111 - 83)) | (1 << (DMFParser.T__112 - 83)) | (1 << (DMFParser.T__113 - 83)) | (1 << (DMFParser.T__114 - 83)) | (1 << (DMFParser.T__115 - 83)) | (1 << (DMFParser.T__116 - 83)) | (1 << (DMFParser.T__117 - 83)) | (1 << (DMFParser.T__118 - 83)) | (1 << (DMFParser.T__119 - 83)) | (1 << (DMFParser.T__120 - 83)) | (1 << (DMFParser.T__121 - 83)) | (1 << (DMFParser.T__122 - 83)) | (1 << (DMFParser.T__123 - 83)) | (1 << (DMFParser.T__124 - 83)) | (1 << (DMFParser.T__125 - 83)) | (1 << (DMFParser.T__126 - 83)) | (1 << (DMFParser.T__127 - 83)) | (1 << (DMFParser.T__128 - 83)) | (1 << (DMFParser.T__129 - 83)) | (1 << (DMFParser.T__130 - 83)) | (1 << (DMFParser.T__131 - 83)) | (1 << (DMFParser.T__132 - 83)) | (1 << (DMFParser.T__133 - 83)) | (1 << (DMFParser.T__134 - 83)) | (1 << (DMFParser.T__135 - 83)) | (1 << (DMFParser.T__136 - 83)) | (1 << (DMFParser.T__137 - 83)) | (1 << (DMFParser.T__138 - 83)) | (1 << (DMFParser.T__139 - 83)) | (1 << (DMFParser.T__141 - 83)) | (1 << (DMFParser.T__142 - 83)) | (1 << (DMFParser.T__143 - 83)))) != 0) or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (DMFParser.T__148 - 149)) | (1 << (DMFParser.T__153 - 149)) | (1 << (DMFParser.T__181 - 149)) | (1 << (DMFParser.T__182 - 149)) | (1 << (DMFParser.T__183 - 149)) | (1 << (DMFParser.T__184 - 149)) | (1 << (DMFParser.T__185 - 149)) | (1 << (DMFParser.T__186 - 149)) | (1 << (DMFParser.T__187 - 149)) | (1 << (DMFParser.T__190 - 149)) | (1 << (DMFParser.T__191 - 149)) | (1 << (DMFParser.T__192 - 149)) | (1 << (DMFParser.T__193 - 149)) | (1 << (DMFParser.T__194 - 149)) | (1 << (DMFParser.T__195 - 149)) | (1 << (DMFParser.T__196 - 149)) | (1 << (DMFParser.T__197 - 149)) | (1 << (DMFParser.T__198 - 149)) | (1 << (DMFParser.T__199 - 149)) | (1 << (DMFParser.T__200 - 149)) | (1 << (DMFParser.T__201 - 149)) | (1 << (DMFParser.T__202 - 149)) | (1 << (DMFParser.T__203 - 149)) | (1 << (DMFParser.T__204 - 149)) | (1 << (DMFParser.T__205 - 149)) | (1 << (DMFParser.T__206 - 149)) | (1 << (DMFParser.T__207 - 149)) | (1 << (DMFParser.T__208 - 149)) | (1 << (DMFParser.T__209 - 149)) | (1 << (DMFParser.T__210 - 149)) | (1 << (DMFParser.T__211 - 149)))) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & ((1 << (DMFParser.T__212 - 213)) | (1 << (DMFParser.T__213 - 213)) | (1 << (DMFParser.T__214 - 213)) | (1 << (DMFParser.T__215 - 213)) | (1 << (DMFParser.T__216 - 213)) | (1 << (DMFParser.T__223 - 213)) | (1 << (DMFParser.T__224 - 213)) | (1 << (DMFParser.T__225 - 213)) | (1 << (DMFParser.T__226 - 213)) | (1 << (DMFParser.T__227 - 213)) | (1 << (DMFParser.T__228 - 213)) | (1 << (DMFParser.T__229 - 213)) | (1 << (DMFParser.T__230 - 213)) | (1 << (DMFParser.T__231 - 213)) | (1 << (DMFParser.T__232 - 213)) | (1 << (DMFParser.T__233 - 213)) | (1 << (DMFParser.T__234 - 213)) | (1 << (DMFParser.T__235 - 213)) | (1 << (DMFParser.T__236 - 213)) | (1 << (DMFParser.T__237 - 213)) | (1 << (DMFParser.T__238 - 213)) | (1 << (DMFParser.T__239 - 213)) | (1 << (DMFParser.T__240 - 213)) | (1 << (DMFParser.T__241 - 213)) | (1 << (DMFParser.T__243 - 213)) | (1 << (DMFParser.T__244 - 213)) | (1 << (DMFParser.T__245 - 213)) | (1 << (DMFParser.T__246 - 213)) | (1 << (DMFParser.T__247 - 213)) | (1 << (DMFParser.FUTURE - 213)) | (1 << (DMFParser.INTERACTIVE - 213)) | (1 << (DMFParser.NOT - 213)) | (1 << (DMFParser.OFF - 213)) | (1 << (DMFParser.ON - 213)) | (1 << (DMFParser.SUB - 213)) | (1 << (DMFParser.TOGGLE - 213)) | (1 << (DMFParser.MAYBE - 213)) | (1 << (DMFParser.ID - 213)) | (1 << (DMFParser.INT - 213)) | (1 << (DMFParser.FLOAT - 213)) | (1 << (DMFParser.STRING - 213)))) != 0):
                            self.state = 537
                            localctx._expr = self.expr(0)
                            localctx.args.append(localctx._expr)
                            self.state = 542
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==DMFParser.T__20:
                                self.state = 538
                                self.match(DMFParser.T__20)
                                self.state = 539
                                localctx._expr = self.expr(0)
                                localctx.args.append(localctx._expr)
                                self.state = 544
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 547
                        self.match(DMFParser.CLOSE_PAREN)
                        pass

                    elif la_ == 14:
                        localctx = DMFParser.Delta_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 548
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 549
                        self.direction()
                        pass

                    elif la_ == 15:
                        localctx = DMFParser.Magnitude_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 550
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 551
                        self.match(DMFParser.ATTR)
                        self.state = 552
                        self.match(DMFParser.T__24)
                        self.state = 553
                        self.match(DMFParser.T__9)
                        self.state = 554
                        self.dim_unit()
                        pass

                    elif la_ == 16:
                        localctx = DMFParser.Unit_string_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.quant = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 555
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 556
                        self.match(DMFParser.T__25)
                        self.state = 558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.T__26:
                            self.state = 557
                            self.match(DMFParser.T__26)


                        self.state = 560
                        self.match(DMFParser.T__27)
                        self.state = 561
                        self.match(DMFParser.T__9)
                        self.state = 562
                        self.dim_unit()
                        pass

                    elif la_ == 17:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 563
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 564
                        self.match(DMFParser.ATTR)
                        self.state = 565
                        self.attr()
                        self.state = 567
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                        if la_ == 1:
                            self.state = 566
                            self.existence()


                        pass

                    elif la_ == 18:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 569
                        if not self.precpred(self._ctx, 55):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 55)")
                        self.state = 570
                        self.match(DMFParser.ATTR)
                        self.state = 572
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==DMFParser.MAYBE:
                            self.state = 571
                            self.match(DMFParser.MAYBE)


                        self.state = 574
                        self.attr()
                        pass

                    elif la_ == 19:
                        localctx = DMFParser.Attr_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 575
                        if not self.precpred(self._ctx, 54):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 54)")
                        self.state = 576
                        self.match(DMFParser.ATTR)
                        self.state = 577
                        self.match(DMFParser.T__19)
                        self.state = 578
                        self.match(DMFParser.MAYBE)
                        self.state = 579
                        self.match(DMFParser.CLOSE_PAREN)
                        self.state = 580
                        self.attr()
                        pass

                    elif la_ == 20:
                        localctx = DMFParser.Existence_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.val = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 581
                        if not self.precpred(self._ctx, 53):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 53)")
                        self.state = 582
                        self.existence()
                        pass

                    elif la_ == 21:
                        localctx = DMFParser.Turn_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.start_dir = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 583
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 584
                        self.match(DMFParser.T__28)
                        self.state = 585
                        self.turn()
                        pass

                    elif la_ == 22:
                        localctx = DMFParser.N_rc_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.dist = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 586
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 587
                        self.rc(0)
                        pass

                    elif la_ == 23:
                        localctx = DMFParser.Unit_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 588
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 589
                        self.dim_unit()
                        pass

                    elif la_ == 24:
                        localctx = DMFParser.Unit_recip_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 590
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 591
                        self.match(DMFParser.T__31)
                        self.state = 592
                        self.dim_unit()
                        pass

                    elif la_ == 25:
                        localctx = DMFParser.Temperature_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.amount = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 593
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 594
                        self.match(DMFParser.T__32)
                        pass

                    elif la_ == 26:
                        localctx = DMFParser.Has_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.obj = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 595
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 596
                        self.possession()
                        self.state = 597
                        _la = self._input.LA(1)
                        if not(_la==DMFParser.T__22 or _la==DMFParser.T__26):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 598
                        self.attr()
                        pass

                    elif la_ == 27:
                        localctx = DMFParser.Index_exprContext(self, DMFParser.ExprContext(self, _parentctx, _parentState))
                        localctx.who = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 600
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 601
                        self.match(DMFParser.T__14)
                        self.state = 602
                        localctx.which = self.expr(0)
                        self.state = 603
                        self.match(DMFParser.CLOSE_BRACKET)
                        pass

             
                self.state = 609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExistenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def ISNT(self):
            return self.getToken(DMFParser.ISNT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_existence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistence" ):
                listener.enterExistence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistence" ):
                listener.exitExistence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistence" ):
                return visitor.visitExistence(self)
            else:
                return visitor.visitChildren(self)




    def existence(self):

        localctx = DMFParser.ExistenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_existence)
        try:
            self.state = 628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.match(DMFParser.T__57)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(DMFParser.T__58)
                self.state = 613
                self.match(DMFParser.NOT)
                self.state = 614
                self.match(DMFParser.T__59)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 616
                self.match(DMFParser.T__60)
                self.state = 617
                self.match(DMFParser.T__59)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 619
                self.match(DMFParser.T__61)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 621
                self.match(DMFParser.T__37)
                self.state = 622
                self.match(DMFParser.NOT)
                self.state = 623
                self.match(DMFParser.T__62)
                localctx.polarity=True
                pass
            elif token in [DMFParser.ISNT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 625
                self.match(DMFParser.ISNT)
                self.state = 626
                self.match(DMFParser.T__62)
                localctx.polarity=True
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.polarity = None

        def NOT(self):
            return self.getToken(DMFParser.NOT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_possession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossession" ):
                listener.enterPossession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossession" ):
                listener.exitPossession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPossession" ):
                return visitor.visitPossession(self)
            else:
                return visitor.visitChildren(self)




    def possession(self):

        localctx = DMFParser.PossessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_possession)
        try:
            self.state = 639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.match(DMFParser.T__63)
                localctx.polarity=True
                pass
            elif token in [DMFParser.T__58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 632
                self.match(DMFParser.T__58)
                self.state = 633
                self.match(DMFParser.NOT)
                self.state = 634
                self.match(DMFParser.T__64)
                localctx.polarity=False
                pass
            elif token in [DMFParser.T__60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 636
                self.match(DMFParser.T__60)
                self.state = 637
                self.match(DMFParser.T__64)
                localctx.polarity=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReagentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None


        def getRuleIndex(self):
            return DMFParser.RULE_reagent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReagent" ):
                listener.enterReagent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReagent" ):
                listener.exitReagent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReagent" ):
                return visitor.visitReagent(self)
            else:
                return visitor.visitChildren(self)




    def reagent(self):

        localctx = DMFParser.ReagentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_reagent)
        try:
            self.state = 645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.match(DMFParser.T__65)
                localctx.r = unknown_reagent
                pass
            elif token in [DMFParser.T__66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.match(DMFParser.T__66)
                localctx.r = waste_reagent
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = DMFParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.state = 659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__13, DMFParser.T__67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__13 or _la==DMFParser.T__67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__12, DMFParser.T__68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 650
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__12 or _la==DMFParser.T__68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.DOWN
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__69, DMFParser.T__70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 653
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__69 or _la==DMFParser.T__70):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.LEFT
                localctx.verticalp=False
                pass
            elif token in [DMFParser.T__71, DMFParser.T__72]:
                self.enterOuterAlt(localctx, 4)
                self.state = 656
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__71 or _la==DMFParser.T__72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TurnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None


        def getRuleIndex(self):
            return DMFParser.RULE_turn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn" ):
                listener.enterTurn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn" ):
                listener.exitTurn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTurn" ):
                return visitor.visitTurn(self)
            else:
                return visitor.visitChildren(self)




    def turn(self):

        localctx = DMFParser.TurnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_turn)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__71, DMFParser.T__73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__71 or _la==DMFParser.T__73):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.RIGHT
                pass
            elif token in [DMFParser.T__69, DMFParser.T__74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__69 or _la==DMFParser.T__74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.t = Turn.LEFT
                pass
            elif token in [DMFParser.T__75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self.match(DMFParser.T__75)
                localctx.t = Turn.AROUND
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, n:int=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None
            self.d = None
            self.verticalp = None
            self.n = n


        def getRuleIndex(self):
            return DMFParser.RULE_rc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRc" ):
                listener.enterRc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRc" ):
                listener.exitRc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRc" ):
                return visitor.visitRc(self)
            else:
                return visitor.visitChildren(self)




    def rc(self, n:int):

        localctx = DMFParser.RcContext(self, self._ctx, self.state, n)
        self.enterRule(localctx, 34, self.RULE_rc)
        self._la = 0 # Token type
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 669
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 670
                self.match(DMFParser.T__76)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.match(DMFParser.T__77)
                localctx.d = Dir.UP
                localctx.verticalp=True
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                if not localctx.n==1:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$n==1")
                self.state = 677
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__78 or _la==DMFParser.T__79):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__80 or _la==DMFParser.T__81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.d = Dir.RIGHT
                localctx.verticalp=False
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AxisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.verticalp = None


        def getRuleIndex(self):
            return DMFParser.RULE_axis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxis" ):
                listener.enterAxis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxis" ):
                listener.exitAxis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAxis" ):
                return visitor.visitAxis(self)
            else:
                return visitor.visitChildren(self)




    def axis(self):

        localctx = DMFParser.AxisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_axis)
        self._la = 0 # Token type
        try:
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.match(DMFParser.T__76)
                localctx.verticalp=True
                pass
            elif token in [DMFParser.T__78, DMFParser.T__79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__78 or _la==DMFParser.T__79):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.verticalp=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_def(self):
            return self.getTypedRuleContext(DMFParser.Macro_defContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_declaration" ):
                listener.enterMacro_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_declaration" ):
                listener.exitMacro_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_declaration" ):
                return visitor.visitMacro_declaration(self)
            else:
                return visitor.visitChildren(self)




    def macro_declaration(self):

        localctx = DMFParser.Macro_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_macro_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.macro_def()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_header(self):
            return self.getTypedRuleContext(DMFParser.Macro_headerContext,0)


        def compound(self):
            return self.getTypedRuleContext(DMFParser.CompoundContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def expr(self):
            return self.getTypedRuleContext(DMFParser.ExprContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_def" ):
                listener.enterMacro_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_def" ):
                listener.exitMacro_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_def" ):
                return visitor.visitMacro_def(self)
            else:
                return visitor.visitChildren(self)




    def macro_def(self):

        localctx = DMFParser.Macro_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_macro_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.macro_header()
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__2, DMFParser.T__4]:
                self.state = 694
                self.compound()
                pass
            elif token in [DMFParser.INJECT]:
                self.state = 695
                self.match(DMFParser.INJECT)
                self.state = 696
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.called = None # NameContext
            self.ret_type = None # Value_typeContext

        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DMFParser.ParamContext)
            else:
                return self.getTypedRuleContext(DMFParser.ParamContext,i)


        def getRuleIndex(self):
            return DMFParser.RULE_macro_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_header" ):
                listener.enterMacro_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_header" ):
                listener.exitMacro_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro_header" ):
                return visitor.visitMacro_header(self)
            else:
                return visitor.visitChildren(self)




    def macro_header(self):

        localctx = DMFParser.Macro_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_macro_header)
        self._la = 0 # Token type
        try:
            self.state = 782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__82, DMFParser.T__83, DMFParser.T__84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                _la = self._input.LA(1)
                if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (DMFParser.T__82 - 83)) | (1 << (DMFParser.T__83 - 83)) | (1 << (DMFParser.T__84 - 83)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__62))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (DMFParser.T__96 - 97)) | (1 << (DMFParser.T__97 - 97)) | (1 << (DMFParser.T__98 - 97)) | (1 << (DMFParser.T__99 - 97)) | (1 << (DMFParser.T__100 - 97)) | (1 << (DMFParser.T__101 - 97)) | (1 << (DMFParser.T__102 - 97)) | (1 << (DMFParser.T__103 - 97)) | (1 << (DMFParser.T__105 - 97)) | (1 << (DMFParser.T__111 - 97)) | (1 << (DMFParser.T__118 - 97)) | (1 << (DMFParser.T__120 - 97)) | (1 << (DMFParser.T__125 - 97)) | (1 << (DMFParser.T__126 - 97)) | (1 << (DMFParser.T__129 - 97)) | (1 << (DMFParser.T__132 - 97)) | (1 << (DMFParser.T__136 - 97)) | (1 << (DMFParser.T__141 - 97)) | (1 << (DMFParser.T__143 - 97)) | (1 << (DMFParser.T__148 - 97)) | (1 << (DMFParser.T__153 - 97)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                    self.state = 700
                    localctx.called = self.name()


                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 703
                    self.match(DMFParser.T__19)
                    self.state = 712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (DMFParser.T__93 - 94)) | (1 << (DMFParser.T__96 - 94)) | (1 << (DMFParser.T__97 - 94)) | (1 << (DMFParser.T__98 - 94)) | (1 << (DMFParser.T__99 - 94)) | (1 << (DMFParser.T__100 - 94)) | (1 << (DMFParser.T__101 - 94)) | (1 << (DMFParser.T__102 - 94)) | (1 << (DMFParser.T__103 - 94)) | (1 << (DMFParser.T__104 - 94)) | (1 << (DMFParser.T__105 - 94)) | (1 << (DMFParser.T__106 - 94)) | (1 << (DMFParser.T__107 - 94)) | (1 << (DMFParser.T__108 - 94)) | (1 << (DMFParser.T__109 - 94)) | (1 << (DMFParser.T__110 - 94)) | (1 << (DMFParser.T__111 - 94)) | (1 << (DMFParser.T__112 - 94)) | (1 << (DMFParser.T__113 - 94)) | (1 << (DMFParser.T__114 - 94)) | (1 << (DMFParser.T__115 - 94)) | (1 << (DMFParser.T__116 - 94)) | (1 << (DMFParser.T__117 - 94)) | (1 << (DMFParser.T__118 - 94)) | (1 << (DMFParser.T__119 - 94)) | (1 << (DMFParser.T__120 - 94)) | (1 << (DMFParser.T__121 - 94)) | (1 << (DMFParser.T__122 - 94)) | (1 << (DMFParser.T__123 - 94)) | (1 << (DMFParser.T__124 - 94)) | (1 << (DMFParser.T__125 - 94)) | (1 << (DMFParser.T__126 - 94)) | (1 << (DMFParser.T__127 - 94)) | (1 << (DMFParser.T__128 - 94)) | (1 << (DMFParser.T__129 - 94)) | (1 << (DMFParser.T__130 - 94)) | (1 << (DMFParser.T__131 - 94)) | (1 << (DMFParser.T__132 - 94)) | (1 << (DMFParser.T__133 - 94)) | (1 << (DMFParser.T__134 - 94)) | (1 << (DMFParser.T__135 - 94)) | (1 << (DMFParser.T__136 - 94)) | (1 << (DMFParser.T__137 - 94)) | (1 << (DMFParser.T__138 - 94)) | (1 << (DMFParser.T__139 - 94)) | (1 << (DMFParser.T__141 - 94)) | (1 << (DMFParser.T__142 - 94)) | (1 << (DMFParser.T__143 - 94)) | (1 << (DMFParser.T__148 - 94)) | (1 << (DMFParser.T__153 - 94)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.FUTURE - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.INJECTABLE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.MAYBE - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                        self.state = 704
                        self.param()
                        self.state = 709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 705
                            self.match(DMFParser.T__20)
                            self.state = 706
                            self.param()
                            self.state = 711
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 714
                    self.match(DMFParser.CLOSE_PAREN)


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__85:
                    self.state = 717
                    self.match(DMFParser.T__85)
                    self.state = 718
                    localctx.ret_type = self.value_type()


                pass
            elif token in [DMFParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.match(DMFParser.T__86)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 722
                    self.match(DMFParser.T__19)
                    self.state = 731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (DMFParser.T__93 - 94)) | (1 << (DMFParser.T__96 - 94)) | (1 << (DMFParser.T__97 - 94)) | (1 << (DMFParser.T__98 - 94)) | (1 << (DMFParser.T__99 - 94)) | (1 << (DMFParser.T__100 - 94)) | (1 << (DMFParser.T__101 - 94)) | (1 << (DMFParser.T__102 - 94)) | (1 << (DMFParser.T__103 - 94)) | (1 << (DMFParser.T__104 - 94)) | (1 << (DMFParser.T__105 - 94)) | (1 << (DMFParser.T__106 - 94)) | (1 << (DMFParser.T__107 - 94)) | (1 << (DMFParser.T__108 - 94)) | (1 << (DMFParser.T__109 - 94)) | (1 << (DMFParser.T__110 - 94)) | (1 << (DMFParser.T__111 - 94)) | (1 << (DMFParser.T__112 - 94)) | (1 << (DMFParser.T__113 - 94)) | (1 << (DMFParser.T__114 - 94)) | (1 << (DMFParser.T__115 - 94)) | (1 << (DMFParser.T__116 - 94)) | (1 << (DMFParser.T__117 - 94)) | (1 << (DMFParser.T__118 - 94)) | (1 << (DMFParser.T__119 - 94)) | (1 << (DMFParser.T__120 - 94)) | (1 << (DMFParser.T__121 - 94)) | (1 << (DMFParser.T__122 - 94)) | (1 << (DMFParser.T__123 - 94)) | (1 << (DMFParser.T__124 - 94)) | (1 << (DMFParser.T__125 - 94)) | (1 << (DMFParser.T__126 - 94)) | (1 << (DMFParser.T__127 - 94)) | (1 << (DMFParser.T__128 - 94)) | (1 << (DMFParser.T__129 - 94)) | (1 << (DMFParser.T__130 - 94)) | (1 << (DMFParser.T__131 - 94)) | (1 << (DMFParser.T__132 - 94)) | (1 << (DMFParser.T__133 - 94)) | (1 << (DMFParser.T__134 - 94)) | (1 << (DMFParser.T__135 - 94)) | (1 << (DMFParser.T__136 - 94)) | (1 << (DMFParser.T__137 - 94)) | (1 << (DMFParser.T__138 - 94)) | (1 << (DMFParser.T__139 - 94)) | (1 << (DMFParser.T__141 - 94)) | (1 << (DMFParser.T__142 - 94)) | (1 << (DMFParser.T__143 - 94)) | (1 << (DMFParser.T__148 - 94)) | (1 << (DMFParser.T__153 - 94)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.FUTURE - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.INJECTABLE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.MAYBE - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                        self.state = 723
                        self.param()
                        self.state = 728
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 724
                            self.match(DMFParser.T__20)
                            self.state = 725
                            self.param()
                            self.state = 730
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 733
                    self.match(DMFParser.CLOSE_PAREN)


                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__85:
                    self.state = 736
                    self.match(DMFParser.T__85)
                    self.state = 737
                    localctx.ret_type = self.value_type()


                pass
            elif token in [DMFParser.T__87]:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.match(DMFParser.T__87)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__62))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (DMFParser.T__96 - 97)) | (1 << (DMFParser.T__97 - 97)) | (1 << (DMFParser.T__98 - 97)) | (1 << (DMFParser.T__99 - 97)) | (1 << (DMFParser.T__100 - 97)) | (1 << (DMFParser.T__101 - 97)) | (1 << (DMFParser.T__102 - 97)) | (1 << (DMFParser.T__103 - 97)) | (1 << (DMFParser.T__105 - 97)) | (1 << (DMFParser.T__111 - 97)) | (1 << (DMFParser.T__118 - 97)) | (1 << (DMFParser.T__120 - 97)) | (1 << (DMFParser.T__125 - 97)) | (1 << (DMFParser.T__126 - 97)) | (1 << (DMFParser.T__129 - 97)) | (1 << (DMFParser.T__132 - 97)) | (1 << (DMFParser.T__136 - 97)) | (1 << (DMFParser.T__141 - 97)) | (1 << (DMFParser.T__143 - 97)) | (1 << (DMFParser.T__148 - 97)) | (1 << (DMFParser.T__153 - 97)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                    self.state = 741
                    localctx.called = self.name()


                pass
            elif token in [DMFParser.T__88, DMFParser.T__89]:
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__88 or _la==DMFParser.T__89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__62))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (DMFParser.T__96 - 97)) | (1 << (DMFParser.T__97 - 97)) | (1 << (DMFParser.T__98 - 97)) | (1 << (DMFParser.T__99 - 97)) | (1 << (DMFParser.T__100 - 97)) | (1 << (DMFParser.T__101 - 97)) | (1 << (DMFParser.T__102 - 97)) | (1 << (DMFParser.T__103 - 97)) | (1 << (DMFParser.T__105 - 97)) | (1 << (DMFParser.T__111 - 97)) | (1 << (DMFParser.T__118 - 97)) | (1 << (DMFParser.T__120 - 97)) | (1 << (DMFParser.T__125 - 97)) | (1 << (DMFParser.T__126 - 97)) | (1 << (DMFParser.T__129 - 97)) | (1 << (DMFParser.T__132 - 97)) | (1 << (DMFParser.T__136 - 97)) | (1 << (DMFParser.T__141 - 97)) | (1 << (DMFParser.T__143 - 97)) | (1 << (DMFParser.T__148 - 97)) | (1 << (DMFParser.T__153 - 97)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                    self.state = 745
                    localctx.called = self.name()


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 748
                    self.match(DMFParser.T__19)
                    self.state = 757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (DMFParser.T__93 - 94)) | (1 << (DMFParser.T__96 - 94)) | (1 << (DMFParser.T__97 - 94)) | (1 << (DMFParser.T__98 - 94)) | (1 << (DMFParser.T__99 - 94)) | (1 << (DMFParser.T__100 - 94)) | (1 << (DMFParser.T__101 - 94)) | (1 << (DMFParser.T__102 - 94)) | (1 << (DMFParser.T__103 - 94)) | (1 << (DMFParser.T__104 - 94)) | (1 << (DMFParser.T__105 - 94)) | (1 << (DMFParser.T__106 - 94)) | (1 << (DMFParser.T__107 - 94)) | (1 << (DMFParser.T__108 - 94)) | (1 << (DMFParser.T__109 - 94)) | (1 << (DMFParser.T__110 - 94)) | (1 << (DMFParser.T__111 - 94)) | (1 << (DMFParser.T__112 - 94)) | (1 << (DMFParser.T__113 - 94)) | (1 << (DMFParser.T__114 - 94)) | (1 << (DMFParser.T__115 - 94)) | (1 << (DMFParser.T__116 - 94)) | (1 << (DMFParser.T__117 - 94)) | (1 << (DMFParser.T__118 - 94)) | (1 << (DMFParser.T__119 - 94)) | (1 << (DMFParser.T__120 - 94)) | (1 << (DMFParser.T__121 - 94)) | (1 << (DMFParser.T__122 - 94)) | (1 << (DMFParser.T__123 - 94)) | (1 << (DMFParser.T__124 - 94)) | (1 << (DMFParser.T__125 - 94)) | (1 << (DMFParser.T__126 - 94)) | (1 << (DMFParser.T__127 - 94)) | (1 << (DMFParser.T__128 - 94)) | (1 << (DMFParser.T__129 - 94)) | (1 << (DMFParser.T__130 - 94)) | (1 << (DMFParser.T__131 - 94)) | (1 << (DMFParser.T__132 - 94)) | (1 << (DMFParser.T__133 - 94)) | (1 << (DMFParser.T__134 - 94)) | (1 << (DMFParser.T__135 - 94)) | (1 << (DMFParser.T__136 - 94)) | (1 << (DMFParser.T__137 - 94)) | (1 << (DMFParser.T__138 - 94)) | (1 << (DMFParser.T__139 - 94)) | (1 << (DMFParser.T__141 - 94)) | (1 << (DMFParser.T__142 - 94)) | (1 << (DMFParser.T__143 - 94)) | (1 << (DMFParser.T__148 - 94)) | (1 << (DMFParser.T__153 - 94)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.FUTURE - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.INJECTABLE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.MAYBE - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                        self.state = 749
                        self.param()
                        self.state = 754
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 750
                            self.match(DMFParser.T__20)
                            self.state = 751
                            self.param()
                            self.state = 756
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 759
                    self.match(DMFParser.CLOSE_PAREN)


                self.state = 762
                self.match(DMFParser.T__85)
                self.state = 763
                localctx.ret_type = self.value_type()
                pass
            elif token in [DMFParser.T__90, DMFParser.T__91]:
                self.enterOuterAlt(localctx, 5)
                self.state = 764
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__90 or _la==DMFParser.T__91):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__29) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__62))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (DMFParser.T__96 - 97)) | (1 << (DMFParser.T__97 - 97)) | (1 << (DMFParser.T__98 - 97)) | (1 << (DMFParser.T__99 - 97)) | (1 << (DMFParser.T__100 - 97)) | (1 << (DMFParser.T__101 - 97)) | (1 << (DMFParser.T__102 - 97)) | (1 << (DMFParser.T__103 - 97)) | (1 << (DMFParser.T__105 - 97)) | (1 << (DMFParser.T__111 - 97)) | (1 << (DMFParser.T__118 - 97)) | (1 << (DMFParser.T__120 - 97)) | (1 << (DMFParser.T__125 - 97)) | (1 << (DMFParser.T__126 - 97)) | (1 << (DMFParser.T__129 - 97)) | (1 << (DMFParser.T__132 - 97)) | (1 << (DMFParser.T__136 - 97)) | (1 << (DMFParser.T__141 - 97)) | (1 << (DMFParser.T__143 - 97)) | (1 << (DMFParser.T__148 - 97)) | (1 << (DMFParser.T__153 - 97)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                    self.state = 765
                    localctx.called = self.name()


                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__19:
                    self.state = 768
                    self.match(DMFParser.T__19)
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__9) | (1 << DMFParser.T__10) | (1 << DMFParser.T__16) | (1 << DMFParser.T__19) | (1 << DMFParser.T__22) | (1 << DMFParser.T__23) | (1 << DMFParser.T__26) | (1 << DMFParser.T__27) | (1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__31) | (1 << DMFParser.T__32) | (1 << DMFParser.T__33) | (1 << DMFParser.T__34) | (1 << DMFParser.T__38) | (1 << DMFParser.T__39) | (1 << DMFParser.T__54) | (1 << DMFParser.T__62))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (DMFParser.T__93 - 94)) | (1 << (DMFParser.T__96 - 94)) | (1 << (DMFParser.T__97 - 94)) | (1 << (DMFParser.T__98 - 94)) | (1 << (DMFParser.T__99 - 94)) | (1 << (DMFParser.T__100 - 94)) | (1 << (DMFParser.T__101 - 94)) | (1 << (DMFParser.T__102 - 94)) | (1 << (DMFParser.T__103 - 94)) | (1 << (DMFParser.T__104 - 94)) | (1 << (DMFParser.T__105 - 94)) | (1 << (DMFParser.T__106 - 94)) | (1 << (DMFParser.T__107 - 94)) | (1 << (DMFParser.T__108 - 94)) | (1 << (DMFParser.T__109 - 94)) | (1 << (DMFParser.T__110 - 94)) | (1 << (DMFParser.T__111 - 94)) | (1 << (DMFParser.T__112 - 94)) | (1 << (DMFParser.T__113 - 94)) | (1 << (DMFParser.T__114 - 94)) | (1 << (DMFParser.T__115 - 94)) | (1 << (DMFParser.T__116 - 94)) | (1 << (DMFParser.T__117 - 94)) | (1 << (DMFParser.T__118 - 94)) | (1 << (DMFParser.T__119 - 94)) | (1 << (DMFParser.T__120 - 94)) | (1 << (DMFParser.T__121 - 94)) | (1 << (DMFParser.T__122 - 94)) | (1 << (DMFParser.T__123 - 94)) | (1 << (DMFParser.T__124 - 94)) | (1 << (DMFParser.T__125 - 94)) | (1 << (DMFParser.T__126 - 94)) | (1 << (DMFParser.T__127 - 94)) | (1 << (DMFParser.T__128 - 94)) | (1 << (DMFParser.T__129 - 94)) | (1 << (DMFParser.T__130 - 94)) | (1 << (DMFParser.T__131 - 94)) | (1 << (DMFParser.T__132 - 94)) | (1 << (DMFParser.T__133 - 94)) | (1 << (DMFParser.T__134 - 94)) | (1 << (DMFParser.T__135 - 94)) | (1 << (DMFParser.T__136 - 94)) | (1 << (DMFParser.T__137 - 94)) | (1 << (DMFParser.T__138 - 94)) | (1 << (DMFParser.T__139 - 94)) | (1 << (DMFParser.T__141 - 94)) | (1 << (DMFParser.T__142 - 94)) | (1 << (DMFParser.T__143 - 94)) | (1 << (DMFParser.T__148 - 94)) | (1 << (DMFParser.T__153 - 94)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (DMFParser.T__181 - 182)) | (1 << (DMFParser.T__182 - 182)) | (1 << (DMFParser.T__183 - 182)) | (1 << (DMFParser.T__184 - 182)) | (1 << (DMFParser.T__185 - 182)) | (1 << (DMFParser.T__186 - 182)) | (1 << (DMFParser.T__187 - 182)) | (1 << (DMFParser.T__190 - 182)) | (1 << (DMFParser.T__191 - 182)) | (1 << (DMFParser.T__192 - 182)) | (1 << (DMFParser.T__193 - 182)) | (1 << (DMFParser.T__194 - 182)) | (1 << (DMFParser.T__195 - 182)) | (1 << (DMFParser.T__196 - 182)) | (1 << (DMFParser.T__197 - 182)) | (1 << (DMFParser.T__198 - 182)) | (1 << (DMFParser.T__199 - 182)) | (1 << (DMFParser.T__200 - 182)) | (1 << (DMFParser.T__201 - 182)) | (1 << (DMFParser.T__202 - 182)) | (1 << (DMFParser.T__203 - 182)) | (1 << (DMFParser.T__204 - 182)) | (1 << (DMFParser.T__205 - 182)) | (1 << (DMFParser.T__206 - 182)) | (1 << (DMFParser.T__207 - 182)) | (1 << (DMFParser.T__208 - 182)) | (1 << (DMFParser.T__209 - 182)) | (1 << (DMFParser.T__210 - 182)) | (1 << (DMFParser.T__211 - 182)) | (1 << (DMFParser.T__212 - 182)) | (1 << (DMFParser.T__213 - 182)) | (1 << (DMFParser.T__214 - 182)) | (1 << (DMFParser.T__215 - 182)) | (1 << (DMFParser.T__216 - 182)) | (1 << (DMFParser.T__235 - 182)) | (1 << (DMFParser.T__236 - 182)) | (1 << (DMFParser.T__237 - 182)) | (1 << (DMFParser.T__238 - 182)) | (1 << (DMFParser.T__239 - 182)) | (1 << (DMFParser.T__240 - 182)) | (1 << (DMFParser.T__241 - 182)) | (1 << (DMFParser.T__243 - 182)) | (1 << (DMFParser.T__244 - 182)))) != 0) or ((((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & ((1 << (DMFParser.T__245 - 246)) | (1 << (DMFParser.T__246 - 246)) | (1 << (DMFParser.T__247 - 246)) | (1 << (DMFParser.FUTURE - 246)) | (1 << (DMFParser.INTERACTIVE - 246)) | (1 << (DMFParser.INJECTABLE - 246)) | (1 << (DMFParser.OFF - 246)) | (1 << (DMFParser.ON - 246)) | (1 << (DMFParser.MAYBE - 246)) | (1 << (DMFParser.ID - 246)))) != 0):
                        self.state = 769
                        self.param()
                        self.state = 774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==DMFParser.T__20:
                            self.state = 770
                            self.match(DMFParser.T__20)
                            self.state = 771
                            self.param()
                            self.state = 776
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 779
                    self.match(DMFParser.CLOSE_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self.pname = None
            self.n = None
            self.deprecated = None
            self._value_type = None # Value_typeContext
            self._INT = None # Token
            self._name = None # NameContext

        def value_type(self):
            return self.getTypedRuleContext(DMFParser.Value_typeContext,0)


        def INJECTABLE(self):
            return self.getToken(DMFParser.INJECTABLE, 0)

        def INT(self):
            return self.getToken(DMFParser.INT, 0)

        def name(self):
            return self.getTypedRuleContext(DMFParser.NameContext,0)


        def INJECT(self):
            return self.getToken(DMFParser.INJECT, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = DMFParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.match(DMFParser.T__26)
                self.state = 785
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__22:
                    self.state = 788
                    self.match(DMFParser.T__22)


                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.INJECTABLE:
                    self.state = 791
                    self.match(DMFParser.INJECTABLE)


                self.state = 794
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.INJECTABLE:
                    self.state = 797
                    self.match(DMFParser.INJECTABLE)


                self.state = 800
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                self.state = 802
                localctx._INT = self.match(DMFParser.INT)
                localctx.n=(0 if localctx._INT is None else int(localctx._INT.text))
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.INJECTABLE:
                    self.state = 805
                    self.match(DMFParser.INJECTABLE)


                self.state = 808
                localctx._value_type = self.value_type()
                self.state = 809
                localctx._name = self.name()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.INJECTABLE:
                    self.state = 813
                    self.match(DMFParser.INJECTABLE)


                self.state = 816
                localctx._name = self.name()
                self.state = 817
                self.match(DMFParser.INJECT)
                self.state = 818
                localctx._value_type = self.value_type()
                localctx.type=localctx._value_type.type
                localctx.pname=(None if localctx._name is None else self._input.getText(localctx._name.start,localctx._name.stop))
                localctx.deprecated=True
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_arg_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def TOGGLE(self):
            return self.getToken(DMFParser.TOGGLE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_no_arg_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_arg_action" ):
                listener.enterNo_arg_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_arg_action" ):
                listener.exitNo_arg_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_arg_action" ):
                return visitor.visitNo_arg_action(self)
            else:
                return visitor.visitChildren(self)




    def no_arg_action(self):

        localctx = DMFParser.No_arg_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_no_arg_action)
        self._la = 0 # Token type
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.match(DMFParser.T__92)
                self.state = 826
                self.match(DMFParser.ON)
                localctx.which="TURN-ON"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.match(DMFParser.T__92)
                self.state = 829
                self.match(DMFParser.OFF)
                localctx.which="TURN-OFF"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 831
                self.match(DMFParser.TOGGLE)
                self.state = 833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 832
                    self.match(DMFParser.T__93)


                localctx.which="TOGGLE"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                self.match(DMFParser.T__94)
                self.state = 842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 837
                    self.match(DMFParser.T__49)
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__33:
                        self.state = 838
                        self.match(DMFParser.T__33)


                    self.state = 841
                    self.match(DMFParser.T__95)


                localctx.which="REMOVE-FROM-BOARD"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 845
                self.match(DMFParser.T__96)
                self.state = 846
                self.match(DMFParser.T__97)
                localctx.which="RESET PADS"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 848
                self.match(DMFParser.T__96)
                self.state = 849
                self.match(DMFParser.T__98)
                localctx.which="RESET MAGNETS"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 851
                self.match(DMFParser.T__96)
                self.state = 855
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__99]:
                    self.state = 852
                    self.match(DMFParser.T__99)
                    pass
                elif token in [DMFParser.T__100]:
                    self.state = 853
                    self.match(DMFParser.T__100)
                    self.state = 854
                    self.match(DMFParser.T__101)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.which="RESET HEATERS"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 858
                self.match(DMFParser.T__96)
                self.state = 859
                self.match(DMFParser.T__102)
                localctx.which="RESET CHILLERS"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 861
                self.match(DMFParser.T__96)
                self.state = 862
                self.match(DMFParser.T__103)
                localctx.which="RESET ALL"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_future_type = None # Not_future_typeContext

        def FUTURE(self):
            return self.getToken(DMFParser.FUTURE, 0)

        def not_future_type(self):
            return self.getTypedRuleContext(DMFParser.Not_future_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_type" ):
                listener.enterValue_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_type" ):
                listener.exitValue_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_type" ):
                return visitor.visitValue_type(self)
            else:
                return visitor.visitChildren(self)




    def value_type(self):

        localctx = DMFParser.Value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_value_type)
        try:
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.match(DMFParser.FUTURE)
                self.state = 867
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.match(DMFParser.T__19)
                self.state = 871
                self.match(DMFParser.FUTURE)
                self.state = 872
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 873
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type.future
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 876
                localctx._not_future_type = self.not_future_type()
                localctx.type=localctx._not_future_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_future_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._not_maybe_type = None # Not_maybe_typeContext

        def MAYBE(self):
            return self.getToken(DMFParser.MAYBE, 0)

        def not_maybe_type(self):
            return self.getTypedRuleContext(DMFParser.Not_maybe_typeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(DMFParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_not_future_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_future_type" ):
                listener.enterNot_future_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_future_type" ):
                listener.exitNot_future_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_future_type" ):
                return visitor.visitNot_future_type(self)
            else:
                return visitor.visitChildren(self)




    def not_future_type(self):

        localctx = DMFParser.Not_future_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_not_future_type)
        try:
            self.state = 894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.MAYBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.match(DMFParser.MAYBE)
                self.state = 882
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(DMFParser.T__19)
                self.state = 886
                self.match(DMFParser.MAYBE)
                self.state = 887
                self.match(DMFParser.CLOSE_PAREN)
                self.state = 888
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type.maybe
                pass
            elif token in [DMFParser.T__27, DMFParser.T__29, DMFParser.T__30, DMFParser.T__34, DMFParser.T__54, DMFParser.T__93, DMFParser.T__100, DMFParser.T__104, DMFParser.T__105, DMFParser.T__106, DMFParser.T__107, DMFParser.T__108, DMFParser.T__109, DMFParser.T__110, DMFParser.T__112, DMFParser.T__113, DMFParser.T__114, DMFParser.T__115, DMFParser.T__116, DMFParser.T__117, DMFParser.T__119, DMFParser.T__120, DMFParser.T__121, DMFParser.T__122, DMFParser.T__123, DMFParser.T__124, DMFParser.T__127, DMFParser.T__128, DMFParser.T__129, DMFParser.T__130, DMFParser.T__131, DMFParser.T__133, DMFParser.T__134, DMFParser.T__135, DMFParser.T__137, DMFParser.T__138, DMFParser.T__139, DMFParser.T__142]:
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                localctx._not_maybe_type = self.not_maybe_type()
                localctx.type=localctx._not_maybe_type.type
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_maybe_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sample_type = None # Sample_typeContext
            self._atomic_type = None # Atomic_typeContext

        def sample_type(self):
            return self.getTypedRuleContext(DMFParser.Sample_typeContext,0)


        def atomic_type(self):
            return self.getTypedRuleContext(DMFParser.Atomic_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_not_maybe_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_maybe_type" ):
                listener.enterNot_maybe_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_maybe_type" ):
                listener.exitNot_maybe_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_maybe_type" ):
                return visitor.visitNot_maybe_type(self)
            else:
                return visitor.visitChildren(self)




    def not_maybe_type(self):

        localctx = DMFParser.Not_maybe_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_not_maybe_type)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                localctx._sample_type = self.sample_type()
                localctx.type=localctx._sample_type.type
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                localctx._atomic_type = self.atomic_type()
                localctx.type=localctx._atomic_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._sampleable_type = None # Sampleable_typeContext

        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sample_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_type" ):
                listener.enterSample_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_type" ):
                listener.exitSample_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_type" ):
                return visitor.visitSample_type(self)
            else:
                return visitor.visitChildren(self)




    def sample_type(self):

        localctx = DMFParser.Sample_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sample_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            localctx._sampleable_type = self.sampleable_type()
            self.state = 905
            self.match(DMFParser.T__38)
            localctx.type=localctx._sampleable_type.type.sample
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._component_type = None # Component_typeContext
            self._sampleable_type = None # Sampleable_typeContext

        def component_type(self):
            return self.getTypedRuleContext(DMFParser.Component_typeContext,0)


        def sampleable_type(self):
            return self.getTypedRuleContext(DMFParser.Sampleable_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_atomic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_type" ):
                listener.enterAtomic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_type" ):
                listener.exitAtomic_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_type" ):
                return visitor.visitAtomic_type(self)
            else:
                return visitor.visitChildren(self)




    def atomic_type(self):

        localctx = DMFParser.Atomic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_atomic_type)
        self._la = 0 # Token type
        try:
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.match(DMFParser.T__54)
                localctx.type=Type.DROP
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(DMFParser.T__27)
                localctx.type=Type.STRING
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(DMFParser.T__93)
                localctx.type=Type.BINARY_STATE
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 914
                self.match(DMFParser.T__104)
                localctx.type=Type.BINARY_CPT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 916
                self.match(DMFParser.T__105)
                localctx.type=Type.DELTA
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 918
                self.match(DMFParser.T__106)
                localctx.type=Type.MOTION
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 920
                self.match(DMFParser.T__107)
                localctx.type=Type.DELAY
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 922
                self.match(DMFParser.T__108)
                localctx.type=Type.BOOL
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 924
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.DIR
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 926
                self.match(DMFParser.T__34)
                localctx.type=Type.REAGENT
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 928
                self.match(DMFParser.T__109)
                localctx.type=Type.LIQUID
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 930
                self.match(DMFParser.T__110)
                self.state = 931
                self.match(DMFParser.T__111)
                localctx.type=Type.SENSOR_READING
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 933
                self.match(DMFParser.T__112)
                self.state = 934
                self.match(DMFParser.T__111)
                localctx.type=Type.ESELOG_READING
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 936
                localctx._component_type = self.component_type()
                localctx.type=localctx._component_type.type
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 939
                localctx._sampleable_type = self.sampleable_type()
                localctx.type=localctx._sampleable_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sampleable_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None
            self._quantity_type = None # Quantity_typeContext

        def quantity_type(self):
            return self.getTypedRuleContext(DMFParser.Quantity_typeContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_sampleable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleable_type" ):
                listener.enterSampleable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleable_type" ):
                listener.exitSampleable_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleable_type" ):
                return visitor.visitSampleable_type(self)
            else:
                return visitor.visitChildren(self)




    def sampleable_type(self):

        localctx = DMFParser.Sampleable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sampleable_type)
        self._la = 0 # Token type
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.match(DMFParser.T__113)
                localctx.type=Type.INT
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 946
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__114 or _la==DMFParser.T__115):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.FLOAT
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 949
                    self.match(DMFParser.T__118)


                localctx.type=Type.ABS_TEMP
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.match(DMFParser.T__119)
                localctx.type=Type.TIMESTAMP
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 955
                localctx._quantity_type = self.quantity_type()
                localctx.type=localctx._quantity_type.type
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantity_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_quantity_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantity_type" ):
                listener.enterQuantity_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantity_type" ):
                listener.exitQuantity_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantity_type" ):
                return visitor.visitQuantity_type(self)
            else:
                return visitor.visitChildren(self)




    def quantity_type(self):

        localctx = DMFParser.Quantity_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_quantity_type)
        self._la = 0 # Token type
        try:
            self.state = 973
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__120]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(DMFParser.T__120)
                localctx.type=Type.TIME
                pass
            elif token in [DMFParser.T__121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.match(DMFParser.T__121)
                localctx.type=Time.FREQUENCY
                pass
            elif token in [DMFParser.T__122]:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.match(DMFParser.T__122)
                localctx.type=Type.TICKS
                pass
            elif token in [DMFParser.T__123]:
                self.enterOuterAlt(localctx, 4)
                self.state = 966
                self.match(DMFParser.T__123)
                localctx.type=Type.VOLUME
                pass
            elif token in [DMFParser.T__124]:
                self.enterOuterAlt(localctx, 5)
                self.state = 968
                self.match(DMFParser.T__124)
                localctx.type=Type.VOLTAGE
                pass
            elif token in [DMFParser.T__116, DMFParser.T__117]:
                self.enterOuterAlt(localctx, 6)
                self.state = 970
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 971
                _la = self._input.LA(1)
                if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (DMFParser.T__105 - 106)) | (1 << (DMFParser.T__125 - 106)) | (1 << (DMFParser.T__126 - 106)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.type=Type.REL_TEMP
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type = None


        def getRuleIndex(self):
            return DMFParser.RULE_component_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_type" ):
                listener.enterComponent_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_type" ):
                listener.exitComponent_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponent_type" ):
                return visitor.visitComponent_type(self)
            else:
                return visitor.visitChildren(self)




    def component_type(self):

        localctx = DMFParser.Component_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_component_type)
        self._la = 0 # Token type
        try:
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(DMFParser.T__127)
                localctx.type=Type.PAD
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__128:
                    self.state = 977
                    self.match(DMFParser.T__128)


                self.state = 980
                self.match(DMFParser.T__129)
                localctx.type=Type.PIPETTING_TARGET
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 982
                self.match(DMFParser.T__130)
                localctx.type=Type.WELL
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 984
                    self.match(DMFParser.T__131)
                    self.state = 985
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__118 or _la==DMFParser.T__132):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__131:
                        self.state = 986
                        self.match(DMFParser.T__131)


                    self.state = 989
                    self.match(DMFParser.T__133)
                    pass


                localctx.type=Type.EXTRACTION_POINT
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 993
                self.match(DMFParser.T__130)
                self.state = 994
                self.match(DMFParser.T__127)
                localctx.type=Type.WELL_PAD
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__130:
                    self.state = 996
                    self.match(DMFParser.T__130)


                self.state = 999
                self.match(DMFParser.T__134)
                localctx.type=Type.WELL_GATE
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__135]:
                    self.state = 1001
                    self.match(DMFParser.T__135)
                    pass
                elif token in [DMFParser.T__100]:
                    self.state = 1002
                    self.match(DMFParser.T__100)
                    self.state = 1003
                    self.match(DMFParser.T__136)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.type=Type.HEATER
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1007
                self.match(DMFParser.T__137)
                localctx.type=Type.CHILLER
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1009
                self.match(DMFParser.T__138)
                localctx.type=Type.MAGNET
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1011
                self.match(DMFParser.T__139)
                self.state = 1012
                self.match(DMFParser.T__140)
                localctx.type=Type.POWER_SUPPLY
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1014
                self.match(DMFParser.T__139)
                self.state = 1015
                self.match(DMFParser.T__141)
                localctx.type=Type.POWER_MODE
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1017
                self.match(DMFParser.T__142)
                localctx.type=Type.FAN
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1019
                self.match(DMFParser.T__110)
                localctx.type=Type.SENSOR
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1021
                self.match(DMFParser.T__112)
                localctx.type=Type.ESELOG
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dim_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unit = None


        def getRuleIndex(self):
            return DMFParser.RULE_dim_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDim_unit" ):
                listener.enterDim_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDim_unit" ):
                listener.exitDim_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDim_unit" ):
                return visitor.visitDim_unit(self)
            else:
                return visitor.visitChildren(self)




    def dim_unit(self):

        localctx = DMFParser.Dim_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dim_unit)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__143, DMFParser.T__144, DMFParser.T__145, DMFParser.T__146, DMFParser.T__147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                _la = self._input.LA(1)
                if not(((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (DMFParser.T__143 - 144)) | (1 << (DMFParser.T__144 - 144)) | (1 << (DMFParser.T__145 - 144)) | (1 << (DMFParser.T__146 - 144)) | (1 << (DMFParser.T__147 - 144)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.sec
                pass
            elif token in [DMFParser.T__148, DMFParser.T__149, DMFParser.T__150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                _la = self._input.LA(1)
                if not(((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (DMFParser.T__148 - 149)) | (1 << (DMFParser.T__149 - 149)) | (1 << (DMFParser.T__150 - 149)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.ms
                pass
            elif token in [DMFParser.T__151, DMFParser.T__152, DMFParser.T__153, DMFParser.T__154]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1029
                _la = self._input.LA(1)
                if not(((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (DMFParser.T__151 - 152)) | (1 << (DMFParser.T__152 - 152)) | (1 << (DMFParser.T__153 - 152)) | (1 << (DMFParser.T__154 - 152)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.minutes
                pass
            elif token in [DMFParser.T__155, DMFParser.T__156, DMFParser.T__157, DMFParser.T__158]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1031
                _la = self._input.LA(1)
                if not(((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (DMFParser.T__155 - 156)) | (1 << (DMFParser.T__156 - 156)) | (1 << (DMFParser.T__157 - 156)) | (1 << (DMFParser.T__158 - 156)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.hours
                pass
            elif token in [DMFParser.T__159, DMFParser.T__160, DMFParser.T__161, DMFParser.T__162, DMFParser.T__163, DMFParser.T__164]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1033
                _la = self._input.LA(1)
                if not(((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & ((1 << (DMFParser.T__159 - 160)) | (1 << (DMFParser.T__160 - 160)) | (1 << (DMFParser.T__161 - 160)) | (1 << (DMFParser.T__162 - 160)) | (1 << (DMFParser.T__163 - 160)) | (1 << (DMFParser.T__164 - 160)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.uL
                pass
            elif token in [DMFParser.T__165, DMFParser.T__166, DMFParser.T__167, DMFParser.T__168, DMFParser.T__169, DMFParser.T__170]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1035
                _la = self._input.LA(1)
                if not(((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & ((1 << (DMFParser.T__165 - 166)) | (1 << (DMFParser.T__166 - 166)) | (1 << (DMFParser.T__167 - 166)) | (1 << (DMFParser.T__168 - 166)) | (1 << (DMFParser.T__169 - 166)) | (1 << (DMFParser.T__170 - 166)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.mL
                pass
            elif token in [DMFParser.T__122, DMFParser.T__171]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1037
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__122 or _la==DMFParser.T__171):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=ticks
                pass
            elif token in [DMFParser.T__54, DMFParser.T__172]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1039
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__54 or _la==DMFParser.T__172):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=EnvRelativeUnit.DROP
                pass
            elif token in [DMFParser.T__173, DMFParser.T__174, DMFParser.T__175]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1041
                _la = self._input.LA(1)
                if not(((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & ((1 << (DMFParser.T__173 - 174)) | (1 << (DMFParser.T__174 - 174)) | (1 << (DMFParser.T__175 - 174)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.volts
                pass
            elif token in [DMFParser.T__176, DMFParser.T__177, DMFParser.T__178]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1043
                _la = self._input.LA(1)
                if not(((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (DMFParser.T__176 - 177)) | (1 << (DMFParser.T__177 - 177)) | (1 << (DMFParser.T__178 - 177)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.millivolts
                pass
            elif token in [DMFParser.T__179, DMFParser.T__180]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1045
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__179 or _la==DMFParser.T__180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.unit=SI.hertz
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numbered_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None


        def getRuleIndex(self):
            return DMFParser.RULE_numbered_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumbered_type" ):
                listener.enterNumbered_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumbered_type" ):
                listener.exitNumbered_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumbered_type" ):
                return visitor.visitNumbered_type(self)
            else:
                return visitor.visitChildren(self)




    def numbered_type(self):

        localctx = DMFParser.Numbered_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_numbered_type)
        self._la = 0 # Token type
        try:
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.match(DMFParser.T__130)
                localctx.kind=NumberedItem.WELL
                pass
            elif token in [DMFParser.T__100, DMFParser.T__135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__135]:
                    self.state = 1051
                    self.match(DMFParser.T__135)
                    pass
                elif token in [DMFParser.T__100]:
                    self.state = 1052
                    self.match(DMFParser.T__100)
                    self.state = 1053
                    self.match(DMFParser.T__136)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.kind=NumberedItem.HEATER
                pass
            elif token in [DMFParser.T__137]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1057
                self.match(DMFParser.T__137)
                localctx.kind=NumberedItem.CHILLER
                pass
            elif token in [DMFParser.T__138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1059
                self.match(DMFParser.T__138)
                localctx.kind=NumberedItem.MAGNET
                pass
            elif token in [DMFParser.T__131, DMFParser.T__133]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1067
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1061
                    self.match(DMFParser.T__131)
                    self.state = 1062
                    _la = self._input.LA(1)
                    if not(_la==DMFParser.T__118 or _la==DMFParser.T__132):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 1064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__131:
                        self.state = 1063
                        self.match(DMFParser.T__131)


                    self.state = 1066
                    self.match(DMFParser.T__133)
                    pass


                localctx.kind=NumberedItem.EXTRACTION_POINT
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinimumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_minimum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinimum" ):
                listener.enterMinimum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinimum" ):
                listener.exitMinimum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinimum" ):
                return visitor.visitMinimum(self)
            else:
                return visitor.visitChildren(self)




    def minimum(self):

        localctx = DMFParser.MinimumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_minimum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__153 or _la==DMFParser.T__181):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaximumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return DMFParser.RULE_maximum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaximum" ):
                listener.enterMaximum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaximum" ):
                listener.exitMaximum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaximum" ):
                return visitor.visitMaximum(self)
            else:
                return visitor.visitChildren(self)




    def maximum(self):

        localctx = DMFParser.MaximumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_maximum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            _la = self._input.LA(1)
            if not(_la==DMFParser.T__182 or _la==DMFParser.T__183):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Min_maxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minimum(self):
            return self.getTypedRuleContext(DMFParser.MinimumContext,0)


        def maximum(self):
            return self.getTypedRuleContext(DMFParser.MaximumContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_min_max

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMin_max" ):
                listener.enterMin_max(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMin_max" ):
                listener.exitMin_max(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMin_max" ):
                return visitor.visitMin_max(self)
            else:
                return visitor.visitChildren(self)




    def min_max(self):

        localctx = DMFParser.Min_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_min_max)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__153, DMFParser.T__181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.minimum()
                pass
            elif token in [DMFParser.T__182, DMFParser.T__183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.maximum()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = DMFParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.state = 1175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.match(DMFParser.T__16)
                self.state = 1081
                self.match(DMFParser.T__127)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.match(DMFParser.T__184)
                self.state = 1083
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__185 or _la==DMFParser.T__186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1084
                self.match(DMFParser.T__187)
                self.state = 1085
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__185 or _la==DMFParser.T__186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1086
                self.match(DMFParser.T__16)
                self.state = 1087
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1088
                self.match(DMFParser.T__188)
                self.state = 1089
                self.match(DMFParser.T__189)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1090
                self.match(DMFParser.T__190)
                self.state = 1091
                self.match(DMFParser.T__191)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1092
                self.match(DMFParser.T__192)
                self.state = 1093
                self.match(DMFParser.T__191)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1094
                self.match(DMFParser.T__129)
                self.state = 1095
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1096
                self.match(DMFParser.T__193)
                self.state = 1097
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1098
                self.match(DMFParser.T__139)
                self.state = 1099
                self.match(DMFParser.T__140)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1100
                self.min_max()
                self.state = 1101
                self.match(DMFParser.T__124)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1103
                self.min_max()
                self.state = 1104
                _la = self._input.LA(1)
                if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (DMFParser.T__116 - 117)) | (1 << (DMFParser.T__117 - 117)) | (1 << (DMFParser.T__129 - 117)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__139:
                    self.state = 1106
                    self.match(DMFParser.T__139)


                self.state = 1109
                self.match(DMFParser.T__141)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1110
                self.match(DMFParser.T__100)
                self.state = 1111
                self.match(DMFParser.T__136)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1112
                self.match(DMFParser.T__194)
                self.state = 1113
                self.match(DMFParser.T__195)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1114
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1115
                self.match(DMFParser.T__197)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1116
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1117
                self.match(DMFParser.T__198)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1118
                self.match(DMFParser.T__199)
                self.state = 1120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1119
                    self.match(DMFParser.T__200)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1122
                self.match(DMFParser.T__201)
                self.state = 1124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1123
                    self.match(DMFParser.T__200)


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1126
                self.min_max()
                self.state = 1128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1127
                    self.match(DMFParser.T__200)


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1135
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__202, DMFParser.T__205]:
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__202:
                        self.state = 1130
                        self.match(DMFParser.T__202)


                    pass
                elif token in [DMFParser.T__203]:
                    self.state = 1133
                    self.match(DMFParser.T__203)
                    pass
                elif token in [DMFParser.T__204]:
                    self.state = 1134
                    self.match(DMFParser.T__204)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1137
                self.match(DMFParser.T__205)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1138
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__206 or _la==DMFParser.T__207):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1139
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__208 or _la==DMFParser.T__209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1140
                self.match(DMFParser.T__210)
                self.state = 1141
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__211 or _la==DMFParser.T__212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__213:
                    self.state = 1142
                    self.match(DMFParser.T__213)


                self.state = 1145
                self.match(DMFParser.T__214)
                self.state = 1146
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__215 or _la==DMFParser.T__216):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1147
                self.match(DMFParser.T__131)
                self.state = 1148
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__118 or _la==DMFParser.T__132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1149
                self.kwd_names()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1150
                self.match(DMFParser.T__54)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1151
                self.match(DMFParser.T__127)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1152
                self.match(DMFParser.T__130)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1153
                self.match(DMFParser.T__123)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1154
                self.match(DMFParser.T__34)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1155
                self.match(DMFParser.T__135)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1156
                self.match(DMFParser.T__137)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1157
                self.match(DMFParser.T__138)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1158
                self.match(DMFParser.T__93)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1159
                self.match(DMFParser.T__142)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1160
                self.match(DMFParser.T__189)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1161
                self.match(DMFParser.T__112)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1162
                self.match(DMFParser.T__119)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1163
                self.match(DMFParser.T__117)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1164
                self.match(DMFParser.T__116)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1165
                self.match(DMFParser.T__134)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1166
                self.match(DMFParser.T__29)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1167
                self.match(DMFParser.T__30)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1168
                self.match(DMFParser.T__76)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1169
                self.match(DMFParser.T__78)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1170
                self.match(DMFParser.T__79)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1171
                self.match(DMFParser.T__124)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1172
                self.match(DMFParser.T__141)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1173
                self.match(DMFParser.T__200)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1174
                self.match(DMFParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None


        def getRuleIndex(self):
            return DMFParser.RULE_rel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel" ):
                listener.enterRel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel" ):
                listener.exitRel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel" ):
                return visitor.visitRel(self)
            else:
                return visitor.visitChildren(self)




    def rel(self):

        localctx = DMFParser.RelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_rel)
        try:
            self.state = 1189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__217]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1177
                self.match(DMFParser.T__217)
                localctx.which=Rel.EQ
                pass
            elif token in [DMFParser.T__218]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.match(DMFParser.T__218)
                localctx.which=Rel.NE
                pass
            elif token in [DMFParser.T__219]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1181
                self.match(DMFParser.T__219)
                localctx.which=Rel.LT
                pass
            elif token in [DMFParser.T__220]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1183
                self.match(DMFParser.T__220)
                localctx.which=Rel.LE
                pass
            elif token in [DMFParser.T__221]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1185
                self.match(DMFParser.T__221)
                localctx.which=Rel.GT
                pass
            elif token in [DMFParser.T__222]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1187
                self.match(DMFParser.T__222)
                localctx.which=Rel.GE
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None


        def getRuleIndex(self):
            return DMFParser.RULE_bool_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_val" ):
                listener.enterBool_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_val" ):
                listener.exitBool_val(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_val" ):
                return visitor.visitBool_val(self)
            else:
                return visitor.visitChildren(self)




    def bool_val(self):

        localctx = DMFParser.Bool_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_bool_val)
        self._la = 0 # Token type
        try:
            self.state = 1195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DMFParser.T__223, DMFParser.T__224, DMFParser.T__225, DMFParser.T__226, DMFParser.T__227, DMFParser.T__228]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                _la = self._input.LA(1)
                if not(((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & ((1 << (DMFParser.T__223 - 224)) | (1 << (DMFParser.T__224 - 224)) | (1 << (DMFParser.T__225 - 224)) | (1 << (DMFParser.T__226 - 224)) | (1 << (DMFParser.T__227 - 224)) | (1 << (DMFParser.T__228 - 224)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=True
                pass
            elif token in [DMFParser.T__229, DMFParser.T__230, DMFParser.T__231, DMFParser.T__232, DMFParser.T__233, DMFParser.T__234]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (DMFParser.T__229 - 230)) | (1 << (DMFParser.T__230 - 230)) | (1 << (DMFParser.T__231 - 230)) | (1 << (DMFParser.T__232 - 230)) | (1 << (DMFParser.T__233 - 230)) | (1 << (DMFParser.T__234 - 230)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.val=False
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None
            self._multi_word_name = None # Multi_word_nameContext
            self._ID = None # Token
            self._kwd_names = None # Kwd_namesContext

        def multi_word_name(self):
            return self.getTypedRuleContext(DMFParser.Multi_word_nameContext,0)


        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def kwd_names(self):
            return self.getTypedRuleContext(DMFParser.Kwd_namesContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = DMFParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_name)
        try:
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1197
                localctx._multi_word_name = self.multi_word_name()
                localctx.val=localctx._multi_word_name.val
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                localctx._ID = self.match(DMFParser.ID)
                localctx.val=(None if localctx._ID is None else localctx._ID.text)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1202
                localctx._kwd_names = self.kwd_names()
                localctx.val=(None if localctx._kwd_names is None else self._input.getText(localctx._kwd_names.start,localctx._kwd_names.stop))
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_word_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def INTERACTIVE(self):
            return self.getToken(DMFParser.INTERACTIVE, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_multi_word_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_word_name" ):
                listener.enterMulti_word_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_word_name" ):
                listener.exitMulti_word_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_word_name" ):
                return visitor.visitMulti_word_name(self)
            else:
                return visitor.visitChildren(self)




    def multi_word_name(self):

        localctx = DMFParser.Multi_word_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_multi_word_name)
        self._la = 0 # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.match(DMFParser.ON)
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1208
                    self.match(DMFParser.T__33)


                self.state = 1211
                self.match(DMFParser.T__95)
                localctx.val="on board"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1213
                    self.match(DMFParser.T__33)


                self.state = 1216
                self.match(DMFParser.INTERACTIVE)
                self.state = 1217
                self.match(DMFParser.T__34)
                localctx.val="interactive reagent"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1219
                    self.match(DMFParser.T__33)


                self.state = 1222
                self.match(DMFParser.INTERACTIVE)
                self.state = 1223
                self.match(DMFParser.T__123)
                localctx.val="interactive volume"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1225
                self.match(DMFParser.T__33)
                self.state = 1226
                self.match(DMFParser.T__95)
                localctx.val="the board"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1228
                    self.match(DMFParser.T__33)


                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__201:
                    self.state = 1231
                    self.match(DMFParser.T__201)


                self.state = 1234
                self.match(DMFParser.T__235)
                self.state = 1235
                self.match(DMFParser.T__127)
                localctx.val="clicked pad"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__33:
                    self.state = 1237
                    self.match(DMFParser.T__33)


                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__201:
                    self.state = 1240
                    self.match(DMFParser.T__201)


                self.state = 1243
                self.match(DMFParser.T__235)
                self.state = 1244
                self.match(DMFParser.T__54)
                localctx.val="clicked drop"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1246
                self.match(DMFParser.T__236)
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__26:
                    self.state = 1247
                    self.match(DMFParser.T__26)


                self.state = 1250
                self.match(DMFParser.T__54)
                localctx.val="dispense drop"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1252
                self.match(DMFParser.T__237)
                self.state = 1253
                self.match(DMFParser.T__130)
                localctx.val="enter well"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1255
                self.match(DMFParser.T__238)
                self.state = 1256
                self.match(DMFParser.T__9)
                localctx.val="transfer in"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1258
                self.match(DMFParser.T__238)
                self.state = 1259
                self.match(DMFParser.T__239)
                localctx.val="transfer out"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1261
                self.match(DMFParser.T__240)
                self.state = 1262
                self.match(DMFParser.T__10)
                self.state = 1263
                self.match(DMFParser.T__236)
                localctx.val="prepare to dispense"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1265
                self.match(DMFParser.T__241)
                self.state = 1271
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DMFParser.T__26, DMFParser.T__111]:
                    self.state = 1267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DMFParser.T__26:
                        self.state = 1266
                        self.match(DMFParser.T__26)


                    self.state = 1269
                    self.match(DMFParser.T__111)
                    pass
                elif token in [DMFParser.T__242]:
                    self.state = 1270
                    self.match(DMFParser.T__242)
                    pass
                else:
                    raise NoViableAltException(self)

                localctx.val="take reading"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1274
                self.match(DMFParser.T__193)
                self.state = 1275
                self.match(DMFParser.T__120)
                localctx.val="current time"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1277
                self.match(DMFParser.T__120)
                self.state = 1278
                self.match(DMFParser.T__243)
                localctx.val="current time"
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1280
                self.match(DMFParser.T__244)
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__10:
                    self.state = 1281
                    self.match(DMFParser.T__10)


                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DMFParser.T__213:
                    self.state = 1284
                    self.match(DMFParser.T__213)


                self.state = 1287
                self.match(DMFParser.T__214)
                localctx.val="write to csv file"
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwd_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(DMFParser.ON, 0)

        def OFF(self):
            return self.getToken(DMFParser.OFF, 0)

        def min_max(self):
            return self.getTypedRuleContext(DMFParser.Min_maxContext,0)


        def getRuleIndex(self):
            return DMFParser.RULE_kwd_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwd_names" ):
                listener.enterKwd_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwd_names" ):
                listener.exitKwd_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwd_names" ):
                return visitor.visitKwd_names(self)
            else:
                return visitor.visitChildren(self)




    def kwd_names(self):

        localctx = DMFParser.Kwd_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_kwd_names)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.match(DMFParser.T__143)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.match(DMFParser.T__148)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.match(DMFParser.T__187)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1294
                self.match(DMFParser.T__184)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1295
                self.match(DMFParser.T__26)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1296
                self.match(DMFParser.T__22)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1297
                self.match(DMFParser.T__194)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1298
                self.match(DMFParser.T__245)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1299
                self.match(DMFParser.T__32)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1300
                self.match(DMFParser.ON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1301
                self.match(DMFParser.OFF)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1302
                self.match(DMFParser.T__31)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1303
                self.match(DMFParser.T__153)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1304
                self.match(DMFParser.T__182)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1305
                self.match(DMFParser.T__181)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1306
                self.match(DMFParser.T__183)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1307
                self.match(DMFParser.T__125)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1308
                self.match(DMFParser.T__126)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1309
                self.match(DMFParser.T__105)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1310
                self.match(DMFParser.T__118)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1311
                self.match(DMFParser.T__246)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1312
                self.match(DMFParser.T__247)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1313
                self.match(DMFParser.T__236)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1314
                self.match(DMFParser.T__237)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1315
                self.match(DMFParser.T__96)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1316
                self.match(DMFParser.T__98)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1317
                self.match(DMFParser.T__97)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1318
                self.match(DMFParser.T__99)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1319
                self.match(DMFParser.T__102)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1320
                self.match(DMFParser.T__103)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1321
                self.match(DMFParser.T__62)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1322
                self.match(DMFParser.T__201)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1323
                self.match(DMFParser.T__235)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1324
                self.match(DMFParser.T__132)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1325
                self.match(DMFParser.T__238)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1326
                self.match(DMFParser.T__9)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1327
                self.match(DMFParser.T__239)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1328
                self.match(DMFParser.T__100)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1329
                self.match(DMFParser.T__136)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1330
                self.match(DMFParser.T__101)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1331
                self.match(DMFParser.T__190)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1332
                self.match(DMFParser.T__192)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1333
                self.match(DMFParser.T__191)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1334
                self.match(DMFParser.T__240)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1335
                self.match(DMFParser.T__10)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1336
                self.match(DMFParser.T__236)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1337
                self.match(DMFParser.T__195)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1338
                self.match(DMFParser.T__196)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1339
                self.match(DMFParser.T__197)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1340
                self.match(DMFParser.T__198)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1341
                self.match(DMFParser.T__111)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1342
                self.match(DMFParser.T__129)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1343
                self.match(DMFParser.T__199)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1344
                self.match(DMFParser.T__201)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1345
                self.match(DMFParser.T__200)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1346
                self.match(DMFParser.T__193)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1347
                self.match(DMFParser.T__243)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1348
                self.match(DMFParser.T__16)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1349
                self.match(DMFParser.T__185)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1350
                self.match(DMFParser.T__186)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1351
                self.match(DMFParser.T__141)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1352
                self.min_max()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1353
                self.match(DMFParser.T__202)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1354
                self.match(DMFParser.T__203)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1355
                self.match(DMFParser.T__204)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1356
                self.match(DMFParser.T__205)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1357
                self.match(DMFParser.T__206)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1358
                self.match(DMFParser.T__207)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1359
                self.match(DMFParser.T__208)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1360
                self.match(DMFParser.T__209)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1361
                self.match(DMFParser.T__210)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1362
                self.match(DMFParser.T__29)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1363
                self.match(DMFParser.T__211)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1364
                self.match(DMFParser.T__212)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1365
                self.match(DMFParser.T__213)
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1366
                self.match(DMFParser.T__214)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1367
                self.match(DMFParser.T__215)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1368
                self.match(DMFParser.T__216)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1369
                self.match(DMFParser.T__39)
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1370
                self.match(DMFParser.T__23)
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1371
                self.match(DMFParser.T__38)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(DMFParser.STRING, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = DMFParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(DMFParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.which = None
            self.n = None # Token

        def ID(self):
            return self.getToken(DMFParser.ID, 0)

        def getRuleIndex(self):
            return DMFParser.RULE_old_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_attr" ):
                listener.enterOld_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_attr" ):
                listener.exitOld_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOld_attr" ):
                return visitor.visitOld_attr(self)
            else:
                return visitor.visitChildren(self)




    def old_attr(self):

        localctx = DMFParser.Old_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_old_attr)
        self._la = 0 # Token type
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.match(DMFParser.T__16)
                self.state = 1377
                self.match(DMFParser.T__127)
                localctx.which="#exit_pad"
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.match(DMFParser.T__184)
                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__185 or _la==DMFParser.T__186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#y_coord"
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1382
                self.match(DMFParser.T__187)
                self.state = 1383
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__185 or _la==DMFParser.T__186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#x_coord"
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1385
                self.match(DMFParser.T__16)
                self.state = 1386
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__29 or _la==DMFParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#exit_dir"
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1388
                self.match(DMFParser.T__188)
                self.state = 1389
                self.match(DMFParser.T__189)
                localctx.which="#remaining_capacity"
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1391
                self.match(DMFParser.T__190)
                self.state = 1392
                self.match(DMFParser.T__191)
                localctx.which="#fill_level"
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1394
                self.match(DMFParser.T__192)
                self.state = 1395
                self.match(DMFParser.T__191)
                localctx.which="#refill_level"
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1397
                self.match(DMFParser.T__129)
                self.state = 1398
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#target_temperature"
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1400
                self.match(DMFParser.T__193)
                self.state = 1401
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__116 or _la==DMFParser.T__117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#current_temperature"
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1403
                self.match(DMFParser.T__139)
                self.state = 1404
                self.match(DMFParser.T__140)
                localctx.which="#power_supply"
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1406
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__153 or _la==DMFParser.T__181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1407
                self.match(DMFParser.T__124)
                localctx.which="#min_voltage"
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1409
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__182 or _la==DMFParser.T__183):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1410
                self.match(DMFParser.T__124)
                localctx.which="#max_voltage"
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1412
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__153 or _la==DMFParser.T__181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1413
                _la = self._input.LA(1)
                if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (DMFParser.T__116 - 117)) | (1 << (DMFParser.T__117 - 117)) | (1 << (DMFParser.T__129 - 117)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#min_target"
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1415
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__182 or _la==DMFParser.T__183):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1416
                _la = self._input.LA(1)
                if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (DMFParser.T__116 - 117)) | (1 << (DMFParser.T__117 - 117)) | (1 << (DMFParser.T__129 - 117)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which="#max_target"
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1418
                self.match(DMFParser.T__139)
                self.state = 1419
                self.match(DMFParser.T__141)
                localctx.which="#power_mode"
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1421
                self.match(DMFParser.T__100)
                self.state = 1422
                self.match(DMFParser.T__136)
                localctx.which="#heating_zone"
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1424
                self.match(DMFParser.T__194)
                self.state = 1425
                self.match(DMFParser.T__195)
                localctx.which="#n_samples"
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1427
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1428
                self.match(DMFParser.T__197)
                localctx.which="#sample_rate"
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==DMFParser.T__38 or _la==DMFParser.T__196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1431
                self.match(DMFParser.T__198)
                localctx.which="#sample_interval"
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1433
                self.match(DMFParser.T__199)
                self.state = 1434
                self.match(DMFParser.T__200)
                localctx.which="#first_value"
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1436
                self.match(DMFParser.T__201)
                self.state = 1437
                self.match(DMFParser.T__200)
                localctx.which="#last_value"
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1439
                localctx.n = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DMFParser.T__29) | (1 << DMFParser.T__30) | (1 << DMFParser.T__34) | (1 << DMFParser.T__54))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (DMFParser.T__76 - 77)) | (1 << (DMFParser.T__78 - 77)) | (1 << (DMFParser.T__79 - 77)) | (1 << (DMFParser.T__93 - 77)) | (1 << (DMFParser.T__112 - 77)) | (1 << (DMFParser.T__116 - 77)) | (1 << (DMFParser.T__117 - 77)) | (1 << (DMFParser.T__119 - 77)) | (1 << (DMFParser.T__123 - 77)) | (1 << (DMFParser.T__124 - 77)) | (1 << (DMFParser.T__127 - 77)) | (1 << (DMFParser.T__129 - 77)) | (1 << (DMFParser.T__130 - 77)) | (1 << (DMFParser.T__134 - 77)) | (1 << (DMFParser.T__135 - 77)) | (1 << (DMFParser.T__137 - 77)) | (1 << (DMFParser.T__138 - 77)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (DMFParser.T__141 - 142)) | (1 << (DMFParser.T__142 - 142)) | (1 << (DMFParser.T__189 - 142)) | (1 << (DMFParser.T__199 - 142)) | (1 << (DMFParser.T__200 - 142)) | (1 << (DMFParser.T__201 - 142)))) != 0) or _la==DMFParser.ID):
                    localctx.n = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.which=(None if localctx.n is None else localctx.n.text)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.expr_sempred
        self._predicates[17] = self.rc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 64)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 55)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 54)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 53)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 18)
         

    def rc_sempred(self, localctx:RcContext, predIndex:int):
            if predIndex == 27:
                return localctx.n==1
         

            if predIndex == 28:
                return localctx.n==1
         




