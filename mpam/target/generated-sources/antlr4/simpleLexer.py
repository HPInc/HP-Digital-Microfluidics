# Generated from simple.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from mpam.types import Dir 
from langsup.type_supp import Type


from mpam.types import Dir 



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u016d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\3\3\3\3\4\3\4\3\4")
        buf.write("\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3\"\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3")
        buf.write("(\3)\3)\3*\3*\5*\u00fb\n*\3+\3+\5+\u00ff\n+\3,\3,\3,\5")
        buf.write(",\u0104\n,\3,\7,\u0107\n,\f,\16,\u010a\13,\3,\5,\u010d")
        buf.write("\n,\3-\6-\u0110\n-\r-\16-\u0111\3-\3-\6-\u0116\n-\r-\16")
        buf.write("-\u0117\7-\u011a\n-\f-\16-\u011d\13-\3.\3.\5.\u0121\n")
        buf.write(".\3.\3.\3/\3/\3/\5/\u0128\n/\3/\5/\u012b\n/\3/\3/\3/\5")
        buf.write("/\u0130\n/\3\60\3\60\5\60\u0134\n\60\3\61\3\61\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0141\n\62")
        buf.write("\3\63\3\63\7\63\u0145\n\63\f\63\16\63\u0148\13\63\3\63")
        buf.write("\3\63\3\64\3\64\3\64\3\64\7\64\u0150\n\64\f\64\16\64\u0153")
        buf.write("\13\64\3\64\5\64\u0156\n\64\3\64\3\64\3\64\3\64\3\65\3")
        buf.write("\65\3\65\3\65\7\65\u0160\n\65\f\65\16\65\u0163\13\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\4\u0151\u0161")
        buf.write("\2\67\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O\2Q\2S\2U\2W)Y*[\2]+_\2a\2c\2e,g-i.k/\3\2\t\4\2C\\")
        buf.write("c|\3\2\62;\4\2GGgg\6\2\f\f\17\17$$^^\5\2\62;CHch\b\2$")
        buf.write("$))^^ppttvv\5\2\13\f\17\17\"\"\2\u0176\2\3\3\2\2\2\2\5")
        buf.write("\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2")
        buf.write("\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2")
        buf.write("\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2")
        buf.write("\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2")
        buf.write("\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2]\3\2\2\2\2e\3\2\2\2\2")
        buf.write("g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\3m\3\2\2\2\5o\3\2\2\2")
        buf.write("\7q\3\2\2\2\tt\3\2\2\2\13w\3\2\2\2\ry\3\2\2\2\17{\3\2")
        buf.write("\2\2\21}\3\2\2\2\23\177\3\2\2\2\25\u0081\3\2\2\2\27\u0084")
        buf.write("\3\2\2\2\31\u0089\3\2\2\2\33\u008b\3\2\2\2\35\u0090\3")
        buf.write("\2\2\2\37\u0092\3\2\2\2!\u0095\3\2\2\2#\u009a\3\2\2\2")
        buf.write("%\u009d\3\2\2\2\'\u00a3\3\2\2\2)\u00a8\3\2\2\2+\u00ae")
        buf.write("\3\2\2\2-\u00b3\3\2\2\2/\u00b8\3\2\2\2\61\u00be\3\2\2")
        buf.write("\2\63\u00c3\3\2\2\2\65\u00c7\3\2\2\2\67\u00cb\3\2\2\2")
        buf.write("9\u00d2\3\2\2\2;\u00d8\3\2\2\2=\u00dc\3\2\2\2?\u00e3\3")
        buf.write("\2\2\2A\u00e5\3\2\2\2C\u00e7\3\2\2\2E\u00ea\3\2\2\2G\u00ec")
        buf.write("\3\2\2\2I\u00ee\3\2\2\2K\u00f0\3\2\2\2M\u00f2\3\2\2\2")
        buf.write("O\u00f4\3\2\2\2Q\u00f6\3\2\2\2S\u00fa\3\2\2\2U\u00fe\3")
        buf.write("\2\2\2W\u0103\3\2\2\2Y\u010f\3\2\2\2[\u011e\3\2\2\2]\u012f")
        buf.write("\3\2\2\2_\u0133\3\2\2\2a\u0135\3\2\2\2c\u0140\3\2\2\2")
        buf.write("e\u0142\3\2\2\2g\u014b\3\2\2\2i\u015b\3\2\2\2k\u0169\3")
        buf.write("\2\2\2mn\7}\2\2n\4\3\2\2\2op\7\177\2\2p\6\3\2\2\2qr\7")
        buf.write("]\2\2rs\7]\2\2s\b\3\2\2\2tu\7_\2\2uv\7_\2\2v\n\3\2\2\2")
        buf.write("wx\7*\2\2x\f\3\2\2\2yz\7+\2\2z\16\3\2\2\2{|\7.\2\2|\20")
        buf.write("\3\2\2\2}~\7]\2\2~\22\3\2\2\2\177\u0080\7_\2\2\u0080\24")
        buf.write("\3\2\2\2\u0081\u0082\7v\2\2\u0082\u0083\7q\2\2\u0083\26")
        buf.write("\3\2\2\2\u0084\u0085\7y\2\2\u0085\u0086\7g\2\2\u0086\u0087")
        buf.write("\7n\2\2\u0087\u0088\7n\2\2\u0088\30\3\2\2\2\u0089\u008a")
        buf.write("\7%\2\2\u008a\32\3\2\2\2\u008b\u008c\7f\2\2\u008c\u008d")
        buf.write("\7t\2\2\u008d\u008e\7q\2\2\u008e\u008f\7r\2\2\u008f\34")
        buf.write("\3\2\2\2\u0090\u0091\7B\2\2\u0091\36\3\2\2\2\u0092\u0093")
        buf.write("\7c\2\2\u0093\u0094\7v\2\2\u0094 \3\2\2\2\u0095\u0096")
        buf.write("\7i\2\2\u0096\u0097\7c\2\2\u0097\u0098\7v\2\2\u0098\u0099")
        buf.write("\7g\2\2\u0099\"\3\2\2\2\u009a\u009b\7w\2\2\u009b\u009c")
        buf.write("\7r\2\2\u009c$\3\2\2\2\u009d\u009e\7p\2\2\u009e\u009f")
        buf.write("\7q\2\2\u009f\u00a0\7t\2\2\u00a0\u00a1\7v\2\2\u00a1\u00a2")
        buf.write("\7j\2\2\u00a2&\3\2\2\2\u00a3\u00a4\7f\2\2\u00a4\u00a5")
        buf.write("\7q\2\2\u00a5\u00a6\7y\2\2\u00a6\u00a7\7p\2\2\u00a7(\3")
        buf.write("\2\2\2\u00a8\u00a9\7u\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab")
        buf.write("\7w\2\2\u00ab\u00ac\7v\2\2\u00ac\u00ad\7j\2\2\u00ad*\3")
        buf.write("\2\2\2\u00ae\u00af\7n\2\2\u00af\u00b0\7g\2\2\u00b0\u00b1")
        buf.write("\7h\2\2\u00b1\u00b2\7v\2\2\u00b2,\3\2\2\2\u00b3\u00b4")
        buf.write("\7y\2\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7u\2\2\u00b6\u00b7")
        buf.write("\7v\2\2\u00b7.\3\2\2\2\u00b8\u00b9\7t\2\2\u00b9\u00ba")
        buf.write("\7k\2\2\u00ba\u00bb\7i\2\2\u00bb\u00bc\7j\2\2\u00bc\u00bd")
        buf.write("\7v\2\2\u00bd\60\3\2\2\2\u00be\u00bf\7g\2\2\u00bf\u00c0")
        buf.write("\7c\2\2\u00c0\u00c1\7u\2\2\u00c1\u00c2\7v\2\2\u00c2\62")
        buf.write("\3\2\2\2\u00c3\u00c4\7t\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6")
        buf.write("\7y\2\2\u00c6\64\3\2\2\2\u00c7\u00c8\7e\2\2\u00c8\u00c9")
        buf.write("\7q\2\2\u00c9\u00ca\7n\2\2\u00ca\66\3\2\2\2\u00cb\u00cc")
        buf.write("\7e\2\2\u00cc\u00cd\7q\2\2\u00cd\u00ce\7n\2\2\u00ce\u00cf")
        buf.write("\7w\2\2\u00cf\u00d0\7o\2\2\u00d0\u00d1\7p\2\2\u00d18\3")
        buf.write("\2\2\2\u00d2\u00d3\7o\2\2\u00d3\u00d4\7c\2\2\u00d4\u00d5")
        buf.write("\7e\2\2\u00d5\u00d6\7t\2\2\u00d6\u00d7\7q\2\2\u00d7:\3")
        buf.write("\2\2\2\u00d8\u00d9\7k\2\2\u00d9\u00da\7p\2\2\u00da\u00db")
        buf.write("\7v\2\2\u00db<\3\2\2\2\u00dc\u00dd\7,\2\2\u00dd\u00de")
        buf.write("\7,\2\2\u00de\u00df\7a\2\2\u00df\u00e0\7a\2\2\u00e0\u00e1")
        buf.write("\7,\2\2\u00e1\u00e2\7,\2\2\u00e2>\3\2\2\2\u00e3\u00e4")
        buf.write("\7-\2\2\u00e4@\3\2\2\2\u00e5\u00e6\7?\2\2\u00e6B\3\2\2")
        buf.write("\2\u00e7\u00e8\7)\2\2\u00e8\u00e9\7u\2\2\u00e9D\3\2\2")
        buf.write("\2\u00ea\u00eb\7\61\2\2\u00ebF\3\2\2\2\u00ec\u00ed\7<")
        buf.write("\2\2\u00edH\3\2\2\2\u00ee\u00ef\7,\2\2\u00efJ\3\2\2\2")
        buf.write("\u00f0\u00f1\7/\2\2\u00f1L\3\2\2\2\u00f2\u00f3\7=\2\2")
        buf.write("\u00f3N\3\2\2\2\u00f4\u00f5\t\2\2\2\u00f5P\3\2\2\2\u00f6")
        buf.write("\u00f7\t\3\2\2\u00f7R\3\2\2\2\u00f8\u00fb\5O(\2\u00f9")
        buf.write("\u00fb\5Q)\2\u00fa\u00f8\3\2\2\2\u00fa\u00f9\3\2\2\2\u00fb")
        buf.write("T\3\2\2\2\u00fc\u00ff\5S*\2\u00fd\u00ff\7a\2\2\u00fe\u00fc")
        buf.write("\3\2\2\2\u00fe\u00fd\3\2\2\2\u00ffV\3\2\2\2\u0100\u0104")
        buf.write("\5O(\2\u0101\u0102\7a\2\2\u0102\u0104\5U+\2\u0103\u0100")
        buf.write("\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0108\3\2\2\2\u0105")
        buf.write("\u0107\5U+\2\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108")
        buf.write("\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010c\3\2\2\2")
        buf.write("\u010a\u0108\3\2\2\2\u010b\u010d\7A\2\2\u010c\u010b\3")
        buf.write("\2\2\2\u010c\u010d\3\2\2\2\u010dX\3\2\2\2\u010e\u0110")
        buf.write("\5Q)\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u010f")
        buf.write("\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u011b\3\2\2\2\u0113")
        buf.write("\u0115\7a\2\2\u0114\u0116\5Q)\2\u0115\u0114\3\2\2\2\u0116")
        buf.write("\u0117\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\u011a\3\2\2\2\u0119\u0113\3\2\2\2\u011a\u011d\3")
        buf.write("\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011cZ")
        buf.write("\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0120\t\4\2\2\u011f")
        buf.write("\u0121\7/\2\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2")
        buf.write("\u0121\u0122\3\2\2\2\u0122\u0123\5Y-\2\u0123\\\3\2\2\2")
        buf.write("\u0124\u0125\5Y-\2\u0125\u0127\7\60\2\2\u0126\u0128\5")
        buf.write("Y-\2\u0127\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012a")
        buf.write("\3\2\2\2\u0129\u012b\5[.\2\u012a\u0129\3\2\2\2\u012a\u012b")
        buf.write("\3\2\2\2\u012b\u0130\3\2\2\2\u012c\u012d\5Y-\2\u012d\u012e")
        buf.write("\5[.\2\u012e\u0130\3\2\2\2\u012f\u0124\3\2\2\2\u012f\u012c")
        buf.write("\3\2\2\2\u0130^\3\2\2\2\u0131\u0134\n\5\2\2\u0132\u0134")
        buf.write("\5c\62\2\u0133\u0131\3\2\2\2\u0133\u0132\3\2\2\2\u0134")
        buf.write("`\3\2\2\2\u0135\u0136\t\6\2\2\u0136b\3\2\2\2\u0137\u0138")
        buf.write("\7^\2\2\u0138\u0141\t\7\2\2\u0139\u013a\7^\2\2\u013a\u013b")
        buf.write("\7w\2\2\u013b\u013c\5a\61\2\u013c\u013d\5a\61\2\u013d")
        buf.write("\u013e\5a\61\2\u013e\u013f\5a\61\2\u013f\u0141\3\2\2\2")
        buf.write("\u0140\u0137\3\2\2\2\u0140\u0139\3\2\2\2\u0141d\3\2\2")
        buf.write("\2\u0142\u0146\7$\2\2\u0143\u0145\5_\60\2\u0144\u0143")
        buf.write("\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146")
        buf.write("\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u0146\3\2\2\2")
        buf.write("\u0149\u014a\7$\2\2\u014af\3\2\2\2\u014b\u014c\7\61\2")
        buf.write("\2\u014c\u014d\7\61\2\2\u014d\u0151\3\2\2\2\u014e\u0150")
        buf.write("\13\2\2\2\u014f\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151")
        buf.write("\u0152\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0155\3\2\2\2")
        buf.write("\u0153\u0151\3\2\2\2\u0154\u0156\7\17\2\2\u0155\u0154")
        buf.write("\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2\u0157")
        buf.write("\u0158\7\f\2\2\u0158\u0159\3\2\2\2\u0159\u015a\b\64\2")
        buf.write("\2\u015ah\3\2\2\2\u015b\u015c\7\61\2\2\u015c\u015d\7,")
        buf.write("\2\2\u015d\u0161\3\2\2\2\u015e\u0160\13\2\2\2\u015f\u015e")
        buf.write("\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u0162\3\2\2\2\u0161")
        buf.write("\u015f\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u0161\3\2\2\2")
        buf.write("\u0164\u0165\7,\2\2\u0165\u0166\7\61\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u0168\b\65\2\2\u0168j\3\2\2\2\u0169\u016a")
        buf.write("\t\b\2\2\u016a\u016b\3\2\2\2\u016b\u016c\b\66\2\2\u016c")
        buf.write("l\3\2\2\2\25\2\u00fa\u00fe\u0103\u0108\u010c\u0111\u0117")
        buf.write("\u011b\u0120\u0127\u012a\u012f\u0133\u0140\u0146\u0151")
        buf.write("\u0155\u0161\3\b\2\2")
        return buf.getvalue()


class simpleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    ADD = 31
    ASSIGN = 32
    ATTR = 33
    DIV = 34
    INJECT = 35
    MUL = 36
    SUB = 37
    TERMINATOR = 38
    ID = 39
    INT = 40
    FLOAT = 41
    STRING = 42
    EOL_COMMENT = 43
    COMMENT = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'[['", "']]'", "'('", "')'", "','", "'['", "']'", 
            "'to'", "'well'", "'#'", "'drop'", "'@'", "'at'", "'gate'", 
            "'up'", "'north'", "'down'", "'south'", "'left'", "'west'", 
            "'right'", "'east'", "'row'", "'col'", "'column'", "'macro'", 
            "'int'", "'**__**'", "'+'", "'='", "''s'", "'/'", "':'", "'*'", 
            "'-'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "ASSIGN", "ATTR", "DIV", "INJECT", "MUL", "SUB", "TERMINATOR", 
            "ID", "INT", "FLOAT", "STRING", "EOL_COMMENT", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "ADD", "ASSIGN", "ATTR", 
                  "DIV", "INJECT", "MUL", "SUB", "TERMINATOR", "ALPHA", 
                  "DIGIT", "ALNUM", "IDCHAR", "ID", "INT", "EXPT", "FLOAT", 
                  "STRING_CHAR", "HEX", "ESC_SEQ", "STRING", "EOL_COMMENT", 
                  "COMMENT", "WS" ]

    grammarFileName = "simple.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


