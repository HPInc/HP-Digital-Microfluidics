from __future__ import annotations
from enum import Enum, auto
from os import PathLike
from typing import Optional

class ErrorCode(Enum):
    ErrorSuccess = auto()
    ErrorFailure = auto()
    ErrorFailureHardware = auto()
    ErrorFailureToOpenFile = auto()
    ErrorFailureSystem = auto()
    ErrorHardwareNotSupported = auto()
    
class BoardId(Enum):
    Unknown = auto()
    Wallaby = auto()
    
    
class Electrode:
    class ElectrodeState(Enum):
        Off = auto()
        On = auto()
        Unknown = auto()
        
    def GetName(self) -> str: ...
    def GetCoordinatesList(self) -> list[tuple[int, int]]: ...
    def GetCurrentState(self) -> ElectrodeState: ...
    def GetTargetState(self) -> ElectrodeState: ...
    def SetTargetState(self, electrodeState: ElectrodeState) -> ErrorCode: ... # @UnusedVariable
    def GetHeaters(self) -> list[str]: ...
    def GetMagnets(self) -> list[str]: ...
    def GetDataBufferIndex(self) -> int: ...
    
class Heater:
    class HeaterType(Enum):
        Paddle = auto()
        TSR = auto()
        Peltier = auto()
        Unknown = auto()
        
    class HeaterState(Enum):
        Off = auto()
        Heating = auto()
        Cooling = auto()
        Unknown = auto()
        
    class HeaterStatus:
        def GetHeaterState(self) -> Heater.HeaterState: ...
        def GetTargetState(self) -> Heater.HeaterState: ...
        def GetCurrentTemperature(self) -> float: ...
        def GetTargetTemperature(self) -> float: ...
        def GetEtaInMilliseconds(self) -> int: ...
        
    def GetName(self) -> str: ...
    def GetType(self) -> HeaterType: ...
    def GetStatus(self) -> HeaterStatus: ...
    def GetCurrentState(self) -> HeaterState: ...
    def GetTargetState(self) -> HeaterState: ...
    def GetCurrentTemperature(self) -> float: ...
    def GetTargetTemperature(self) -> float: ...
    def SetTargetTemperatureHeating(self, targetTemperature: float) -> ErrorCode: ... # @UnusedVariable
    def SetTargetTemperatureChilling(self, targetTemperature: float) -> ErrorCode: ... # @UnusedVariable
    def GetHeatingRate(self) -> float: ...
    def GetCoolingRate(self) -> float: ...
    def GetElectrodeNames(self) -> list[str]: ...
    def GetElectrodes(self) -> list[Electrode]: ...
    
class Magnet:
    class MagnetState(Enum):
        Disable = auto()
        On = auto()
        Off = auto()
        Unknown = auto()
        
    def GetName(self) -> str: ...
    def GetCurrentState(self) -> MagnetState: ...
    def GetTargetState(self) -> MagnetState: ...
    def SetTargetState(self, magnetState: MagnetState) -> ErrorCode: ... # @UnusedVariable
    def GetElectrodeNames(self) -> list[str]: ...
    def GetElectrodes(self) -> list[Electrode]: ...
    
class Board:
    @classmethod
    def Find(cls, boardID: BoardId, *, # @UnusedVariable
             dll_dir: Optional[PathLike] = None, # @UnusedVariable
             config_dir: Optional[PathLike] = None) -> Board: ... # @UnusedVariable
    def GetBoardId(self) -> BoardId: ...
    def GetBoardRows(self) -> int: ...
    def GetBoardColumns(self) -> int: ...
    def GetElectrodes(self) -> list[Electrode]: ...
    def ElectrodeAt(self, x: int, y: int) -> Optional[Electrode]: ... # @UnusedVariable
    def ElectrodeNamed(self, name: str) -> Optional[Electrode]: ... # @UnusedVariable
    def DumpElectrodes(self) -> ErrorCode: ...
    def GetHeaters(self) -> list[Heater]: ...
    def HeaterNamed(self, name: str) -> Optional[Heater]: ... # @UnusedVariable
    def DumpHeaters(self) -> ErrorCode: ...
    def GetAmbientTemperature(self) -> float: ...
    def GetMagnets(self) -> list[Magnet]: ...
    def MagnetNamed(self, name: str) -> Optional[Magnet]: ... # @UnusedVariable
    def IsHighVoltageEnabled(self) -> bool: ...
    def EnableHighVoltage(self) -> ErrorCode: ...
    def DisableHighVoltage(self) -> ErrorCode: ...
    def GetHighVoltage(self) -> tuple[ErrorCode, float]: ...
    def SetHighVoltage(self, volts: float) -> ErrorCode: ... # @UnusedVariable
    def IsFanEnabled(self) -> bool: ...
    def EnableFan(self) -> ErrorCode: ...
    def DisableFan(self) -> ErrorCode: ...
    def MakeItSo(self) -> ErrorCode: ...
