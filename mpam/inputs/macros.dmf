rectangle=macro(drop d, int w, int h) {
  d : right w : up h : left w : down h;
};

walk_rectangle = macro(drop) { 
  rectangle(drop, 5, 3);
};

ready = macro(well w) {
  [[
    w[0]: off;
    w[1]: off;
    w[2]: off;
    w[3]: off;
    w[4]: off;
    w[5]: off;
    w[6]: on;
    w[7]: on;
    w[8]: off;
    w's gate: off;
  ]]
};

disp1 = macro(well w) {
  [[ w[3]: on; w[4]: on; w[5]: on; ]]
  [[ w[0]: on; w[1]: on; w[2]: on; ]]
  w's gate: on; 
  w's exit pad: on;
  [[ w's gate: off;
     w[0]: off;
     w[1]: off;
     w[2]: off;
     w[3]: off;
     w[5]: off;
  ]]
  [[ w[0]: on; w[1]: on; w[2]: on; ]]
  w: ready; 
  drop@w's exit pad;
};

disp2 = macro(well w) {
  [[ w[3]: on; w[4]: on; w[5]: on; w[7]: off; ]]
  [[ w[0]: on; w[1]: on; w[2]: on; w[6]: off; ]]
  [[ w's gate: on; 
     w's exit pad: on;
     w[3]: off; 
     w[5]: off; 
  ]] 
  w's gate: off;
  [[ 
     w[0]: off;
     w[2]: off;
     w[6]: on;
  ]]
  [[ 
     w[1]: off; 
     w[7]: on; 
  ]]
  w: ready; 
  drop@w's exit pad;
};


test = macro(drop d, time) {
  d: right 1: pause time: right 2;
};

max = macro(int x, int y) {
  if x > y {
    x;
  } else {
    y;
  }
};

compare = macro(int x, int y) {
  if x > y {
    1;
  } else if x < y {
    -1;
  } else {
    0;
  }
};

maybe_move = macro(drop, int dist) {
  if dist > 0 {
    drop: dist right;
  }
};

mix = macro(dir) {
  macro(drop 1) {
    local pad 1 = drop 1's pad;
    local pad 2 = pad 1 + 2 in direction dir;
    local drop 2 = pad 2's drop;
    [[
       drop 1: unsafe_walk(dir);
       pad 2: off; 
    ]]
    drop 2: remove from board;
    drop 1's contents = drop 1's contents + drop 2's contents;
    [[
      drop 1: dir turned around;
      pad 2: on; 
    ]]
    drop 2's pad = pad 2;
    drop 1's contents = drop 1's contents/2;
    drop 2's contents = drop 1's contents;
	drop 1;
  };
};

scope_test = macro(int n) {
  print "param: ", n;
  int n = n+1;
  print "local: ", n;
  {
    float n = 10;
    print "inner: ", n;
    {
      n = 2 * n;
      // y = 5;
      print "assigned inner: ", n;
      local n = 5*n;
      print "nested: ", n;
    }
    print "back to inner: ", n;
  }
  print "local: ", n;
  n;
};

r1 = reagent "r1";
r2 = reagent "r2";
d1 = drop@(2,3);
d1's reagent = r1;
d2 = 1 drop of r2 @ (4,3);
t1 = 2 sec;
w2 = well #2;